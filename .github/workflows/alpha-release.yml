name: Manual Alpha Package Release

on:
  # Allows running workflow manually from the GitHub Actions tab
  workflow_dispatch:

# cancel workflow when a newer version of the workflow is triggered on the same github ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    name: Build and publish alpha package
    environment:
      name: npm-alpha
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      # Check-out repo
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Ensure node version is great enough
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Try get node_modules from cache
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: common/temp/pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('common/config/rush/pnpm-lock.yaml') }}

      # Install dependencies
      - name: Install rush
        run: npm install -g @microsoft/rush@$(jq -r '.rushVersion' "rush.json")
      - name: Install dependencies
        run: rush install --max-install-attempts 3

      # Get datetime
      - name: Get datetime for alpha release name
        id: datetime
        run: |
          echo "datetime=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      # Bump alpha package versions
      - name: Bump alpha package versions
        run: node common/scripts/bump-alpha-versions.js ${{ steps.datetime.outputs.datetime }}

      - name: Synchronize package version reported to telemetry
        run: node common/scripts/sync-telemetry-package-version

      # Important to check version consistency again after bumping versions.
      - name: Ensure all package versions are consistent
        run: rush ensure-consistent-versions

      # Alpha version run latest
      - name: Force build flavor to `beta`
        run: node ./common/scripts/force-build-flavor.mjs beta

      # Build packages
      - name: Build @azure/communication-react package
        run: rush build -t @azure/communication-react

      # Test Packages
      - name: Test @azure/communication-react package
        run: rush test -t @azure/communication-react

      # Retrieve new version to tag and publish release with
      - name: Retrieve new version from package.json
        id: version
        run: |
          ver=$(jq -r .version packages/communication-react/package.json)
          echo version: $ver
          echo "version=$ver" >> $GITHUB_OUTPUT

      # Clean package.json
      - name: Remove devDependencies and beachball from package.json
        run: node ../../common/scripts/prepare-package-json.js
        working-directory: ./packages/communication-react

      # Package package into tarball for release
      - name: Package alpha packages for release
        run: npm pack
        working-directory: ./packages/communication-react

      # Login via OIDC to permit uploading to azure blob store
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.NPM_DEPLOY_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.NPM_DEPLOY_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.NPM_DEPLOY_AZURE_SUBSCRIPTION_ID }}

      # Deploy npm package - this is done by uploading to Azure's SDK blob storage then triggering their partner release pipeline.
      # More info: https://dev.azure.com/azure-sdk/internal/_wiki/wikis/internal.wiki/1/Partner-Release-Pipeline
      - name: Upload tarball to blob storage
        run: az storage blob upload -f "packages/communication-react/release/azure-communication-react-${{ steps.version.outputs.version }}.tgz" -c "drops/azure-communication-services/react/npm/${{ steps.version.outputs.version }}" --account-name azuresdkpartnerdrops --auth-mode login

      # Get access token to trigger the release pipeline based on OIDC login
      #
      # Ideally we would use `az pipelines release create` CLI, but it does not support release variables: https://github.com/Azure/azure-cli-extensions/issues/953
      # Instead, we use the az CLI to generate a PAT and then use that to trigger the release pipeline
      #
      # NOTES:
      #   - 590cfd2a-581c-4dcb-a12e-6568ce786175 is the GUID of the Azure Partner Pipelines ADO project
      #   - 499b84ac-1321-427f-aa17-267ca6975798 is generic GUID of Azure DevOps resource
      - name: Get Azure DevOps Access Token
        id: az-devops-access-token
        run: |
          az extension add --name azure-devops
          az devops configure --defaults organization=https://dev.azure.com/azure-sdk project=590cfd2a-581c-4dcb-a12e-6568ce786175
          echo "token=$(az account get-access-token --resource 499b84ac-1321-427f-aa17-267ca6975798 --query accessToken -o tsv)" >> $GITHUB_OUTPUT

      - name: Trigger alpha package release pipeline
        uses: Azure/pipelines@v1.2
        with:
          azure-devops-project-url: 'https://dev.azure.com/azure-sdk/internal'
          azure-pipeline-name: 'js - partner-release'
          azure-devops-token: ${{ steps.az-devops-access-token.outputs.token }}
          azure-pipeline-variables: '{"BlobPath": "\"azure-communication-services/react/npm/${{ steps.version.outputs.version }}\"", "Tag": "\"dev\""}'

      # Push git tags
      - name: Create and push git tags
        run: |
          git tag ${{ steps.version.outputs.version }}
          git push --tags

      - name: Check if npm package published successfully
        run: node common/scripts/poll-npm-package-published.mjs ${{ steps.version.outputs.version }}
