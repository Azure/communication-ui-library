name: Nightly alpha package release

on:
  schedule:
    # minute 0, hour 0 UTC (which is 6pm PST/5pm PDT), any day of month, any month, any day of the week
    # if we want to support only Mon - Fri we need to change the check how we look for new changes. Currently we
    # check for any new changes in the last 24 hours regardless of day)
    - cron: '0 0 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  checkForChanges:
    name: Check for new changes
    outputs:
      hasChanged: ${{ steps.checkChange.outputs.hasChanged }}
    runs-on: ubuntu-latest
    steps:
      # Check-out repo
      - uses: actions/checkout@v2

      # Check if any changes have been pushed to main since last release
      - name: Check latest commit age
        id: checkChange
        # Here we query the github rest api for the commits, use jq (json parser) to grab the first commit and put contents into $HOME/commit.json
        # Note: we ignore commits made by the bot account that commits the auto version bump changes.
        # Then get the timestamp date for the first commit and check if it was over a day old.
        run: |
          curl -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -sL https://api.github.com/repos/${{ github.repository }}/commits | jq -r '[.[] | select(.author.login != "github-action-bot")][0]' > $HOME/commit.json

          commitdate=$(jq -r '.commit.author.date' $HOME/commit.json)
          commiturl=$(jq -r '.url' $HOME/commit.json)
          echo Last commit: $commiturl
          echo Last commit date \(UTC\): $commitdate

          timestamp=$(date --utc -d "$commitdate" +%s)
          echo Commit timestamp: $timestamp

          currentTimestamp=$(date --utc +%s)
          echo Current timestamp: $currentTimestamp

          days=$(( ($currentTimestamp - $timestamp ) / 86400 ))
          echo Days since last commit: $days

          if [ $days = "0" ]; then
            echo "::set-output name=hasChanged::true"
          else
            echo "::set-output name=hasChanged::false"
          fi

  release:
    name: Create alpha releases
    needs: checkForChanges
    if: needs.checkForChanges.outputs.hasChanged == 'true'
    runs-on: ubuntu-latest
    steps:
      # Check-out repo
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Ensure node version is great enough
      - name: Use Node.js v14.x
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      # Try get node_modules from cache
      - name: Restore node_modules from cache
        uses: actions/cache@v2
        with:
          path: common/temp/pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('common/config/rush/pnpm-lock.yaml') }}

      # Install dependencies
      - name: Install rush
        run: npm install -g @microsoft/rush@5.47.0
      - name: Install dependencies
        run: rush install

      # Get datetime
      - name: Get datetime for alpha release name
        id: datetime
        run: |
          echo "::set-output name=datetime::$(date +'%Y%m%d%H%M')"

      # Bump alpha package versions
      - name: Bump alpha package versions
        run: node common/config/node_modules/beachball/bin/beachball canary --canary-name alpha-${{ steps.datetime.outputs.datetime }} --tag dev --no-publish

      - name: Synchronize package version reported to telemetry
        run: node common/scripts/sync-telemetry-package-version

      # Important to check version consistency again after bumping versions.
      - name: Ensure all package versions are consistent
        run: rush ensure-consistent-versions

      # Build packages
      - name: Build @azure/communication-react package
        run: rush build -v -t @azure/communication-react

      # Test Packages
      - name: Test @azure/communication-react package
        run: rush test -t @azure/communication-react

      # Retrieve new version to tag and publish release with
      - name: Retrieve new version from package.json
        id: version
        run: |
          ver=$(jq -r .version packages/communication-react/package.json)
          echo version: $ver
          echo "::set-output name=version::$ver"

      # Push git tags
      - name: Create and push git tags
        run: |
          git tag ${{ steps.version.outputs.version }}
          git push --tags

      # Publish package
      - name: Package alpha packages for release
        run: npm pack
        working-directory: ./packages/communication-react

      # Deploy npm package - this is done by uploading to Azure's SDK blob storage then triggering their partner release pipeline.
      # More info: https://dev.azure.com/azure-sdk/internal/_wiki/wikis/internal.wiki/1/Partner-Release-Pipeline
      - name: Upload tarball to blob storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZURESDKPARTNERDROPS_CLIENT_ID }} -p ${{ secrets.AZURESDKPARTNERDROPS_SERVICE_PRINCIPAL_KEY }} --tenant ${{ secrets.AZURESDKPARTNERDROPS_TENANT_ID }}
            az extension add --name storage-preview
            az storage azcopy blob upload -s "packages/communication-react/release/*" -c "drops/azure-communication-services/react/npm/${{ steps.version.outputs.version }}" --account-name azuresdkpartnerdrops

      - name: Install github actions dependencies
        run: npm ci
        working-directory: ./.github/workflows/azure-pipeline-action-fork

      - name: Trigger alpha package release pipeline
        uses: ./.github/workflows/azure-pipeline-action-fork
        with:
          azure-devops-project-url: 'https://dev.azure.com/azure-sdk/internal'
          azure-pipeline-name: 'azuresdkpartnerdrops to npm'
          azure-devops-token: '${{ secrets.AZURE_SDK_RELEASE_PIPELINE_DEVOPS_TOKEN }}'
          azure-pipeline-variables: '{"accessLevel": "public", "BlobPath": "azure-communication-services/react/npm/${{ steps.version.outputs.version }}", "registry": "https://registry.npmjs.org/", "skipDiff": "False", "tag": "dev"}'
