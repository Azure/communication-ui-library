name: CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE so job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Ensure node version is great enough
      - name: Use Node.js v12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Install dependencies
      - name: Install rush
        run: npm install -g @microsoft/rush
      - name: Install dependencies
        run: rush install

      # Perform changelog check
      - name: Check the necessary change file has been submitted
        run: rush changelog:check

      # Perform lint check
      - name: Run linter
        run: rush lint

      # Builds
      - name: Build Packages and Samples
        run: rush build

      # Verify no uncommitted api extractor changes
      - name: API Extractor Check
        run: |
          DIFF_FILE="APIChanges.diff"
          git diff --output=$DIFF_FILE --exit-code **/review/**.md
          DIFF_STATUS=$?
          echo "Exit code for git diff for changes in api review files: $DIFF_STATUS"
          if [$DIFF_STATUS -ne 0]
          then
              echo "API CHANGES FOUND - PLEASE RUN 'rushx api-extractor' IN THE APPROPRIATE PACKAGE(S)"
              echo "Changes:"
              cat $DIFF_FILE
              exit 1
          else
            echo "Success, no new api changes found."
          fi

      # Run tests
      - name: Run Tests
        run: rush test
        env:
          CI: true

      # Deploy Storybook - only perform this step on main branch CI
      - name: Deploy Storybook
        if: github.ref == 'refs/heads/main'
        run: rushx deploy-storybook -- --ci
        working-directory: ./packages/storybook
        env:
          GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}

      # Create a GitHub issue if the CI failed when running on the `main` branch
      - name: Create issue if main branch CI failed
        id: create-issue
        if: failure() && github.ref == 'refs/heads/main'
        uses: JasonEtco/create-an-issue@v2.4.0
        with:
          filename: .github/failed_ci_build_template.md
          update_existing: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
