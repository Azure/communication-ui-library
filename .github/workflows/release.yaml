name: Release

on:
  # release:
  # types: [created]
  # remove once tested:
  pull_request:
    branches: [main]
  # schedule:
  # minute 0, hour 15 UTC which is 8am in PST (9am in PDT), any day of month, any month, any day of the week
  # if we want to support only Mon - Fri we need to change the check where we look for changes in the last 24 hours regardless of day
  # - cron: "0 15 * * *"

jobs:
  checkForChanges:
    name: Check for new changes
    outputs:
      hasChanged: ${{ steps.checkChange.outputs.hasChanged }}
    runs-on: ubuntu-latest
    steps:
      # Check-out repo
      - uses: actions/checkout@v2

      # Check if any changes have been pushed to main since last release
      - name: Check latest commit age
        id: checkChange
        # Here we query the github rest api for the commits, use jq (json parser) to grab the first commit and put contents into $HOME/commit.json
        # Note: we ignore commits made by the bot account that commits the auto version bump changes.
        # Then get the timestamp date for the first commit and check if it was over a day old.
        run: |
          curl -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -sL https://api.github.com/repos/${{ github.repository }}/commits | jq -r '[.[] | select(.author.login != "ytyeason") | select(.author.login != "JamesBurnside")][0]' $HOME/commit.json > $HOME/commit.json

          commitdate=$(jq -r '.commit.author.date' $HOME/commit.json)
          commiturl=$(jq -r '.url' $HOME/commit.json)
          echo Last commit: $commiturl
          echo Last commit date \(UTC\): $commitdate

          timestamp=$(date --utc -d "$commitdate" +%s)
          echo Commit timestamp: $timestamp

          currentTimestamp=$(date --utc +%s)
          echo Current timestamp: $currentTimestamp

          days=$(( ($currentTimestamp - $timestamp ) / 86400 ))
          echo Days since last commit: $days

          if [ $days = "0" ]; then
            echo "::set-output name=hasChanged::true"
          else
            echo "::set-output name=hasChanged::false"
          fi

  release:
    name: Upload Releases
    needs: checkForChanges
    if: needs.checkForChanges.outputs.hasChanged == 'true'
    runs-on: ubuntu-latest
    steps:
      # Check-out repo
      - uses: actions/checkout@v2

      # Ensure node version is great enough
      # - name: Use Node.js v12.x
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: '12.x'

      # # Install dependencies
      # - name: Install rush
      #   run: npm install -g @microsoft/rush
      # - name: Install dependencies
      #   run: rush install

      # # Builds
      # - name: Build Packages and Samples
      #   run: rush build

      # # Package up artifacts for release
      # - name: Package Group Calling Sample Artifact
      #   run: rushx package
      #   working-directory: ./samples/Calling

      # - name: Package One To One Calling Sample Artifact
      #   run: rushx package
      #   working-directory: ./samples/OneToOneCall

      # - name: Package Group Chat Sample Artifact
      #   run: rushx package
      #   working-directory: ./samples/Chat

      # - name: Package Private-Preview Artifact
      #   run: npm pack
      #   working-directory: ./packages/communication-ui/

      # - name: Archive builds
      #   run: |
      #     7z a group-calling.zip ./samples/Calling/dist/*
      #     7z a group-chat.zip ./samples/Chat/dist/*
      #     7z a one-to-one-calling.zip ./samples/OneToOneCall/dist/*
      #     7z a private-preview.zip ./packages/communication-ui/private-preview/*

      # Get datetime to mark the releases. This will become the version number when version bumping is fully implemented.
      - name: Get Release names
        id: releasenames
        run: |
          echo "::set-output name=tagname::$(date +' %Y-%m-%d-%H%M')"
          echo "::set-output name=releasename::$(TZ=":America/Vancouver" date +' %Y-%m-%d %H%M')"

      # # Upload releases
      # - name: Publish Samples and PrivatePreview Releases
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: Release ${{ steps.releasenames.outputs.releasename }}
      #     tag_name: Release/${{ steps.releasenames.outputs.tagname }}
      #     files: |
      #       group-calling.zip
      #       group-chat.zip
      #       one-to-one-calling.zip
      #       private-preview.zip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
