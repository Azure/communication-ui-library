name: Release

on:
  # release:
  # types: [created]
  # remove once tested:
  pull_request:
    branches: [main]
  # schedule:
  # minute 0, hour 15 UTC which is 8am in PST (9am in PDT), any day of month, any month, days 1-5 of week (M-F)
  # - cron: "0 15 * * 1-5"

jobs:
  checkForChanges:
    name: Check for new changes
    outputs:
      hasChanged: ${{ steps.checkChange.outputs.hasChanged }}
    runs-on: ubuntu-latest
    steps:
      # Check-out repo
      - uses: actions/checkout@v2

      # Check if any changes have been pushed to main since last release
      - name: Just default to true for now
        id: checkChange
        # Default to true for now
        run: |
          curl -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -L https://api.github.com/repos/${{ github.repository }}/commits > $HOME/commit.json
          cat $HOME/commit.json
          date="$(jq -r '.commit.author.date' $HOME/commit.json)"
          echo $date
          timestamp=$(date --utc -d "$date" +%s)
          echo $timestamp
          days=$(( ( $(date --utc +%s) - $timestamp ) / 86400 ))
          echo $days
          echo "::set-output name=hasChanged::true"

  release:
    name: Upload Releases
    needs: checkForChanges
    if: ${{ needs.checkForChanges.outputs.hasChanged }} == 'true'
    runs-on: ubuntu-latest
    steps:
      # Check-out repo
      - uses: actions/checkout@v2

      # Get datetime to mark the releases. This will become the version number when version bumping is fully implemented.
      - name: Get current date
        id: date
        run: |
          TZ="PST" echo "::set-output name=date::$(date +' %Y-%m-%d')"
          TZ="PST" echo "::set-output name=hour::$(date +' %H')"
          TZ="PST" echo "::set-output name=minute::$(date +' %M')"

      - name: Test retreived date
        run: echo ${{ steps.date.outputs.date }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}
      # Ensure node version is great enough
      # - name: Use Node.js v12.x
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: '12.x'

      # # Install dependencies
      # - name: Install rush
      #   run: npm install -g @microsoft/rush
      # - name: Install dependencies
      #   run: rush install

      # # Builds
      # - name: Build Packages and Samples
      #   run: rush build

      # # Package up artifacts for release
      # - name: Package Group Calling Sample Artifact
      #   run: rushx package
      #   working-directory: ./samples/Calling

      # - name: Package One To One Calling Sample Artifact
      #   run: rushx package
      #   working-directory: ./samples/OneToOneCall

      # - name: Package Group Chat Sample Artifact
      #   run: rushx package
      #   working-directory: ./samples/Chat

      # - name: Package Private-Preview Artifact
      #   run: npm pack
      #   working-directory: ./packages/communication-ui/

      # - name: Archive builds
      #   run: |
      #     7z a group-calling.zip ./samples/Calling/dist/*
      #     7z a group-chat.zip ./samples/Chat/dist/*
      #     7z a one-to-one-calling.zip ./samples/OneToOneCall/dist/*
      #     7z a private-preview.zip ./packages/communication-ui/private-preview/*

      # # Upload releases
      # - name: Publish Private Preview Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: PrivatePreview ${{ steps.date.outputs.date }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}
      #     tag_name: PrivatePreview/${{ steps.date.outputs.date }}-${{ steps.date.outputs.hour }}${{ steps.date.outputs.minute }}
      #     files: private-preview.zip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Publish Samples Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: Samples ${{ steps.date.outputs.date }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}
      #     tag_name: Samples/${{ steps.date.outputs.date }}-${{ steps.date.outputs.hour }}${{ steps.date.outputs.minute }}
      #     files: |
      #       group-calling.zip
      #       group-chat.zip
      #       one-to-one-calling.zip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
