{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.18.21",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@azure/communication-react!",
  "docComment": "/**\n * `@azure/communication-react` is an npm package that exports the functionality of the Azure Communication Services - UI Library.\n *\n * This package makes it easy for you to build modern communications user experiences using Azure Communication Services. It gives you a library of production-ready UI components that you can drop into your applications: - Composites: These components are turn-key solutions that implement common communication scenarios. You can quickly add video calling or chat experiences to your applications. Composites are open-source higher order components built using UI components. - UI Components - These components are open-source building blocks that let you build custom communications experience. Components are offered for both calling and chat capabilities that can be combined to build experiences.\n *\n * These UI client libraries all use Microsoft's Fluent design language and assets. Fluent UI provides a foundational layer for the UI Library and is actively used across Microsoft products.\n *\n * In conjunction with the UI components, the UI Library exposes a stateful client library for calling and chat. This client is agnostic to any specific state management framework and can be integrated with common state managers like Redux or React Context. This stateful client library can be used with the UI Components to pass props and methods for the UI Components to render data. For more information, see Stateful Client Overview.\n *\n * For more information visit: https://aka.ms/acsstorybook\n *\n * @packageDocumentation\n */\n",
  "name": "@azure/communication-react",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@azure/communication-react!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ACSCallManagement:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ACSCallManagement = "
            },
            {
              "kind": "Content",
              "text": "{\n    joinCall(microphoneOn?: boolean): "
            },
            {
              "kind": "Reference",
              "text": "Call",
              "canonicalReference": "@azure/communication-calling!Call:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    startCall(participants: string[], options?: "
            },
            {
              "kind": "Reference",
              "text": "StartCallOptions",
              "canonicalReference": "@azure/communication-calling!StartCallOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Call",
              "canonicalReference": "@azure/communication-calling!Call:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ACSCallManagement",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ActiveErrorMessage:interface",
          "docComment": "/**\n * Active error messages to be shown via {@link ErrorBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ActiveErrorMessage "
            }
          ],
          "releaseTag": "Public",
          "name": "ActiveErrorMessage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ActiveErrorMessage#timestamp:member",
              "docComment": "/**\n * The latest timestamp when this error was observed.\n *\n * When available, this is used to track errors that have already been seen and dismissed by the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ActiveErrorMessage#type:member",
              "docComment": "/**\n * Type of error that is active.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorType",
                  "canonicalReference": "@azure/communication-react!ErrorType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!AdapterError:interface",
          "docComment": "/**\n * Error reported via error events and stored in adapter state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AdapterError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AdapterError",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!AdapterError#innerError:member",
              "docComment": "/**\n * Error thrown by the failed operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "innerError: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "innerError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!AdapterError#target:member",
              "docComment": "/**\n * The operation that failed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!AdapterError#timestamp:member",
              "docComment": "/**\n * Timestamp added to the error in the adapter implementation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AdapterErrors:type",
          "docComment": "/**\n * Adapters stores the latest error for each operation in the state.\n *\n * `target` is an adapter defined string for each unique operation performed by the adapter.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AdapterErrors = "
            },
            {
              "kind": "Content",
              "text": "{\n    [target: string]: "
            },
            {
              "kind": "Reference",
              "text": "AdapterError",
              "canonicalReference": "@azure/communication-react!AdapterError:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AdapterErrors",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!AdapterState:interface",
          "docComment": "/**\n * Functionality for interfacing with Composite adapter state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AdapterState<TState> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TState",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "AdapterState",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!AdapterState#getState:member(1)",
              "docComment": "/**\n * Get the current State\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getState(): "
                },
                {
                  "kind": "Content",
                  "text": "TState"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getState"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!AdapterState#offStateChange:member(1)",
              "docComment": "/**\n * Unsubscribes the handler to stateChanged events.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offStateChange(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(state: TState) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "offStateChange"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!AdapterState#onStateChange:member(1)",
              "docComment": "/**\n * Subscribes the handler to stateChanged events.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStateChange(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(state: TState) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "onStateChange"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AreEqual:type",
          "docComment": "/**\n * Compare if 2 react components are exact equal, result type will be true/false\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AreEqual<A extends "
            },
            {
              "kind": "Content",
              "text": "(props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "(props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "true extends "
            },
            {
              "kind": "Reference",
              "text": "AreTypeEqual",
              "canonicalReference": "@azure/communication-react!AreTypeEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, B> & "
            },
            {
              "kind": "Reference",
              "text": "AreParamEqual",
              "canonicalReference": "@azure/communication-react!AreParamEqual:type"
            },
            {
              "kind": "Content",
              "text": "<A, B> ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AreEqual",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 9,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AreParamEqual:type",
          "docComment": "/**\n * Compare if props of 2 react components are equal, result type will be true/false\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AreParamEqual<A extends "
            },
            {
              "kind": "Content",
              "text": "(props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", B extends "
            },
            {
              "kind": "Content",
              "text": "(props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "AreTypeEqual",
              "canonicalReference": "@azure/communication-react!AreTypeEqual:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<A>[0]>, "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<B>[0]>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AreParamEqual",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 9,
            "endIndex": 19
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AreTypeEqual:type",
          "docComment": "/**\n * Compare if two types are equal, result type will be true/false\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AreTypeEqual<A, B> = "
            },
            {
              "kind": "Content",
              "text": "A extends B ? (B extends A ? true : false) : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AreTypeEqual",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AvatarPersonaData:type",
          "docComment": "/**\n * Custom data attributes for displaying avatar for a user.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AvatarPersonaData = "
            },
            {
              "kind": "Content",
              "text": "{\n    text?: string;\n    imageUrl?: string;\n    imageInitials?: string;\n    initialsColor?: "
            },
            {
              "kind": "Reference",
              "text": "PersonaInitialsColor",
              "canonicalReference": "@fluentui/react!PersonaInitialsColor:enum"
            },
            {
              "kind": "Content",
              "text": " | string;\n    initialsTextColor?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AvatarPersonaData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AvatarPersonaDataCallback:type",
          "docComment": "/**\n * Callback function used to provide custom data to build an avatar for a user.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AvatarPersonaDataCallback = "
            },
            {
              "kind": "Content",
              "text": "(userId: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AvatarPersonaData",
              "canonicalReference": "@azure/communication-react!AvatarPersonaData:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AvatarPersonaDataCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AzureCommunicationCallAdapterArgs:type",
          "docComment": "/**\n * Arguments for creating the Azure Communication Services implementation of {@link CallAdapterCommon}.\n *\n * Note: `displayName` can be a maximum of 256 characters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AzureCommunicationCallAdapterArgs = "
            },
            {
              "kind": "Content",
              "text": "{\n    userId: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationUserIdentifier",
              "canonicalReference": "@azure/communication-common!CommunicationUserIdentifier:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n    credential: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationTokenCredential",
              "canonicalReference": "@azure/communication-common!CommunicationTokenCredential:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    locator: "
            },
            {
              "kind": "Reference",
              "text": "CallAdapterLocator",
              "canonicalReference": "@azure/communication-react!CallAdapterLocator:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AzureCommunicationCallAdapterArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AzureCommunicationCallWithChatAdapterArgs:type",
          "docComment": "/**\n * Arguments for {@link createAzureCommunicationCallWithChatAdapter}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AzureCommunicationCallWithChatAdapterArgs = "
            },
            {
              "kind": "Content",
              "text": "{\n    endpoint: string;\n    userId: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationUserIdentifier",
              "canonicalReference": "@azure/communication-common!CommunicationUserIdentifier:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n    credential: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationTokenCredential",
              "canonicalReference": "@azure/communication-common!CommunicationTokenCredential:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    locator: "
            },
            {
              "kind": "Reference",
              "text": "CallAndChatLocator",
              "canonicalReference": "@azure/communication-react!CallAndChatLocator:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TeamsMeetingLinkLocator",
              "canonicalReference": "@azure/communication-calling!TeamsMeetingLinkLocator:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AzureCommunicationCallWithChatAdapterArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AzureCommunicationCallWithChatAdapterFromClientArgs:type",
          "docComment": "/**\n * Arguments for {@link createAzureCommunicationCallWithChatAdapterFromClient}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AzureCommunicationCallWithChatAdapterFromClientArgs = "
            },
            {
              "kind": "Content",
              "text": "{\n    callLocator: "
            },
            {
              "kind": "Reference",
              "text": "CallAdapterLocator",
              "canonicalReference": "@azure/communication-react!CallAdapterLocator:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TeamsMeetingLinkLocator",
              "canonicalReference": "@azure/communication-calling!TeamsMeetingLinkLocator:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    callAgent: "
            },
            {
              "kind": "Reference",
              "text": "CallAgent",
              "canonicalReference": "@azure/communication-calling!CallAgent:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    callClient: "
            },
            {
              "kind": "Reference",
              "text": "StatefulCallClient",
              "canonicalReference": "@azure/communication-react!StatefulCallClient:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    chatClient: "
            },
            {
              "kind": "Reference",
              "text": "StatefulChatClient",
              "canonicalReference": "@azure/communication-react!StatefulChatClient:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    chatThreadClient: "
            },
            {
              "kind": "Reference",
              "text": "ChatThreadClient",
              "canonicalReference": "@azure/communication-chat!ChatThreadClient:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AzureCommunicationCallWithChatAdapterFromClientArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!AzureCommunicationChatAdapterArgs:type",
          "docComment": "/**\n * Arguments for creating the Azure Communication Services implementation of {@link ChatAdapter}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AzureCommunicationChatAdapterArgs = "
            },
            {
              "kind": "Content",
              "text": "{\n    endpoint: string;\n    userId: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationUserIdentifier",
              "canonicalReference": "@azure/communication-common!CommunicationUserIdentifier:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n    credential: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationTokenCredential",
              "canonicalReference": "@azure/communication-common!CommunicationTokenCredential:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    threadId: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AzureCommunicationChatAdapterArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!BaseCompositeProps:interface",
          "docComment": "/**\n * Properties common to all composites exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BaseCompositeProps<TIcons extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TIcons",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "BaseCompositeProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!BaseCompositeProps#fluentTheme:member",
              "docComment": "/**\n * Fluent theme for the composite.\n *\n * @defaultValue\n *\n * light theme\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fluentTheme?: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialTheme",
                  "canonicalReference": "@fluentui/theme!PartialTheme:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@fluentui/theme!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fluentTheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!BaseCompositeProps#icons:member",
              "docComment": "/**\n * Custom Icon override for the composite. A JSX element can be provided to override the default icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icons?: "
                },
                {
                  "kind": "Content",
                  "text": "TIcons"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "icons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!BaseCompositeProps#locale:member",
              "docComment": "/**\n * Locale for the composite.\n *\n * @defaultValue\n *\n * English (US)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "locale?: "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeLocale",
                  "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "locale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!BaseCompositeProps#onFetchAvatarPersonaData:member",
              "docComment": "/**\n * A callback function that can be used to provide custom data to Avatars rendered in Composite.\n *\n * This will not affect the displayName shown in the composite. The displayName throughout the composite will be what is provided to the adapter when the adapter is created. will be what is provided to the adapter when the adapter is created.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFetchAvatarPersonaData?: "
                },
                {
                  "kind": "Reference",
                  "text": "AvatarPersonaDataCallback",
                  "canonicalReference": "@azure/communication-react!AvatarPersonaDataCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onFetchAvatarPersonaData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!BaseCompositeProps#onFetchParticipantMenuItems:member",
              "docComment": "/**\n * A callback function that can be used to provide custom menu items for a participant in participant list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFetchParticipantMenuItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantMenuItemsCallback",
                  "canonicalReference": "@azure/communication-react!ParticipantMenuItemsCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onFetchParticipantMenuItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!BaseCompositeProps#rtl:member",
              "docComment": "/**\n * Whether composite is displayed right-to-left.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rtl?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rtl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface",
          "docComment": "/**\n * Basic fluent styles props for all components exported from this libray.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BaseCustomStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseCustomStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles#root:member",
              "docComment": "/**\n * Styles for the root container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallAdapter:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallAdapter = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallAdapterCommon",
              "canonicalReference": "@azure/communication-react!CallAdapterCommon:interface"
            },
            {
              "kind": "Content",
              "text": ", keyof "
            },
            {
              "kind": "Reference",
              "text": "ACSCallManagement",
              "canonicalReference": "@azure/communication-react!ACSCallManagement:type"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "ACSCallManagement",
              "canonicalReference": "@azure/communication-react!ACSCallManagement:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallAdapterCallEndedEvent:type",
          "docComment": "/**\n * Payload for {@link CallEndedListener} containing details on the ended call.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallAdapterCallEndedEvent = "
            },
            {
              "kind": "Content",
              "text": "{\n    callId: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapterCallEndedEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallAdapterCallManagement:interface",
          "docComment": "/**\n * Functionality for managing the current call.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallAdapterCallManagement "
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapterCallManagement",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#createStreamView:member(1)",
              "docComment": "/**\n * Create the html view for a stream.\n *\n * @remarks\n *\n * This method is implemented for composite\n *\n * @param remoteUserId - Id of the participant to render, leave it undefined to create the local camera view\n *\n * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createStreamView(remoteUserId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void | "
                },
                {
                  "kind": "Reference",
                  "text": "CreateVideoStreamViewResult",
                  "canonicalReference": "@azure/communication-react!CreateVideoStreamViewResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "remoteUserId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "createStreamView"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#disposeStreamView:member(1)",
              "docComment": "/**\n * Dispose the html view for a stream.\n *\n * @remarks\n *\n * This method is implemented for composite\n *\n * @param remoteUserId - Id of the participant to render, leave it undefined to dispose the local camera view\n *\n * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disposeStreamView(remoteUserId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "remoteUserId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "disposeStreamView"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#joinCall:member(1)",
              "docComment": "/**\n * Join the call with microphone initially on/off.\n *\n * @param microphoneOn - Whether microphone is initially enabled\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "joinCall(microphoneOn?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "microphoneOn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "joinCall"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#leaveCall:member(1)",
              "docComment": "/**\n * Leave the call\n *\n * @param forEveryone - Whether to remove all participants when leaving\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leaveCall(forEveryone?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forEveryone",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "leaveCall"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#mute:member(1)",
              "docComment": "/**\n * Mute the current user during the call or disable microphone locally\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mute(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "mute"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#removeParticipant:member(1)",
              "docComment": "/**\n * Remove a participant from the call.\n *\n * @param userId - Id of the participant to be removed\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeParticipant(userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeParticipant"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#startCall:member(1)",
              "docComment": "/**\n * Start the call.\n *\n * @param participants - An array of participant ids to join\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startCall(participants: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "StartCallOptions",
                  "canonicalReference": "@azure/communication-calling!StartCallOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "participants",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "startCall"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#startCamera:member(1)",
              "docComment": "/**\n * Start the camera This method will start rendering a local camera view when the call is not active\n *\n * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startCamera(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "startCamera"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#startScreenShare:member(1)",
              "docComment": "/**\n * Start sharing the screen during a call.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startScreenShare(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "startScreenShare"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#stopCamera:member(1)",
              "docComment": "/**\n * Stop the camera This method will stop rendering a local camera view when the call is not active\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopCamera(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stopCamera"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#stopScreenShare:member(1)",
              "docComment": "/**\n * Stop sharing the screen\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopScreenShare(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stopScreenShare"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement#unmute:member(1)",
              "docComment": "/**\n * Unmute the current user during the call or enable microphone locally\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unmute(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "unmute"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallAdapterClientState:type",
          "docComment": "/**\n * {@link CallAdapterCommon} state inferred from Azure Communication Services backend.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallAdapterClientState = "
            },
            {
              "kind": "Content",
              "text": "{\n    userId: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationIdentifierKind",
              "canonicalReference": "@azure/communication-common!CommunicationIdentifierKind:type"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName?: string;\n    call?: "
            },
            {
              "kind": "Reference",
              "text": "CallState",
              "canonicalReference": "@azure/communication-react!CallState:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    devices: "
            },
            {
              "kind": "Reference",
              "text": "DeviceManagerState",
              "canonicalReference": "@azure/communication-react!DeviceManagerState:type"
            },
            {
              "kind": "Content",
              "text": ";\n    endedCall?: "
            },
            {
              "kind": "Reference",
              "text": "CallState",
              "canonicalReference": "@azure/communication-react!CallState:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    isTeamsCall: boolean;\n    latestErrors: "
            },
            {
              "kind": "Reference",
              "text": "AdapterErrors",
              "canonicalReference": "@azure/communication-react!AdapterErrors:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapterClientState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallAdapterCommon:interface",
          "docComment": "/**\n * {@link CallComposite} Adapter interface.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallAdapterCommon extends "
            },
            {
              "kind": "Reference",
              "text": "AdapterState",
              "canonicalReference": "@azure/communication-react!AdapterState:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallAdapterState",
              "canonicalReference": "@azure/communication-react!CallAdapterState:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Disposable",
              "canonicalReference": "@azure/communication-react!Disposable:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "CallAdapterCallManagement",
              "canonicalReference": "@azure/communication-react!CallAdapterCallManagement:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "CallAdapterDeviceManagement",
              "canonicalReference": "@azure/communication-react!CallAdapterDeviceManagement:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "CallAdapterSubscribers",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapterCommon",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 7
            },
            {
              "startIndex": 8,
              "endIndex": 9
            },
            {
              "startIndex": 10,
              "endIndex": 11
            },
            {
              "startIndex": 12,
              "endIndex": 14
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallAdapterDeviceManagement:interface",
          "docComment": "/**\n * Functionality for managing devices within a call.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallAdapterDeviceManagement "
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapterDeviceManagement",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterDeviceManagement#askDevicePermission:member(1)",
              "docComment": "/**\n * Ask for permissions of devices.\n *\n * @remarks\n *\n * Browser permission window will pop up if permissions are not granted yet\n *\n * @param constrain - Define constraints for accessing local devices {@link @azure/communication-calling#PermissionConstraints}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "askDevicePermission(constrain: "
                },
                {
                  "kind": "Reference",
                  "text": "PermissionConstraints",
                  "canonicalReference": "@azure/communication-calling!PermissionConstraints:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "constrain",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "askDevicePermission"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterDeviceManagement#queryCameras:member(1)",
              "docComment": "/**\n * Query for available camera devices.\n *\n * @remarks\n *\n * This method should be called after askDevicePermission()\n *\n * @return An array of video device information entities {@link @azure/communication-calling#VideoDeviceInfo}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryCameras(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "VideoDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "queryCameras"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterDeviceManagement#queryMicrophones:member(1)",
              "docComment": "/**\n * Query for available microphone devices.\n *\n * @remarks\n *\n * This method should be called after askDevicePermission()\n *\n * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryMicrophones(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "queryMicrophones"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterDeviceManagement#querySpeakers:member(1)",
              "docComment": "/**\n * Query for available microphone devices.\n *\n * @remarks\n *\n * This method should be called after askDevicePermission()\n *\n * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "querySpeakers(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "querySpeakers"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterDeviceManagement#setCamera:member(1)",
              "docComment": "/**\n * Set the camera to use in the call.\n *\n * @param sourceInfo - Camera device to choose, pick one returned by {@link CallAdapterDeviceManagement#queryCameras}\n *\n * @param options - Options to control how the camera stream is rendered {@link @azure/communication-calling#VideoStreamOptions}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCamera(sourceInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sourceInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setCamera"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterDeviceManagement#setMicrophone:member(1)",
              "docComment": "/**\n * Set the microphone to use in the call.\n *\n * @param sourceInfo - Microphone device to choose, pick one returned by {@link CallAdapterDeviceManagement#queryMicrophones}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMicrophone(sourceInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sourceInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setMicrophone"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterDeviceManagement#setSpeaker:member(1)",
              "docComment": "/**\n * Set the speaker to use in the call.\n *\n * @param sourceInfo - Speaker device to choose, pick one returned by {@link CallAdapterDeviceManagement#querySpeakers}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSpeaker(sourceInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sourceInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setSpeaker"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallAdapterLocator:type",
          "docComment": "/**\n * Locator used by {@link createAzureCommunicationCallAdapter} to locate the call to join\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallAdapterLocator = "
            },
            {
              "kind": "Reference",
              "text": "TeamsMeetingLinkLocator",
              "canonicalReference": "@azure/communication-calling!TeamsMeetingLinkLocator:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GroupCallLocator",
              "canonicalReference": "@azure/communication-calling!GroupCallLocator:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapterLocator",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallAdapterState:type",
          "docComment": "/**\n * {@link CallAdapterCommon} state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallAdapterState = "
            },
            {
              "kind": "Reference",
              "text": "CallAdapterUiState",
              "canonicalReference": "@azure/communication-react!CallAdapterUiState:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CallAdapterClientState",
              "canonicalReference": "@azure/communication-react!CallAdapterClientState:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapterState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallAdapterSubscribers:interface",
          "docComment": "/**\n * Call composite events that can be subscribed to.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallAdapterSubscribers "
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapterSubscribers",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(1)",
              "docComment": "/**\n * Unsubscribe function for 'participantsJoined' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'participantsJoined'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsJoinedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsJoinedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(10)",
              "docComment": "/**\n * Unsubscribe function for 'selectedMicrophoneChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'selectedMicrophoneChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyChangedEvent",
                  "canonicalReference": "@azure/communication-calling!PropertyChangedEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 10,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(11)",
              "docComment": "/**\n * Unsubscribe function for 'selectedSpeakerChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'selectedSpeakerChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyChangedEvent",
                  "canonicalReference": "@azure/communication-calling!PropertyChangedEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 11,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(12)",
              "docComment": "/**\n * Unsubscribe function for 'error' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'error'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(e: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterError",
                  "canonicalReference": "@azure/communication-react!AdapterError:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 12,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(2)",
              "docComment": "/**\n * Unsubscribe function for 'participantsLeft' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'participantsLeft'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsLeftListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsLeftListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(3)",
              "docComment": "/**\n * Unsubscribe function for 'isMutedChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isMutedChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsMutedChangedListener",
                  "canonicalReference": "@azure/communication-react!IsMutedChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(4)",
              "docComment": "/**\n * Unsubscribe function for 'callIdChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callIdChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "CallIdChangedListener",
                  "canonicalReference": "@azure/communication-react!CallIdChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(5)",
              "docComment": "/**\n * Unsubscribe function for 'isLocalScreenSharingActiveChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isLocalScreenSharingActiveChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsLocalScreenSharingActiveChangedListener",
                  "canonicalReference": "@azure/communication-react!IsLocalScreenSharingActiveChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(6)",
              "docComment": "/**\n * Unsubscribe function for 'displayNameChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'displayNameChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "DisplayNameChangedListener",
                  "canonicalReference": "@azure/communication-react!DisplayNameChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 6,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(7)",
              "docComment": "/**\n * Unsubscribe function for 'isSpeakingChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isSpeakingChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsSpeakingChangedListener",
                  "canonicalReference": "@azure/communication-react!IsSpeakingChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 7,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(8)",
              "docComment": "/**\n * Unsubscribe function for 'callEnded' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callEnded'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "CallEndedListener",
                  "canonicalReference": "@azure/communication-react!CallEndedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 8,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#off:member(9)",
              "docComment": "/**\n * Unsubscribe function for 'diagnosticChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'diagnosticChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "DiagnosticChangedEventListner",
                  "canonicalReference": "@azure/communication-react!DiagnosticChangedEventListner:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 9,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(1)",
              "docComment": "/**\n * Subscribe function for 'participantsJoined' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'participantsJoined'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsJoinedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsJoinedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(10)",
              "docComment": "/**\n * Subscribe function for 'selectedMicrophoneChanged' event.\n *\n * This event fires whenever the user selects a new microphone device.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'selectedMicrophoneChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyChangedEvent",
                  "canonicalReference": "@azure/communication-calling!PropertyChangedEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 10,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(11)",
              "docComment": "/**\n * Subscribe function for 'selectedSpeakerChanged' event.\n *\n * This event fires whenever the user selects a new speaker device.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'selectedSpeakerChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyChangedEvent",
                  "canonicalReference": "@azure/communication-calling!PropertyChangedEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 11,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(12)",
              "docComment": "/**\n * Subscribe function for 'error' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'error'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(e: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterError",
                  "canonicalReference": "@azure/communication-react!AdapterError:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 12,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(2)",
              "docComment": "/**\n * Subscribe function for 'participantsLeft' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'participantsLeft'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsLeftListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsLeftListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(3)",
              "docComment": "/**\n * Subscribe function for 'isMutedChanged' event.\n *\n * @remarks\n *\n * The event will be triggered whenever current user or remote user mute state changed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isMutedChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsMutedChangedListener",
                  "canonicalReference": "@azure/communication-react!IsMutedChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(4)",
              "docComment": "/**\n * Subscribe function for 'callIdChanged' event.\n *\n * @remarks\n *\n * The event will be triggered when callId of current user changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callIdChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "CallIdChangedListener",
                  "canonicalReference": "@azure/communication-react!CallIdChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(5)",
              "docComment": "/**\n * Subscribe function for 'isLocalScreenSharingActiveChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isLocalScreenSharingActiveChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsLocalScreenSharingActiveChangedListener",
                  "canonicalReference": "@azure/communication-react!IsLocalScreenSharingActiveChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(6)",
              "docComment": "/**\n * Subscribe function for 'displayNameChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'displayNameChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "DisplayNameChangedListener",
                  "canonicalReference": "@azure/communication-react!DisplayNameChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 6,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(7)",
              "docComment": "/**\n * Subscribe function for 'isSpeakingChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isSpeakingChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsSpeakingChangedListener",
                  "canonicalReference": "@azure/communication-react!IsSpeakingChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 7,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(8)",
              "docComment": "/**\n * Subscribe function for 'callEnded' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callEnded'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "CallEndedListener",
                  "canonicalReference": "@azure/communication-react!CallEndedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 8,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallAdapterSubscribers#on:member(9)",
              "docComment": "/**\n * Subscribe function for 'diagnosticChanged' event.\n *\n * This event fires whenever there is a change in user facing diagnostics about the ongoing call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'diagnosticChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "DiagnosticChangedEventListner",
                  "canonicalReference": "@azure/communication-react!DiagnosticChangedEventListner:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 9,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallAdapterUiState:type",
          "docComment": "/**\n * {@link CallAdapterCommon} state for pure UI purposes.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallAdapterUiState = "
            },
            {
              "kind": "Content",
              "text": "{\n    isLocalPreviewMicrophoneEnabled: boolean;\n    page: "
            },
            {
              "kind": "Reference",
              "text": "CallCompositePage",
              "canonicalReference": "@azure/communication-react!CallCompositePage:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallAdapterUiState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!CallAgentProvider:var",
          "docComment": "/**\n * A {@link React.Context} that stores a {@link @azure/communication-calling#CallAgent}.\n *\n * Calling components from this package must be wrapped with a {@link CallAgentProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CallAgentProvider: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "CallAgentProviderProps",
              "canonicalReference": "@azure/communication-react!CallAgentProviderProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "CallAgentProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallAgentProviderProps:interface",
          "docComment": "/**\n * Arguments to initialize a {@link CallAgentProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallAgentProviderProps "
            }
          ],
          "releaseTag": "Public",
          "name": "CallAgentProviderProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallAgentProviderProps#callAgent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callAgent?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallAgent",
                  "canonicalReference": "@azure/communication-calling!CallAgent:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "callAgent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallAgentProviderProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallAgentState:interface",
          "docComment": "/**\n * State only version of {@link @azure/communication-calling#CallAgent} except calls is moved to be a child directly of {@link CallClientState} and not included here. The reason to have CallAgent's state proxied is to provide access to displayName. We don't flatten CallAgent.displayName and put it in CallClientState because it would be ambiguious that displayName is actually reliant on the creation/existence of CallAgent to be available.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallAgentState "
            }
          ],
          "releaseTag": "Public",
          "name": "CallAgentState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallAgentState#displayName:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#CallAgent.displayName}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "displayName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallAndChatLocator:interface",
          "docComment": "/**\n * Arguments for use in {@link createAzureCommunicationCallWithChatAdapter} to join a Call with an associated Chat thread.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallAndChatLocator "
            }
          ],
          "releaseTag": "Public",
          "name": "CallAndChatLocator",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallAndChatLocator#callLocator:member",
              "docComment": "/**\n * Locator used by {@link createAzureCommunicationCallWithChatAdapter} to locate the call to join\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callLocator: "
                },
                {
                  "kind": "Reference",
                  "text": "GroupCallLocator",
                  "canonicalReference": "@azure/communication-calling!GroupCallLocator:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callLocator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallAndChatLocator#chatThreadId:member",
              "docComment": "/**\n * Chat thread ID used by {@link createAzureCommunicationCallWithChatAdapter} to locate the chat thread to join\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatThreadId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "chatThreadId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!CallClientProvider:var",
          "docComment": "/**\n * A {@link React.Context} that stores a {@link StatefulCallClient}.\n *\n * Calling components from this package must be wrapped with a {@link CallClientProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CallClientProvider: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "CallClientProviderProps",
              "canonicalReference": "@azure/communication-react!CallClientProviderProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "CallClientProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallClientProviderProps:interface",
          "docComment": "/**\n * Arguments to initialize a {@link CallClientProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallClientProviderProps "
            }
          ],
          "releaseTag": "Public",
          "name": "CallClientProviderProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientProviderProps#callClient:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callClient: "
                },
                {
                  "kind": "Reference",
                  "text": "StatefulCallClient",
                  "canonicalReference": "@azure/communication-react!StatefulCallClient:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callClient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientProviderProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallClientState:interface",
          "docComment": "/**\n * Container for all of the state data proxied by {@link StatefulCallClient}. The calls, callsEnded, incomingCalls, and incomingCallsEnded states will be automatically provided if a callAgent has been created. The deviceManager will be empty initially until populated see {@link DeviceManagerState}. The userId state is provided as a convenience for the developer and is completely controled and set by the developer.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallClientState "
            }
          ],
          "releaseTag": "Public",
          "name": "CallClientState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientState#callAgent:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#CallAgent}. Please review {@link CallAgentState}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callAgent?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallAgentState",
                  "canonicalReference": "@azure/communication-react!CallAgentState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "callAgent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientState#calls:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#CallAgent.calls} as an object with CallState {@link CallState} fields. It is keyed by {@link @azure/communication-calling#Call.id}. Please note that {@link @azure/communication-calling#Call.id} could change. You should not cache the id itself but the entire {@link @azure/communication-calling#Call} and then use the id contained to look up data in this map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calls: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "CallState",
                  "canonicalReference": "@azure/communication-react!CallState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "calls",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientState#callsEnded:member",
              "docComment": "/**\n * Calls that have ended are stored here so the callEndReason could be checked. It is an object with {@link @azure/communication-calling#Call.id} keys and {@link CallState} values.\n *\n * Only {@link MAX_CALL_HISTORY_LENGTH} Calls are kept in the history. Oldest calls are evicted if required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callsEnded: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "CallState",
                  "canonicalReference": "@azure/communication-react!CallState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callsEnded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientState#deviceManager:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#DeviceManager}. Please review {@link DeviceManagerState}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deviceManager: "
                },
                {
                  "kind": "Reference",
                  "text": "DeviceManagerState",
                  "canonicalReference": "@azure/communication-react!DeviceManagerState:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deviceManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientState#incomingCalls:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#IncomingCall} as an object with {@link IncomingCall} fields. It is keyed by {@link @azure/communication-calling#IncomingCall.id}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "incomingCalls: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "IncomingCallState",
                  "canonicalReference": "@azure/communication-react!IncomingCallState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "incomingCalls",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientState#incomingCallsEnded:member",
              "docComment": "/**\n * Incoming Calls that have ended are stored here so the callEndReason could be checked. It is an as an object with {@link @azure/communication-calling#Call.id} keys and {@link IncomingCall} values.\n *\n * Only {@link MAX_CALL_HISTORY_LENGTH} Calls are kept in the history. Oldest calls are evicted if required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "incomingCallsEnded: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "IncomingCallState",
                  "canonicalReference": "@azure/communication-react!IncomingCallState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "incomingCallsEnded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientState#latestErrors:member",
              "docComment": "/**\n * Stores the latest error for each API method.\n *\n * See documentation of {@Link CallErrors} for details.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "latestErrors: "
                },
                {
                  "kind": "Reference",
                  "text": "CallErrors",
                  "canonicalReference": "@azure/communication-react!CallErrors:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latestErrors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallClientState#userId:member",
              "docComment": "/**\n * Stores a userId. This is not used by the {@link StatefulCallClient} and is provided here as a convenience for the developer for easier access to userId. Must be passed in at initialization of the {@link StatefulCallClient}. Completely controlled by the developer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userId: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationIdentifierKind",
                  "canonicalReference": "@azure/communication-common!CommunicationIdentifierKind:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "userId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!CallComposite:var",
          "docComment": "/**\n * A customizable UI composite for calling experience.\n *\n * @remarks\n *\n * Call composite min width/height are as follow: - mobile: 17.5rem x 21rem (280px x 336px, with default rem at 16px) - desktop: 30rem x 22rem (480px x 352px, with default rem at 16px)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CallComposite: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "CallCompositeProps",
              "canonicalReference": "@azure/communication-react!CallCompositeProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "CallComposite",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallCompositeIcons:type",
          "docComment": "/**\n * Icons that can be overridden for {@link CallComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallCompositeIcons = "
            },
            {
              "kind": "Content",
              "text": "{\n    ControlButtonCameraOff?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonCameraOn?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonEndCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonMicOff?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonMicOn?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonOptions?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonParticipants?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonScreenShareStart?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonScreenShareStop?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallCameraAccessDenied?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallCameraAlreadyInUse?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallLocalVideoFreeze?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMacOsCameraAccessDenied?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMacOsMicrophoneAccessDenied?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneAccessDenied?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneMutedBySystem?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneUnmutedBySystem?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNetworkQualityLow?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNoMicrophoneFound?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNoSpeakerFound?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarClear?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    HorizontalGalleryLeftButton?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    HorizontalGalleryRightButton?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LobbyScreenConnectingToCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LobbyScreenWaitingToBeAdmitted?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalDeviceSettingsCamera?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalDeviceSettingsMic?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalDeviceSettingsSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalPreviewPlaceholder?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    Muted?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NetworkReconnectIcon?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NoticePageAccessDeniedTeamsMeeting?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NoticePageJoinCallFailedDueToNoNetwork?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NoticePageLeftCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NoticePageRemovedFromCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsCamera?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsMic?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemMicOff?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptions?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptionsHovered?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemScreenShareStart?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    VideoTileMicOff?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalCameraSwitch?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallCompositeIcons",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 90
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallCompositeOptions:type",
          "docComment": "/**\n * Optional features of the {@link CallComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallCompositeOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    errorBar?: boolean;\n    callControls?: boolean | "
            },
            {
              "kind": "Reference",
              "text": "CallControlOptions",
              "canonicalReference": "@azure/communication-react!CallControlOptions:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallCompositeOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallCompositePage:type",
          "docComment": "/**\n * Major UI screens shown in the {@link CallComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallCompositePage = "
            },
            {
              "kind": "Content",
              "text": "'accessDeniedTeamsMeeting' | 'call' | 'configuration' | 'joinCallFailedDueToNoNetwork' | 'leftCall' | 'lobby' | 'removedFromCall'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallCompositePage",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallCompositeProps:interface",
          "docComment": "/**\n * Props for {@link CallComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallCompositeProps extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCompositeProps",
              "canonicalReference": "@azure/communication-react!BaseCompositeProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallCompositeIcons",
              "canonicalReference": "@azure/communication-react!CallCompositeIcons:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "CallCompositeProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeProps#adapter:member",
              "docComment": "/**\n * An adapter provides logic and data to the composite. Composite can also be controlled using the adapter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "CallAdapterCommon",
                  "canonicalReference": "@azure/communication-react!CallAdapterCommon:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "adapter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeProps#callInvitationUrl:member",
              "docComment": "/**\n * URL to invite new participants to the current call. If this is supplied, a button appears in the Participants Button flyout menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callInvitationUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "callInvitationUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeProps#formFactor:member",
              "docComment": "/**\n * Optimizes the composite form factor for either desktop or mobile.\n *\n * @remarks\n *\n * `mobile` is currently only optimized for Portrait mode on mobile devices and does not support landscape.\n *\n * @defaultValue\n *\n * 'desktop'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "formFactor?: "
                },
                {
                  "kind": "Content",
                  "text": "'desktop' | 'mobile'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "formFactor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeProps#options:member",
              "docComment": "/**\n * Flags to enable/disable or customize UI elements of the {@link CallComposite}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallCompositeOptions",
                  "canonicalReference": "@azure/communication-react!CallCompositeOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallCompositeStrings:interface",
          "docComment": "/**\n * Strings used by the {@link CallComposite} directly.\n *\n * This strings are in addition to those used by the components from the component library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallCompositeStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "CallCompositeStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#cameraLabel:member",
              "docComment": "/**\n * Label for camera dropdown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameraLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#cameraPermissionDenied:member",
              "docComment": "/**\n * Error shown when camera access is blocked by the browser.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraPermissionDenied: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameraPermissionDenied",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#cameraTurnedOff:member",
              "docComment": "/**\n * Error shown when the camera is turned off.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraTurnedOff: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameraTurnedOff",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#close:member",
              "docComment": "/**\n * Text for close button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "close",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerNowOnlyRecording:member",
              "docComment": "/**\n * Message to let user know the meeting is only being recorded (no transcription) in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerNowOnlyRecording: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerNowOnlyRecording",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerNowOnlyTranscription:member",
              "docComment": "/**\n * Message to let user know the meeting is only being transcripted (no recording) in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerNowOnlyTranscription: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerNowOnlyTranscription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerRecordingAndTranscriptionSaved:member",
              "docComment": "/**\n * Message to let user know recording and transcription of the meeting are saved in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerRecordingAndTranscriptionSaved: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerRecordingAndTranscriptionSaved",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerRecordingAndTranscriptionStarted:member",
              "docComment": "/**\n * Message to let user know recording and transcription of the meeting have started in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerRecordingAndTranscriptionStarted: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerRecordingAndTranscriptionStarted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerRecordingAndTranscriptionStopped:member",
              "docComment": "/**\n * Message to let user know recording and transcription of the meeting have stopped in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerRecordingAndTranscriptionStopped: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerRecordingAndTranscriptionStopped",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerRecordingSaving:member",
              "docComment": "/**\n * Message to let user know recording of the meeting is being saved in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerRecordingSaving: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerRecordingSaving",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerRecordingStarted:member",
              "docComment": "/**\n * Message to let user know recording of the meeting has started in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerRecordingStarted: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerRecordingStarted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerRecordingStopped:member",
              "docComment": "/**\n * Message to let user know recording of the meeting has stopped in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerRecordingStopped: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerRecordingStopped",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerTranscriptionConsent:member",
              "docComment": "/**\n * Message to let user know they are giving consent to meeting being transcripted in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerTranscriptionConsent: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerTranscriptionConsent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerTranscriptionSaving:member",
              "docComment": "/**\n * Message to let user know transcription of the meeting is being saved in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerTranscriptionSaving: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerTranscriptionSaving",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerTranscriptionStarted:member",
              "docComment": "/**\n * Message to let user know transcription of the meeting has started in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerTranscriptionStarted: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerTranscriptionStarted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#complianceBannerTranscriptionStopped:member",
              "docComment": "/**\n * Message to let user know the transcription of the meeting has stopped in ComplianceBanner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complianceBannerTranscriptionStopped: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complianceBannerTranscriptionStopped",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#configurationPageCallDetails:member",
              "docComment": "/**\n * Optional 1-2 lines on the call details used on the configuration page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configurationPageCallDetails?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "configurationPageCallDetails",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#configurationPageTitle:member",
              "docComment": "/**\n * Title of configuration page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configurationPageTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "configurationPageTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#copyInviteLinkActionedAriaLabel:member",
              "docComment": "/**\n * aria label for when the invite link has been actioned\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyInviteLinkActionedAriaLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "copyInviteLinkActionedAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#defaultPlaceHolder:member",
              "docComment": "/**\n * Placeholder text for local device settings dropdowns.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultPlaceHolder: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "defaultPlaceHolder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#failedToJoinCallDueToNoNetworkMoreDetails:member",
              "docComment": "/**\n * More details text of the page shown to the user when joining a call fails due to a network problem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedToJoinCallDueToNoNetworkMoreDetails?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "failedToJoinCallDueToNoNetworkMoreDetails",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#failedToJoinCallDueToNoNetworkTitle:member",
              "docComment": "/**\n * Title text of the page shown to the user when joining a call fails due to a network problem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedToJoinCallDueToNoNetworkTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "failedToJoinCallDueToNoNetworkTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#failedToJoinTeamsMeetingReasonAccessDeniedMoreDetails:member",
              "docComment": "/**\n * More details text of the page shown to the user when joining a Teams meeting fails because meeting owner denied access.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedToJoinTeamsMeetingReasonAccessDeniedMoreDetails?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "failedToJoinTeamsMeetingReasonAccessDeniedMoreDetails",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#failedToJoinTeamsMeetingReasonAccessDeniedTitle:member",
              "docComment": "/**\n * Title text of the page shown to the user when joining a Teams meeting fails because meeting owner denied access.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedToJoinTeamsMeetingReasonAccessDeniedTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "failedToJoinTeamsMeetingReasonAccessDeniedTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#learnMore:member",
              "docComment": "/**\n * Text for link to learn more about a specific subject.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "learnMore: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "learnMore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#leftCallMoreDetails:member",
              "docComment": "/**\n * More details text of the page shown to the user when they leave a call in the call composite.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leftCallMoreDetails?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "leftCallMoreDetails",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#leftCallTitle:member",
              "docComment": "/**\n * Title text of the page shown to the user when they leave a call in the call composite.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leftCallTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "leftCallTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#lobbyScreenConnectingToCallMoreDetails:member",
              "docComment": "/**\n * Optional addition details shown to the user on the lobby screen when connection to a call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lobbyScreenConnectingToCallMoreDetails?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lobbyScreenConnectingToCallMoreDetails",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#lobbyScreenConnectingToCallTitle:member",
              "docComment": "/**\n * Text shown to the user on the lobby screen when connecting to a call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lobbyScreenConnectingToCallTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lobbyScreenConnectingToCallTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#lobbyScreenWaitingToBeAdmittedMoreDetails:member",
              "docComment": "/**\n * Optional additional details shown to the user on the lobby screen when waiting to be admitted to a call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lobbyScreenWaitingToBeAdmittedMoreDetails?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "lobbyScreenWaitingToBeAdmittedMoreDetails",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#lobbyScreenWaitingToBeAdmittedTitle:member",
              "docComment": "/**\n * Text shown to the user on the lobby screen when waiting to be admitted to a call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lobbyScreenWaitingToBeAdmittedTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lobbyScreenWaitingToBeAdmittedTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#microphonePermissionDenied:member",
              "docComment": "/**\n * Error shown when microphone access is blocked by the browser.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphonePermissionDenied: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "microphonePermissionDenied",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#microphoneToggleInLobbyNotAllowed:member",
              "docComment": "/**\n * Tooltip text used to inform a user that toggling microphone in lobby is not supported.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneToggleInLobbyNotAllowed: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "microphoneToggleInLobbyNotAllowed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#mutedMessage:member",
              "docComment": "/**\n * Message shown to the user when they are speaking while muted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mutedMessage: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mutedMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#networkReconnectMoreDetails:member",
              "docComment": "/**\n * More details text of the page shown to the user when there is intermittent network failure during a call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "networkReconnectMoreDetails: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "networkReconnectMoreDetails",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#networkReconnectTitle:member",
              "docComment": "/**\n * Title text of the page shown to the user when there is intermittent network failure during a call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "networkReconnectTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "networkReconnectTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#privacyPolicy:member",
              "docComment": "/**\n * Text for link to MS privacy policy in Compliance Banner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "privacyPolicy: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "privacyPolicy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#rejoinCallButtonLabel:member",
              "docComment": "/**\n * Text in button to rejoin an ended call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rejoinCallButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rejoinCallButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#removedFromCallMoreDetails:member",
              "docComment": "/**\n * More details text of the page shown to the user when they are removed from a call in the call composite.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removedFromCallMoreDetails?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "removedFromCallMoreDetails",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#removedFromCallTitle:member",
              "docComment": "/**\n * Title text of the page shown to the user when they are removed from a call in the call composite.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removedFromCallTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "removedFromCallTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#soundLabel:member",
              "docComment": "/**\n * Label for sound dropdown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "soundLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "soundLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallCompositeStrings#startCallButtonLabel:member",
              "docComment": "/**\n * Text in button to start call in configuration page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startCallButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "startCallButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallControlDisplayType:type",
          "docComment": "/**\n * Control bar display type for {@link CallComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallControlDisplayType = "
            },
            {
              "kind": "Content",
              "text": "'default' | 'compact'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallControlDisplayType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallControlOptions:type",
          "docComment": "/**\n * Customization options for the control bar in calling experience.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallControlOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    displayType?: "
            },
            {
              "kind": "Reference",
              "text": "CallControlDisplayType",
              "canonicalReference": "@azure/communication-react!CallControlDisplayType:type"
            },
            {
              "kind": "Content",
              "text": ";\n    cameraButton?: boolean;\n    endCallButton?: boolean;\n    microphoneButton?: boolean;\n    devicesButton?: boolean;\n    participantsButton?: boolean | {\n        disabled: boolean;\n    };\n    screenShareButton?: boolean | {\n        disabled: boolean;\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallControlOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallEndedListener:type",
          "docComment": "/**\n * Callback for {@link CallAdapterSubscribers} 'callEnded' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallEndedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: "
            },
            {
              "kind": "Reference",
              "text": "CallAdapterCallEndedEvent",
              "canonicalReference": "@azure/communication-react!CallAdapterCallEndedEvent:type"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallEndedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/communication-react!CallError:class",
          "docComment": "/**\n * Error thrown from failed stateful API methods.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CallError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CallError",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@azure/communication-react!CallError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CallError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(target: "
                },
                {
                  "kind": "Reference",
                  "text": "CallErrorTarget",
                  "canonicalReference": "@azure/communication-react!CallErrorTarget:type"
                },
                {
                  "kind": "Content",
                  "text": ", innerError: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ", timestamp?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "innerError",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "timestamp",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/communication-react!CallError#innerError:member",
              "docComment": "/**\n * Error thrown by the failed SDK method.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "innerError: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "innerError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/communication-react!CallError#target:member",
              "docComment": "/**\n * The API method target that failed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target: "
                },
                {
                  "kind": "Reference",
                  "text": "CallErrorTarget",
                  "canonicalReference": "@azure/communication-react!CallErrorTarget:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/communication-react!CallError#timestamp:member",
              "docComment": "/**\n * Timestamp added to the error by the stateful layer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallErrorBarSelector:type",
          "docComment": "/**\n * Selector type for {@link ErrorBar} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ErrorBarSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "CallingBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!CallingBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    activeErrorMessages: "
            },
            {
              "kind": "Reference",
              "text": "ActiveErrorMessage",
              "canonicalReference": "@azure/communication-react!ActiveErrorMessage:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallErrorBarSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallErrors:type",
          "docComment": "/**\n * Errors teed from API calls to the Calling SDK.\n *\n * Each property in the object stores the latest error for a particular SDK API method.\n *\n * Errors from this object can be cleared using the {@link newClearCallErrorsModifier}. Additionally, errors are automatically cleared when: - The state is cleared. - Subsequent calls to related API methods succeed. See documentation of individual stateful client methods for details on when errors may be automatically cleared.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallErrors = "
            },
            {
              "kind": "Content",
              "text": "{\n    [target in "
            },
            {
              "kind": "Reference",
              "text": "CallErrorTarget",
              "canonicalReference": "@azure/communication-react!CallErrorTarget:type"
            },
            {
              "kind": "Content",
              "text": "]: "
            },
            {
              "kind": "Reference",
              "text": "CallError",
              "canonicalReference": "@azure/communication-react!CallError:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallErrors",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallErrorTarget:type",
          "docComment": "/**\n * String literal type for all permissible keys in {@Link CallErrors}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallErrorTarget = "
            },
            {
              "kind": "Content",
              "text": "'Call.addParticipant' | /* @conditional-compile-remove(calling-beta-sdk) */ 'Call.dispose' | 'Call.feature' | 'Call.hangUp' | 'Call.hold' | 'Call.mute' | /* @conditional-compile-remove(calling-beta-sdk) */ 'Call.muteIncomingAudio' | 'Call.off' | 'Call.on' | 'Call.removeParticipant' | 'Call.resume' | 'Call.sendDtmf' | /* @conditional-compile-remove(calling-beta-sdk) */ 'Call.startAudio' | 'Call.startScreenSharing' | 'Call.startVideo' | 'Call.stopScreenSharing' | /* @conditional-compile-remove(calling-beta-sdk) */ 'Call.stopAudio' | 'Call.stopVideo' | 'Call.unmute' | /* @conditional-compile-remove(calling-beta-sdk) */ 'Call.unmuteIncomingAudio' | 'CallAgent.dispose' | 'CallAgent.feature' | 'CallAgent.join' | 'CallAgent.off' | 'CallAgent.on' | 'CallAgent.startCall' | 'CallClient.createCallAgent' | 'CallClient.createTeamsCallAgent' | 'CallClient.feature' | 'CallClient.getDeviceManager' | /* @conditional-compile-remove(calling-beta-sdk) */ 'CallClient.getEnvironmentInfo' | 'DeviceManager.askDevicePermission' | 'DeviceManager.getCameras' | 'DeviceManager.getMicrophones' | 'DeviceManager.getSpeakers' | 'DeviceManager.off' | 'DeviceManager.on' | 'DeviceManager.selectMicrophone' | 'DeviceManager.selectSpeaker' | 'IncomingCall.accept' | 'IncomingCall.reject' | /* @conditional-compile-remove(calling-beta-sdk) */ /* @conditional-compile-remove(teams-identity-support) */ 'TeamsCall.addParticipant'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallErrorTarget",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallIdChangedListener:type",
          "docComment": "/**\n * Callback for {@link CallAdapterSubscribers} 'callIdChanged' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallIdChangedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    callId: string;\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallIdChangedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallingBaseSelectorProps:type",
          "docComment": "/**\n * Common props used to reference calling declarative client state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallingBaseSelectorProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    callId: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallingBaseSelectorProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallingHandlers:interface",
          "docComment": "/**\n * Object containing all the handlers required for calling components.\n *\n * Calling related components from this package are able to pick out relevant handlers from this object. See {@link useHandlers} and {@link usePropsFor}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallingHandlers extends "
            },
            {
              "kind": "Reference",
              "text": "CommonCallingHandlers",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CallingHandlers",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallingHandlers#onStartCall:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStartCall: "
                },
                {
                  "kind": "Content",
                  "text": "(participants: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationIdentifier",
                  "canonicalReference": "@azure/communication-common!CommunicationIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": "[], options?: "
                },
                {
                  "kind": "Reference",
                  "text": "StartCallOptions",
                  "canonicalReference": "@azure/communication-calling!StartCallOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Call",
                  "canonicalReference": "@azure/communication-calling!Call:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onStartCall",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallingReturnProps:type",
          "docComment": "/**\n * Helper type for {@link usePropsFor}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallingReturnProps<Component extends "
            },
            {
              "kind": "Content",
              "text": "(props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "GetCallingSelector",
              "canonicalReference": "@azure/communication-react!GetSelector:type"
            },
            {
              "kind": "Content",
              "text": "<Component> extends (state: "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": ", props: any) => any ? "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GetCallingSelector",
              "canonicalReference": "@azure/communication-react!GetSelector:type"
            },
            {
              "kind": "Content",
              "text": "<Component>> & "
            },
            {
              "kind": "Reference",
              "text": "Common",
              "canonicalReference": "@azure/communication-react!Common:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallingHandlers",
              "canonicalReference": "@azure/communication-react!CallingHandlers:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<Component>[0]> : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallingReturnProps",
          "typeParameters": [
            {
              "typeParameterName": "Component",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 18
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallingTheme:interface",
          "docComment": "/**\n * Custom Fluent theme pallete used by calling related components in this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallingTheme "
            }
          ],
          "releaseTag": "Public",
          "name": "CallingTheme",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallingTheme#callingPalette:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callingPalette: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        callRed: string;\n        callRedDark: string;\n        callRedDarker: string;\n        iconWhite: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callingPalette",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallParticipantListParticipant:type",
          "docComment": "/**\n * Calling participant's state, as reflected in the UI components.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallParticipantListParticipant = "
            },
            {
              "kind": "Reference",
              "text": "ParticipantListParticipant",
              "canonicalReference": "@azure/communication-react!ParticipantListParticipant:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    state: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantState",
              "canonicalReference": "@azure/communication-react!ParticipantState:type"
            },
            {
              "kind": "Content",
              "text": ";\n    isScreenSharing?: boolean;\n    isMuted?: boolean;\n    isSpeaking?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallParticipantListParticipant",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!CallProvider:var",
          "docComment": "/**\n * A {@link React.Context} that stores a {@link @azure/communication-calling#Call}.\n *\n * Calling components from this package must be wrapped with a {@link CallProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CallProvider: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "CallProviderProps",
              "canonicalReference": "@azure/communication-react!CallProviderProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "CallProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallProviderProps:interface",
          "docComment": "/**\n * Arguments to initialize a {@link CallProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallProviderProps "
            }
          ],
          "releaseTag": "Public",
          "name": "CallProviderProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallProviderProps#call:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "call?: "
                },
                {
                  "kind": "Reference",
                  "text": "Call",
                  "canonicalReference": "@azure/communication-calling!Call:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "call",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallProviderProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallState:interface",
          "docComment": "/**\n * State only version of {@link @azure/communication-calling#Call}. {@link StatefulCallClient} will automatically retrieve Call's state and add it to the state exposed by {@link StatefulCallClient}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallState "
            }
          ],
          "releaseTag": "Public",
          "name": "CallState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#callEndReason:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#Call.callEndReason}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callEndReason?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallEndReason",
                  "canonicalReference": "@azure/communication-calling!CallEndReason:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "callEndReason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#callerInfo:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#Call.callerInfo}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callerInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "CallerInfo",
                  "canonicalReference": "@azure/communication-calling!CallerInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callerInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#diagnostics:member",
              "docComment": "/**\n * Stores the latest call diagnostics.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "diagnostics: "
                },
                {
                  "kind": "Reference",
                  "text": "DiagnosticsCallFeatureState",
                  "canonicalReference": "@azure/communication-react!DiagnosticsCallFeatureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "diagnostics",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#direction:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#Call.direction}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "direction: "
                },
                {
                  "kind": "Reference",
                  "text": "CallDirection",
                  "canonicalReference": "@azure/communication-calling!CallDirection:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "direction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#dominantSpeakers:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#DominantSpeakersInfo}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dominantSpeakers?: "
                },
                {
                  "kind": "Reference",
                  "text": "DominantSpeakersInfo",
                  "canonicalReference": "@azure/communication-calling!DominantSpeakersInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dominantSpeakers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#endTime:member",
              "docComment": "/**\n * Stores the local date when the call ended on the client. This property is added by the stateful layer and is not a proxy of SDK state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endTime: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "endTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#id:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#Call.id}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#isMuted:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#Call.isMuted}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMuted: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isMuted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#isScreenSharingOn:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#Call.isScreenSharingOn}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isScreenSharingOn: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isScreenSharingOn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#localVideoStreams:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#Call.localVideoStreams}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localVideoStreams: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalVideoStreamState",
                  "canonicalReference": "@azure/communication-react!LocalVideoStreamState:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "localVideoStreams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#recording:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RecordingCallFeature}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "recording: "
                },
                {
                  "kind": "Reference",
                  "text": "RecordingCallFeatureState",
                  "canonicalReference": "@azure/communication-react!RecordingCallFeatureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "recording",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#remoteParticipants:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#Call.remoteParticipants}. Object with {@link RemoteParticipant} fields keyed by flattened {@link RemoteParticipantState.identifier}. To obtain a flattened {@link RemoteParticipantState.identifier}, use {@link @azure/communication-react#toFlatCommunicationIdentifier}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remoteParticipants: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [keys: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "RemoteParticipantState",
                  "canonicalReference": "@azure/communication-react!RemoteParticipantState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "remoteParticipants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#remoteParticipantsEnded:member",
              "docComment": "/**\n * Stores remote participants that have left the call so that the callEndReason could be retrieved. Object with {@link RemoteParticipant} fields keyed by flattened {@link RemoteParticipantState.identifier}. To obtain a flattened {@link RemoteParticipantState.identifier}, use {@link @azure/communication-react#toFlatCommunicationIdentifier}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remoteParticipantsEnded: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [keys: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "RemoteParticipantState",
                  "canonicalReference": "@azure/communication-react!RemoteParticipantState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "remoteParticipantsEnded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#screenShareRemoteParticipant:member",
              "docComment": "/**\n * Stores the currently active screenshare participant's key. If there is no screenshare active, then this will be undefined. You can use this key to access the remoteParticipant data in {@link CallState.remoteParticipants} object.\n *\n * Note this only applies to ScreenShare in RemoteParticipant. A local ScreenShare being active will not affect this property.\n *\n * This property is added by the stateful layer and is not a proxy of SDK state\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenShareRemoteParticipant?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "screenShareRemoteParticipant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#startTime:member",
              "docComment": "/**\n * Stores the local date when the call started on the client. This property is added by the stateful layer and is not a proxy of SDK state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startTime: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "startTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#state:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#Call.state}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Reference",
                  "text": "CallStatus",
                  "canonicalReference": "@azure/communication-calling!CallState:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallState#transcription:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#TranscriptionCallFeature}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transcription: "
                },
                {
                  "kind": "Reference",
                  "text": "TranscriptionCallFeatureState",
                  "canonicalReference": "@azure/communication-react!TranscriptionCallFeatureState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "transcription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallWithChatAdapter:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallWithChatAdapter = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapterCommon",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterCommon:interface"
            },
            {
              "kind": "Content",
              "text": ", keyof "
            },
            {
              "kind": "Reference",
              "text": "ACSCallManagement",
              "canonicalReference": "@azure/communication-react!ACSCallManagement:type"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "ACSCallManagement",
              "canonicalReference": "@azure/communication-react!ACSCallManagement:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatAdapter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallWithChatAdapterCommon:interface",
          "docComment": "/**\n * {@link CallWithChatComposite} Adapter interface.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallWithChatAdapterCommon extends "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapterManagement",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "AdapterState",
              "canonicalReference": "@azure/communication-react!AdapterState:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapterState",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterState:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Disposable",
              "canonicalReference": "@azure/communication-react!Disposable:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapterSubscriptions",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatAdapterCommon",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 7
            },
            {
              "startIndex": 8,
              "endIndex": 9
            },
            {
              "startIndex": 10,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement:interface",
          "docComment": "/**\n * Functionality for managing the current call with chat.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallWithChatAdapterManagement "
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatAdapterManagement",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#askDevicePermission:member(1)",
              "docComment": "/**\n * Ask for permissions of devices.\n *\n * @remarks\n *\n * Browser permission window will pop up if permissions are not granted yet.\n *\n * @param constrain - Define constraints for accessing local devices {@link @azure/communication-calling#PermissionConstraints}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "askDevicePermission(constrain: "
                },
                {
                  "kind": "Reference",
                  "text": "PermissionConstraints",
                  "canonicalReference": "@azure/communication-calling!PermissionConstraints:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "constrain",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "askDevicePermission"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#createStreamView:member(1)",
              "docComment": "/**\n * Create the html view for a stream.\n *\n * @remarks\n *\n * This method is implemented for composite.\n *\n * @param remoteUserId - Id of the participant to render, leave it undefined to create the local camera view\n *\n * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createStreamView(remoteUserId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void | "
                },
                {
                  "kind": "Reference",
                  "text": "CreateVideoStreamViewResult",
                  "canonicalReference": "@azure/communication-react!CreateVideoStreamViewResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "remoteUserId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "createStreamView"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#deleteMessage:member(1)",
              "docComment": "/**\n * Delete a message in the thread.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteMessage(messageId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "deleteMessage"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#disposeStreamView:member(1)",
              "docComment": "/**\n * Dispose the html view for a stream.\n *\n * @remarks\n *\n * This method is implemented for composite.\n *\n * @param remoteUserId - Id of the participant to render, leave it undefined to dispose the local camera view\n *\n * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disposeStreamView(remoteUserId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "remoteUserId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "disposeStreamView"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#fetchInitialData:member(1)",
              "docComment": "/**\n * Fetch initial state for the Chat adapter.\n *\n * Performs the minimal fetch necessary for ChatComposite and API methods.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fetchInitialData(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "fetchInitialData"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#joinCall:member(1)",
              "docComment": "/**\n * Join the call with microphone initially on/off.\n *\n * @param microphoneOn - Whether microphone is initially enabled\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "joinCall(microphoneOn?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "microphoneOn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "joinCall"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#leaveCall:member(1)",
              "docComment": "/**\n * Leave the call.\n *\n * @param forEveryone - Whether to remove all participants when leaving\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leaveCall(forEveryone?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forEveryone",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "leaveCall"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#loadPreviousChatMessages:member(1)",
              "docComment": "/**\n * Load more previous messages in the chat thread history.\n *\n * @remarks\n *\n * This method is usually used to control incremental fetch/infinite scroll.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadPreviousChatMessages(messagesToLoad: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messagesToLoad",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadPreviousChatMessages"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#mute:member(1)",
              "docComment": "/**\n * Mute the current user during the call or disable microphone locally.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mute(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "mute"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#queryCameras:member(1)",
              "docComment": "/**\n * Query for available camera devices.\n *\n * @remarks\n *\n * This method should be called after askDevicePermission()\n *\n * @return An array of video device information entities {@link @azure/communication-calling#VideoDeviceInfo}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryCameras(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "VideoDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "queryCameras"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#queryMicrophones:member(1)",
              "docComment": "/**\n * Query for available microphone devices.\n *\n * @remarks\n *\n * This method should be called after askDevicePermission()\n *\n * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryMicrophones(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "queryMicrophones"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#querySpeakers:member(1)",
              "docComment": "/**\n * Query for available microphone devices.\n *\n * @remarks\n *\n * This method should be called after askDevicePermission()\n *\n * @return An array of audio device information entities {@link @azure/communication-calling#AudioDeviceInfo}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "querySpeakers(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "querySpeakers"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#removeParticipant:member(1)",
              "docComment": "/**\n * Remove a participant from a Call.\n *\n * @param userId - UserId of the participant to remove.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeParticipant(userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeParticipant"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#sendMessage:member(1)",
              "docComment": "/**\n * Send a message in the thread.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendMessage(content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "SendMessageOptions",
                  "canonicalReference": "@azure/communication-chat!SendMessageOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "content",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "sendMessage"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#sendReadReceipt:member(1)",
              "docComment": "/**\n * Send a read receipt for a message.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendReadReceipt(chatMessageId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "chatMessageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "sendReadReceipt"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#sendTypingIndicator:member(1)",
              "docComment": "/**\n * Send typing indicator in the thread.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendTypingIndicator(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "sendTypingIndicator"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#setCamera:member(1)",
              "docComment": "/**\n * Set the camera to use in the call.\n *\n * @param sourceInfo - Camera device to choose, pick one returned by {@link CallAdapterDeviceManagement#queryCameras}\n *\n * @param options - Options to control how the camera stream is rendered {@link @azure/communication-calling#VideoStreamOptions}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCamera(sourceInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sourceInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setCamera"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#setMicrophone:member(1)",
              "docComment": "/**\n * Set the microphone to use in the call.\n *\n * @param sourceInfo - Microphone device to choose, pick one returned by {@link CallAdapterDeviceManagement#queryMicrophones}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setMicrophone(sourceInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sourceInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setMicrophone"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#setSpeaker:member(1)",
              "docComment": "/**\n * Set the speaker to use in the call.\n *\n * @param sourceInfo - Speaker device to choose, pick one returned by {@link CallAdapterDeviceManagement#querySpeakers}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSpeaker(sourceInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sourceInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setSpeaker"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#startCall:member(1)",
              "docComment": "/**\n * Start the call.\n *\n * @param participants - An array of participant ids to join\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startCall(participants: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "StartCallOptions",
                  "canonicalReference": "@azure/communication-calling!StartCallOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Call",
                  "canonicalReference": "@azure/communication-calling!Call:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "participants",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "startCall"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#startCamera:member(1)",
              "docComment": "/**\n * Start the camera.\n *\n * This method will start rendering a local camera view when the call is not active.\n *\n * @param options - Options to control how video streams are rendered {@link @azure/communication-calling#VideoStreamOptions}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startCamera(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "startCamera"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#startScreenShare:member(1)",
              "docComment": "/**\n * Start sharing the screen during a call.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startScreenShare(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "startScreenShare"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#stopCamera:member(1)",
              "docComment": "/**\n * Stop the camera.\n *\n * This method will stop rendering a local camera view when the call is not active.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopCamera(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stopCamera"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#stopScreenShare:member(1)",
              "docComment": "/**\n * Stop sharing the screen.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopScreenShare(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stopScreenShare"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#unmute:member(1)",
              "docComment": "/**\n * Unmute the current user during the call or enable microphone locally.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unmute(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "unmute"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterManagement#updateMessage:member(1)",
              "docComment": "/**\n * Update a message content.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateMessage(messageId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "content",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "metadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "name": "updateMessage"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallWithChatAdapterState:interface",
          "docComment": "/**\n * CallWithChat State is a combination of Stateful Chat and Stateful Calling clients with some state specific to the CallWithChat Composite only.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallWithChatAdapterState extends "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapterUiState",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterUiState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatClientState",
              "canonicalReference": "@azure/communication-react!CallWithChatClientState:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatAdapterState",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions:interface",
          "docComment": "/**\n * Call and Chat events that can be subscribed to in the {@link CallWithChatAdapter}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallWithChatAdapterSubscriptions "
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatAdapterSubscriptions",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callEnded'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "CallEndedListener",
                  "canonicalReference": "@azure/communication-react!CallEndedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(10)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'selectedSpeakerChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyChangedEvent",
                  "canonicalReference": "@azure/communication-calling!PropertyChangedEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 10,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(11)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callError'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(e: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterError",
                  "canonicalReference": "@azure/communication-react!AdapterError:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 11,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(12)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageReceived'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageReceivedListener",
                  "canonicalReference": "@azure/communication-react!MessageReceivedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 12,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(13)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageSent'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageSentListener",
                  "canonicalReference": "@azure/communication-react!MessageSentListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 13,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(14)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageRead'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageReadListener",
                  "canonicalReference": "@azure/communication-react!MessageReadListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 14,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(15)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'chatParticipantsAdded'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsAddedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsAddedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 15,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(16)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'chatParticipantsRemoved'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsRemovedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsRemovedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 16,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(17)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'chatError'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(e: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterError",
                  "canonicalReference": "@azure/communication-react!AdapterError:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 17,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isMutedChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsMutedChangedListener",
                  "canonicalReference": "@azure/communication-react!IsMutedChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callIdChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "CallIdChangedListener",
                  "canonicalReference": "@azure/communication-react!CallIdChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(4)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isLocalScreenSharingActiveChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsLocalScreenSharingActiveChangedListener",
                  "canonicalReference": "@azure/communication-react!IsLocalScreenSharingActiveChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(5)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'displayNameChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "DisplayNameChangedListener",
                  "canonicalReference": "@azure/communication-react!DisplayNameChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(6)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isSpeakingChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsSpeakingChangedListener",
                  "canonicalReference": "@azure/communication-react!IsSpeakingChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 6,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(7)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callParticipantsJoined'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsJoinedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsJoinedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 7,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(8)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callParticipantsLeft'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsLeftListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsLeftListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 8,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#off:member(9)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'selectedMicrophoneChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyChangedEvent",
                  "canonicalReference": "@azure/communication-calling!PropertyChangedEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 9,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callEnded'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "CallEndedListener",
                  "canonicalReference": "@azure/communication-react!CallEndedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(10)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'selectedSpeakerChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyChangedEvent",
                  "canonicalReference": "@azure/communication-calling!PropertyChangedEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 10,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(11)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callError'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(e: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterError",
                  "canonicalReference": "@azure/communication-react!AdapterError:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 11,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(12)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageReceived'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageReceivedListener",
                  "canonicalReference": "@azure/communication-react!MessageReceivedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 12,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(13)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageSent'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageSentListener",
                  "canonicalReference": "@azure/communication-react!MessageSentListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 13,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(14)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageRead'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageReadListener",
                  "canonicalReference": "@azure/communication-react!MessageReadListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 14,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(15)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'chatParticipantsAdded'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsAddedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsAddedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 15,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(16)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'chatParticipantsRemoved'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsRemovedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsRemovedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 16,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(17)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'chatError'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(e: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterError",
                  "canonicalReference": "@azure/communication-react!AdapterError:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 17,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isMutedChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsMutedChangedListener",
                  "canonicalReference": "@azure/communication-react!IsMutedChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callIdChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "CallIdChangedListener",
                  "canonicalReference": "@azure/communication-react!CallIdChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(4)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isLocalScreenSharingActiveChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsLocalScreenSharingActiveChangedListener",
                  "canonicalReference": "@azure/communication-react!IsLocalScreenSharingActiveChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(5)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'displayNameChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "DisplayNameChangedListener",
                  "canonicalReference": "@azure/communication-react!DisplayNameChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(6)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'isSpeakingChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "IsSpeakingChangedListener",
                  "canonicalReference": "@azure/communication-react!IsSpeakingChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 6,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(7)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callParticipantsJoined'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsJoinedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsJoinedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 7,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(8)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'callParticipantsLeft'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsLeftListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsLeftListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 8,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterSubscriptions#on:member(9)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'selectedMicrophoneChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyChangedEvent",
                  "canonicalReference": "@azure/communication-calling!PropertyChangedEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 9,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallWithChatAdapterUiState:interface",
          "docComment": "/**\n * UI state pertaining to the {@link CallWithChatComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallWithChatAdapterUiState "
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatAdapterUiState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterUiState#isLocalPreviewMicrophoneEnabled:member",
              "docComment": "/**\n * Microphone state before a call has joined.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLocalPreviewMicrophoneEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isLocalPreviewMicrophoneEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapterUiState#page:member",
              "docComment": "/**\n * Current page of the Composite.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "page: "
                },
                {
                  "kind": "Reference",
                  "text": "CallCompositePage",
                  "canonicalReference": "@azure/communication-react!CallCompositePage:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "page",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallWithChatClientState:interface",
          "docComment": "/**\n * State from the backend services that drives {@link CallWithChatComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallWithChatClientState "
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatClientState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatClientState#call:member",
              "docComment": "/**\n * State of the current call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "call?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallState",
                  "canonicalReference": "@azure/communication-react!CallState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "call",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatClientState#chat:member",
              "docComment": "/**\n * State of the current chat.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chat?: "
                },
                {
                  "kind": "Reference",
                  "text": "ChatThreadClientState",
                  "canonicalReference": "@azure/communication-react!ChatThreadClientState:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "chat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatClientState#devices:member",
              "docComment": "/**\n * State of available and currently selected devices\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "devices: "
                },
                {
                  "kind": "Reference",
                  "text": "DeviceManagerState",
                  "canonicalReference": "@azure/communication-react!DeviceManagerState:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "devices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatClientState#displayName:member",
              "docComment": "/**\n * Display name of the participant using this CallWithChatAdapter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayName: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "displayName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatClientState#isTeamsCall:member",
              "docComment": "/**\n * State of whether the active call is a Teams interop call\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTeamsCall: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isTeamsCall",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatClientState#latestCallErrors:member",
              "docComment": "/**\n * Latest call error encountered for each operation performed via the adapter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "latestCallErrors: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterErrors",
                  "canonicalReference": "@azure/communication-react!AdapterErrors:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latestCallErrors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatClientState#latestChatErrors:member",
              "docComment": "/**\n * Latest chat error encountered for each operation performed via the adapter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "latestChatErrors: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterErrors",
                  "canonicalReference": "@azure/communication-react!AdapterErrors:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latestChatErrors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatClientState#userId:member",
              "docComment": "/**\n * ID of the call participant using this CallWithChatAdapter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userId: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationIdentifierKind",
                  "canonicalReference": "@azure/communication-common!CommunicationIdentifierKind:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "userId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!CallWithChatComposite:var",
          "docComment": "/**\n * CallWithChatComposite brings together key components to provide a full call with chat experience out of the box.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CallWithChatComposite: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatCompositeProps",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatComposite",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallWithChatCompositeIcons:type",
          "docComment": "/**\n * Icons that can be overridden for {@link CallWithChatComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallWithChatCompositeIcons = "
            },
            {
              "kind": "Content",
              "text": "{\n    ChevronLeft?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlBarChatButtonActive?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlBarChatButtonInactive?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlBarPeopleButton?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    Link?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MoreDrawerMicrophones?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MoreDrawerPeople?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MoreDrawerSelectedMicrophone?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MoreDrawerSelectedSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MoreDrawerSpeakers?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonCameraOff?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonCameraOn?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonEndCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonMicOff?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonMicOn?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonOptions?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonScreenShareStart?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonScreenShareStop?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallCameraAccessDenied?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallCameraAlreadyInUse?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallLocalVideoFreeze?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMacOsCameraAccessDenied?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMacOsMicrophoneAccessDenied?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneAccessDenied?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneMutedBySystem?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneUnmutedBySystem?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNetworkQualityLow?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNoMicrophoneFound?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNoSpeakerFound?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarClear?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    HorizontalGalleryLeftButton?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    HorizontalGalleryRightButton?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LobbyScreenConnectingToCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LobbyScreenWaitingToBeAdmitted?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalDeviceSettingsCamera?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalDeviceSettingsMic?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalDeviceSettingsSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalPreviewPlaceholder?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    Muted?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NetworkReconnectIcon?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NoticePageAccessDeniedTeamsMeeting?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NoticePageJoinCallFailedDueToNoNetwork?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NoticePageLeftCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    NoticePageRemovedFromCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsCamera?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsMic?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemMicOff?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemScreenShareStart?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    VideoTileMicOff?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalCameraSwitch?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    EditBoxCancel?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    EditBoxSubmit?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageDelivered?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageEdit?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageFailed?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageRemove?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageSeen?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageSending?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    SendBoxSend?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    SendBoxSendHovered?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    SendBoxAttachFile?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptions?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptionsHovered?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatCompositeIcons",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 130
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallWithChatCompositeOptions:type",
          "docComment": "/**\n * Optional features of the {@link CallWithChatComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallWithChatCompositeOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    callControls?: boolean | "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatControlOptions",
              "canonicalReference": "@azure/communication-react!CallWithChatControlOptions:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatCompositeOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallWithChatCompositeProps:interface",
          "docComment": "/**\n * Props required for the {@link CallWithChatComposite}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallWithChatCompositeProps extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCompositeProps",
              "canonicalReference": "@azure/communication-react!BaseCompositeProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallWithChatCompositeIcons",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeIcons:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatCompositeProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeProps#adapter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "CallWithChatAdapter",
                  "canonicalReference": "@azure/communication-react!CallWithChatAdapter:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "adapter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeProps#fluentTheme:member",
              "docComment": "/**\n * Fluent theme for the composite.\n *\n * Defaults to a light theme if undefined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fluentTheme?: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialTheme",
                  "canonicalReference": "@fluentui/theme!PartialTheme:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@fluentui/theme!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fluentTheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeProps#formFactor:member",
              "docComment": "/**\n * Optimizes the composite form factor for either desktop or mobile.\n *\n * @remarks\n *\n * `mobile` is currently only optimized for Portrait mode on mobile devices and does not support landscape.\n *\n * @defaultValue\n *\n * 'desktop'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "formFactor?: "
                },
                {
                  "kind": "Content",
                  "text": "'desktop' | 'mobile'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "formFactor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeProps#joinInvitationURL:member",
              "docComment": "/**\n * URL that can be used to copy a call-with-chat invite to the Users clipboard.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "joinInvitationURL?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "joinInvitationURL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeProps#options:member",
              "docComment": "/**\n * Flags to enable/disable or customize UI elements of the {@link CallWithChatComposite}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallWithChatCompositeOptions",
                  "canonicalReference": "@azure/communication-react!CallWithChatCompositeOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings:interface",
          "docComment": "/**\n * Strings used by the {@link CallWithChatComposite} directly.\n *\n * This strings are in addition to those used by the components from the component library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallWithChatCompositeStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatCompositeStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#chatButtonLabel:member",
              "docComment": "/**\n * {@link CallWithChatComposite} control bar Chat button label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "chatButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#chatButtonNewMessageNotificationLabel:member",
              "docComment": "/**\n * New Message label for chat button with notification icon component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatButtonNewMessageNotificationLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "chatButtonNewMessageNotificationLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#chatButtonTooltipClose:member",
              "docComment": "/**\n * {@Link CallWithChatComposite} control bar Chat button ToolTipContent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatButtonTooltipClose: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "chatButtonTooltipClose",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#chatButtonTooltipClosedWithMessageCount:member",
              "docComment": "/**\n * {@link CallWithChatComposite} control bar Chat button enhanced tooltip string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatButtonTooltipClosedWithMessageCount: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "chatButtonTooltipClosedWithMessageCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#chatButtonTooltipOpen:member",
              "docComment": "/**\n * {@Link CallWithChatComposite} control bar Chat button ToolTipContent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatButtonTooltipOpen: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "chatButtonTooltipOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#chatPaneTitle:member",
              "docComment": "/**\n * Side pane Chat screen title.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatPaneTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "chatPaneTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#copyInviteLinkActionedAriaLabel:member",
              "docComment": "/**\n * aria label for when the invite link has been actioned\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyInviteLinkActionedAriaLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "copyInviteLinkActionedAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#copyInviteLinkButtonLabel:member",
              "docComment": "/**\n * Label for button to copy invite link\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyInviteLinkButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "copyInviteLinkButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#dismissSidePaneButtonLabel:member",
              "docComment": "/**\n * Label for SidePaneHeader dismiss button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissSidePaneButtonLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dismissSidePaneButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#moreDrawerAudioDeviceMenuTitle:member",
              "docComment": "/**\n * Title for the audio device selection sub-menu in more button drawer.\n *\n * Only used with `mobileView` set to `true` and when no speakers are available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moreDrawerAudioDeviceMenuTitle?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "moreDrawerAudioDeviceMenuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#moreDrawerButtonLabel:member",
              "docComment": "/**\n * {@Link CallWithChatComposite} control bar More button label\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moreDrawerButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "moreDrawerButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#moreDrawerButtonTooltip:member",
              "docComment": "/**\n * {@Link CallWithChatComposite} control bar More button tooltip content\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moreDrawerButtonTooltip: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "moreDrawerButtonTooltip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#moreDrawerMicrophoneMenuTitle:member",
              "docComment": "/**\n * Title for the microphone selection sub-menu in more button drawer.\n *\n * Only used with `mobileView` set to `true` and when speakers are available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moreDrawerMicrophoneMenuTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "moreDrawerMicrophoneMenuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#moreDrawerSpeakerMenuTitle:member",
              "docComment": "/**\n * Title for the speaker selection sub-menu in more button drawer.\n *\n * Only used with `mobileView` set to `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moreDrawerSpeakerMenuTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "moreDrawerSpeakerMenuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#peopleButtonLabel:member",
              "docComment": "/**\n * {@link CallWithChatComposite} control bar People button label\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "peopleButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "peopleButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#peopleButtonTooltipClose:member",
              "docComment": "/**\n * {@link CallWithChatComposite} control bar People button ToolTipContent\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "peopleButtonTooltipClose: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "peopleButtonTooltipClose",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#peopleButtonTooltipOpen:member",
              "docComment": "/**\n * {@link CallWithChatComposite} control bar People button ToolTipContent\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "peopleButtonTooltipOpen: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "peopleButtonTooltipOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#peoplePaneSubTitle:member",
              "docComment": "/**\n * Side pane People section subheader.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "peoplePaneSubTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "peoplePaneSubTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#peoplePaneTitle:member",
              "docComment": "/**\n * Side pane People section Title.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "peoplePaneTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "peoplePaneTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#pictureInPictureTileAriaLabel:member",
              "docComment": "/**\n * Aria label for the picture in picture in picture tile that. This feature currently only shows on mobileView when the chat or people pane is expanded.\n *\n * @remarks\n *\n * This component displays the local and most-dominant remote participant and when clicked returns the user to the call screen.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pictureInPictureTileAriaLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pictureInPictureTileAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#removeMenuLabel:member",
              "docComment": "/**\n * Label for menu item to remove participant\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeMenuLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "removeMenuLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#returnToCallButtonAriaDescription:member",
              "docComment": "/**\n * Aria Description string for return to call button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "returnToCallButtonAriaDescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "returnToCallButtonAriaDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings#returnToCallButtonAriaLabel:member",
              "docComment": "/**\n * Aria label string for return to call back button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "returnToCallButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "returnToCallButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CallWithChatControlOptions:interface",
          "docComment": "/**\n * {@link CallWithChatComposite} Call controls to show or hide buttons on the calling control bar.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CallWithChatControlOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatControlOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatControlOptions#cameraButton:member",
              "docComment": "/**\n * Show or Hide Camera Button during a call\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cameraButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatControlOptions#chatButton:member",
              "docComment": "/**\n * Show or hide the chat button in the call-with-chat composite control bar.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "chatButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatControlOptions#displayType:member",
              "docComment": "/**\n * {@link CallControlDisplayType} to change how the call controls are displayed. `'compact'` display type will decreases the size of buttons and hide the labels.\n *\n * @remarks\n *\n * If the composite `formFactor` is set to `'mobile'`, the control bar will always use compact view.\n *\n * @defaultValue\n *\n * 'default'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayType?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallControlDisplayType",
                  "canonicalReference": "@azure/communication-react!CallControlDisplayType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "displayType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatControlOptions#endCallButton:member",
              "docComment": "/**\n * Show or Hide EndCall button during a call.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endCallButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "endCallButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatControlOptions#microphoneButton:member",
              "docComment": "/**\n * Show or Hide Microphone button during a call.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "microphoneButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatControlOptions#peopleButton:member",
              "docComment": "/**\n * Show or hide the people button in the call-with-chat composite control bar.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "peopleButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "peopleButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CallWithChatControlOptions#screenShareButton:member",
              "docComment": "/**\n * Show, Hide or Disable the screen share button during a call.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenShareButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | {\n        disabled: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "screenShareButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CallWithChatEvent:type",
          "docComment": "/**\n * Events fired off by the {@link CallWithChatAdapter}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CallWithChatEvent = "
            },
            {
              "kind": "Content",
              "text": "'callError' | 'chatError' | 'callEnded' | 'isMutedChanged' | 'callIdChanged' | 'isLocalScreenSharingActiveChanged' | 'displayNameChanged' | 'isSpeakingChanged' | 'callParticipantsJoined' | 'callParticipantsLeft' | 'selectedMicrophoneChanged' | 'selectedSpeakerChanged' | 'messageReceived' | 'messageSent' | 'messageRead' | 'chatParticipantsAdded' | 'chatParticipantsRemoved'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CallWithChatEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!CameraButton:var",
          "docComment": "/**\n * A button to turn camera on / off.\n *\n * Can be used with {@link ControlBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CameraButton: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "CameraButtonProps",
              "canonicalReference": "@azure/communication-react!CameraButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "CameraButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CameraButtonContextualMenuStyles:interface",
          "docComment": "/**\n * Styles for the {@link CameraButton} menu.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CameraButtonContextualMenuStyles extends "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuStyles",
              "canonicalReference": "@fluentui/react!IContextualMenuStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CameraButtonContextualMenuStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonContextualMenuStyles#menuItemStyles:member",
              "docComment": "/**\n * Styles for the items inside the {@link CameraButton} button menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuItemStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemStyles",
                  "canonicalReference": "@fluentui/react!IContextualMenuItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menuItemStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CameraButtonProps:interface",
          "docComment": "/**\n * Props for {@link CameraButton} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CameraButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonProps",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CameraButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonProps#cameras:member",
              "docComment": "/**\n * Available cameras for selection\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameras?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cameras",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonProps#enableDeviceSelectionMenu:member",
              "docComment": "/**\n * Whether to use a {@link SplitButton} with a {@link IContextualMenu} for device selection.\n *\n * default: false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableDeviceSelectionMenu?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enableDeviceSelectionMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonProps#localVideoViewOptions:member",
              "docComment": "/**\n * Options for rendering local video view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localVideoViewOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "localVideoViewOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonProps#onSelectCamera:member",
              "docComment": "/**\n * Callback when a camera is selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectCamera?: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSelectCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonProps#onToggleCamera:member",
              "docComment": "/**\n * Utility property for using this component with `communication react eventHandlers`. Maps directly to the `onClick` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onToggleCamera?: "
                },
                {
                  "kind": "Content",
                  "text": "(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onToggleCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonProps#selectedCamera:member",
              "docComment": "/**\n * Camera that is shown as currently selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedCamera?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectedCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CameraButtonStrings",
                  "canonicalReference": "@azure/communication-react!CameraButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonProps#styles:member",
              "docComment": "/**\n * Styles for {@link CameraButton} and the device selection flyout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CameraButtonStyles",
                  "canonicalReference": "@azure/communication-react!CameraButtonStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CameraButtonSelector:type",
          "docComment": "/**\n * Selector type for {@link CameraButton} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CameraButtonSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "CallingBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!CallingBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    disabled: boolean;\n    checked: boolean;\n    cameras: "
            },
            {
              "kind": "Reference",
              "text": "VideoDeviceInfo",
              "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    selectedCamera?: "
            },
            {
              "kind": "Reference",
              "text": "VideoDeviceInfo",
              "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CameraButtonSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CameraButtonStrings:interface",
          "docComment": "/**\n * Strings of CameraButton that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CameraButtonStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "CameraButtonStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#cameraActionTurnedOffAnnouncement:member",
              "docComment": "/**\n * Camera action turned off string for announcer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraActionTurnedOffAnnouncement?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cameraActionTurnedOffAnnouncement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#cameraActionTurnedOnAnnouncement:member",
              "docComment": "/**\n * Camera action turned on string for announcer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraActionTurnedOnAnnouncement?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cameraActionTurnedOnAnnouncement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#cameraButtonSplitRoleDescription:member",
              "docComment": "/**\n * description of camera button split button role\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraButtonSplitRoleDescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cameraButtonSplitRoleDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#cameraMenuTitle:member",
              "docComment": "/**\n * Title of camera menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraMenuTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameraMenuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#cameraMenuTooltip:member",
              "docComment": "/**\n * Tooltip of camera menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraMenuTooltip: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameraMenuTooltip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#offLabel:member",
              "docComment": "/**\n * Label when button is off.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#offSplitButtonAriaLabel:member",
              "docComment": "/**\n * Camera split button aria label for when button is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offSplitButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "offSplitButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#onLabel:member",
              "docComment": "/**\n * Label when button is on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#onSplitButtonAriaLabel:member",
              "docComment": "/**\n * Camera split button aria label for when button is enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSplitButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSplitButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#tooltipDisabledContent:member",
              "docComment": "/**\n * Tooltip content when the button is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipDisabledContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipDisabledContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#tooltipOffContent:member",
              "docComment": "/**\n * Tooltip content when the button is off.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipOffContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipOffContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#tooltipOnContent:member",
              "docComment": "/**\n * Tooltip content when the button is on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipOnContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipOnContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStrings#tooltipVideoLoadingContent:member",
              "docComment": "/**\n * Tooltip content when the button is disabled due to video loading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipVideoLoadingContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipVideoLoadingContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CameraButtonStyles:interface",
          "docComment": "/**\n * Styles for {@link CameraButton}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CameraButtonStyles extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonStyles",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStyles:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CameraButtonStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CameraButtonStyles#menuStyles:member",
              "docComment": "/**\n * Styles for the {@link CameraButton} menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CameraButtonContextualMenuStyles",
                  "canonicalReference": "@azure/communication-react!CameraButtonContextualMenuStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menuStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatAdapter:type",
          "docComment": "/**\n * {@link ChatComposite} Adapter interface.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatAdapter = "
            },
            {
              "kind": "Reference",
              "text": "ChatAdapterThreadManagement",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "AdapterState",
              "canonicalReference": "@azure/communication-react!AdapterState:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChatAdapterState",
              "canonicalReference": "@azure/communication-react!ChatAdapterState:type"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "Disposable",
              "canonicalReference": "@azure/communication-react!Disposable:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "ChatAdapterSubscribers",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatAdapter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatAdapterState:type",
          "docComment": "/**\n * {@link ChatAdapter} state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatAdapterState = "
            },
            {
              "kind": "Reference",
              "text": "ChatAdapterUiState",
              "canonicalReference": "@azure/communication-react!ChatAdapterUiState:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "ChatCompositeClientState",
              "canonicalReference": "@azure/communication-react!ChatCompositeClientState:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatAdapterState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers:interface",
          "docComment": "/**\n * Chat composite events that can be subscribed to.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ChatAdapterSubscribers "
            }
          ],
          "releaseTag": "Public",
          "name": "ChatAdapterSubscribers",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#off:member(1)",
              "docComment": "/**\n * Unsubscribe function for 'messageReceived' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageReceived'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageReceivedListener",
                  "canonicalReference": "@azure/communication-react!MessageReceivedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#off:member(2)",
              "docComment": "/**\n * Unsubscribe function for 'messageSent' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageSent'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageSentListener",
                  "canonicalReference": "@azure/communication-react!MessageSentListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#off:member(3)",
              "docComment": "/**\n * Unsubscribe function for 'messageRead' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageRead'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageReadListener",
                  "canonicalReference": "@azure/communication-react!MessageReadListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#off:member(4)",
              "docComment": "/**\n * Unsubscribe function for 'participantsAdded' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'participantsAdded'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsAddedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsAddedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#off:member(5)",
              "docComment": "/**\n * Unsubscribe function for 'participantsRemoved' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'participantsRemoved'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsRemovedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsRemovedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#off:member(6)",
              "docComment": "/**\n * Unsubscribe function for 'topicChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'topicChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "TopicChangedListener",
                  "canonicalReference": "@azure/communication-react!TopicChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 6,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#off:member(7)",
              "docComment": "/**\n * Unsubscribe function for 'error' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "off(event: "
                },
                {
                  "kind": "Content",
                  "text": "'error'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(e: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterError",
                  "canonicalReference": "@azure/communication-react!AdapterError:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 7,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "off"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#on:member(1)",
              "docComment": "/**\n * Subscribe function for 'messageReceived' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageReceived'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageReceivedListener",
                  "canonicalReference": "@azure/communication-react!MessageReceivedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#on:member(2)",
              "docComment": "/**\n * Subscribe function for 'messageSent' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageSent'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageSentListener",
                  "canonicalReference": "@azure/communication-react!MessageSentListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#on:member(3)",
              "docComment": "/**\n * Subscribe function for 'messageRead' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'messageRead'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageReadListener",
                  "canonicalReference": "@azure/communication-react!MessageReadListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#on:member(4)",
              "docComment": "/**\n * Subscribe function for 'participantsAdded' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'participantsAdded'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsAddedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsAddedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#on:member(5)",
              "docComment": "/**\n * Subscribe function for 'participantsRemoved' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'participantsRemoved'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsRemovedListener",
                  "canonicalReference": "@azure/communication-react!ParticipantsRemovedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#on:member(6)",
              "docComment": "/**\n * Subscribe function for 'topicChanged' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'topicChanged'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "TopicChangedListener",
                  "canonicalReference": "@azure/communication-react!TopicChangedListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 6,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterSubscribers#on:member(7)",
              "docComment": "/**\n * Subscribe function for 'error' event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'error'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(e: "
                },
                {
                  "kind": "Reference",
                  "text": "AdapterError",
                  "canonicalReference": "@azure/communication-react!AdapterError:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 7,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement:interface",
          "docComment": "/**\n * Functionality for managing the current chat thread.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ChatAdapterThreadManagement "
            }
          ],
          "releaseTag": "Public",
          "name": "ChatAdapterThreadManagement",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement#deleteMessage:member(1)",
              "docComment": "/**\n * Delete a message in the thread.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteMessage(messageId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "deleteMessage"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement#fetchInitialData:member(1)",
              "docComment": "/**\n * Fetch initial state for the Chat adapter.\n *\n * Performs the minimal fetch necessary for ChatComposite and API methods.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fetchInitialData(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "fetchInitialData"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement#loadPreviousChatMessages:member(1)",
              "docComment": "/**\n * Load more previous messages in the chat thread history.\n *\n * @remarks\n *\n * This method is usually used to control incremental fetch/infinite scroll\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadPreviousChatMessages(messagesToLoad: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messagesToLoad",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadPreviousChatMessages"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement#removeParticipant:member(1)",
              "docComment": "/**\n * Remove a participant in the thread.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeParticipant(userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeParticipant"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement#sendMessage:member(1)",
              "docComment": "/**\n * Send a message in the thread.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendMessage(content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "SendMessageOptions",
                  "canonicalReference": "@azure/communication-chat!SendMessageOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "content",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "sendMessage"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement#sendReadReceipt:member(1)",
              "docComment": "/**\n * Send a read receipt for a message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendReadReceipt(chatMessageId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "chatMessageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "sendReadReceipt"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement#sendTypingIndicator:member(1)",
              "docComment": "/**\n * Send typing indicator in the thread.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendTypingIndicator(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "sendTypingIndicator"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement#setTopic:member(1)",
              "docComment": "/**\n * Set the topic for the thread.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTopic(topicName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "topicName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setTopic"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!ChatAdapterThreadManagement#updateMessage:member(1)",
              "docComment": "/**\n * Update a message content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateMessage(messageId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "content",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "metadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "name": "updateMessage"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatAdapterUiState:type",
          "docComment": "/**\n * {@link ChatAdapter} state for pure UI purposes.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatAdapterUiState = "
            },
            {
              "kind": "Content",
              "text": "{\n    error?: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatAdapterUiState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatBaseSelectorProps:type",
          "docComment": "/**\n * Common props for selectors for {@link ChatClientState}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatBaseSelectorProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    threadId: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatBaseSelectorProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ChatClientProvider:var",
          "docComment": "/**\n * A {@link React.Context} that stores a {@link StatefulChatClient}.\n *\n * Chat components from this package must be wrapped with a {@link ChatClientProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ChatClientProvider: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ChatClientProviderProps",
              "canonicalReference": "@azure/communication-react!ChatClientProviderProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatClientProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatClientProviderProps:type",
          "docComment": "/**\n * Arguments to initialize a {@link ChatClientProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatClientProviderProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    children: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!~React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    chatClient: "
            },
            {
              "kind": "Reference",
              "text": "StatefulChatClient",
              "canonicalReference": "@azure/communication-react!StatefulChatClient:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatClientProviderProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatClientState:type",
          "docComment": "/**\n * Centralized state for {@link @azure/communication-chat#ChatClient}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatClientState = "
            },
            {
              "kind": "Content",
              "text": "{\n    userId: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationIdentifierKind",
              "canonicalReference": "@azure/communication-common!CommunicationIdentifierKind:type"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n    threads: {\n        [key: string]: "
            },
            {
              "kind": "Reference",
              "text": "ChatThreadClientState",
              "canonicalReference": "@azure/communication-react!ChatThreadClientState:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    latestErrors: "
            },
            {
              "kind": "Reference",
              "text": "ChatErrors",
              "canonicalReference": "@azure/communication-react!ChatErrors:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatClientState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ChatComposite:var",
          "docComment": "/**\n * A customizable UI composite for the chat experience.\n *\n * @remarks\n *\n * Chat composite min width and height are respectively 17.5rem and 20rem (280px and 320px, with default rem at 16px)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ChatComposite: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ChatCompositeProps",
              "canonicalReference": "@azure/communication-react!ChatCompositeProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatComposite",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatCompositeClientState:type",
          "docComment": "/**\n * {@link ChatAdapter} state inferred from Azure Communication Services backend.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatCompositeClientState = "
            },
            {
              "kind": "Content",
              "text": "{\n    userId: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationIdentifierKind",
              "canonicalReference": "@azure/communication-common!CommunicationIdentifierKind:type"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n    thread: "
            },
            {
              "kind": "Reference",
              "text": "ChatThreadClientState",
              "canonicalReference": "@azure/communication-react!ChatThreadClientState:type"
            },
            {
              "kind": "Content",
              "text": ";\n    latestErrors: "
            },
            {
              "kind": "Reference",
              "text": "AdapterErrors",
              "canonicalReference": "@azure/communication-react!AdapterErrors:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatCompositeClientState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatCompositeIcons:type",
          "docComment": "/**\n * Icons that can be overridden for {@link ChatComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatCompositeIcons = "
            },
            {
              "kind": "Content",
              "text": "{\n    EditBoxCancel?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    EditBoxSubmit?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageDelivered?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageEdit?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageFailed?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageRemove?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageSeen?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageSending?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptions?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptionsHovered?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    SendBoxSend?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    SendBoxSendHovered?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatCompositeIcons",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 26
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatCompositeOptions:type",
          "docComment": "/**\n * Optional features of the {@link ChatComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatCompositeOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    errorBar?: boolean;\n    topic?: boolean;\n    autoFocus?: 'sendBoxTextField';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatCompositeOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ChatCompositeProps:interface",
          "docComment": "/**\n * Props for {@link ChatComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ChatCompositeProps extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCompositeProps",
              "canonicalReference": "@azure/communication-react!BaseCompositeProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChatCompositeIcons",
              "canonicalReference": "@azure/communication-react!ChatCompositeIcons:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ChatCompositeProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatCompositeProps#adapter:member",
              "docComment": "/**\n * An adapter provides logic and data to the composite. Composite can also be controlled using the adapter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "ChatAdapter",
                  "canonicalReference": "@azure/communication-react!ChatAdapter:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "adapter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatCompositeProps#onRenderMessage:member",
              "docComment": "/**\n * `(messageProps: MessageProps, defaultOnRender?: MessageRenderer) => JSX.Element` A callback for customizing the message renderer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "(messageProps: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageProps",
                  "canonicalReference": "@azure/communication-react!MessageProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", defaultOnRender?: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageRenderer",
                  "canonicalReference": "@azure/communication-react!MessageRenderer:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatCompositeProps#onRenderTypingIndicator:member",
              "docComment": "/**\n * `(typingUsers: CommunicationParticipant[]) => JSX.Element` A callback for customizing the typing indicator renderer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderTypingIndicator?: "
                },
                {
                  "kind": "Content",
                  "text": "(typingUsers: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationParticipant",
                  "canonicalReference": "@azure/communication-react!CommunicationParticipant:type"
                },
                {
                  "kind": "Content",
                  "text": "[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderTypingIndicator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatCompositeProps#options:member",
              "docComment": "/**\n * Flags to enable/disable visual elements of the {@link ChatComposite}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ChatCompositeOptions",
                  "canonicalReference": "@azure/communication-react!ChatCompositeOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ChatCompositeStrings:interface",
          "docComment": "/**\n * Strings used by the {@link ChatComposite} directly.\n *\n * This strings are in addition to those used by the components from the component library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ChatCompositeStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "ChatCompositeStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatCompositeStrings#chatListHeader:member",
              "docComment": "/**\n * Chat list header text\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatListHeader: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "chatListHeader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@azure/communication-react!ChatError:class",
          "docComment": "/**\n * Error thrown from failed {@link StatefulChatClient} methods.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ChatError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ChatError",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@azure/communication-react!ChatError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ChatError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(target: "
                },
                {
                  "kind": "Reference",
                  "text": "ChatErrorTarget",
                  "canonicalReference": "@azure/communication-react!ChatErrorTarget:type"
                },
                {
                  "kind": "Content",
                  "text": ", innerError: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ", timestamp?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "innerError",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "timestamp",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/communication-react!ChatError#innerError:member",
              "docComment": "/**\n * Error thrown by the failed SDK method.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "innerError: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "innerError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/communication-react!ChatError#target:member",
              "docComment": "/**\n * The API method target that failed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target: "
                },
                {
                  "kind": "Reference",
                  "text": "ChatErrorTarget",
                  "canonicalReference": "@azure/communication-react!ChatErrorTarget:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@azure/communication-react!ChatError#timestamp:member",
              "docComment": "/**\n * Timestamp added to the error by the stateful layer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatErrorBarSelector:type",
          "docComment": "/**\n * Selector type for {@link ErrorBar} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ErrorBarSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "ChatClientState",
              "canonicalReference": "@azure/communication-react!ChatClientState:type"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "ChatBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!ChatBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    activeErrorMessages: "
            },
            {
              "kind": "Reference",
              "text": "ActiveErrorMessage",
              "canonicalReference": "@azure/communication-react!ActiveErrorMessage:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatErrorBarSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatErrors:type",
          "docComment": "/**\n * Errors teed from API calls to the Chat SDK.\n *\n * Each property in the object stores the latest error for a particular SDK API method.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatErrors = "
            },
            {
              "kind": "Content",
              "text": "{\n    [target in "
            },
            {
              "kind": "Reference",
              "text": "ChatErrorTarget",
              "canonicalReference": "@azure/communication-react!ChatErrorTarget:type"
            },
            {
              "kind": "Content",
              "text": "]: "
            },
            {
              "kind": "Reference",
              "text": "ChatError",
              "canonicalReference": "@azure/communication-react!ChatError:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatErrors",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatErrorTarget:type",
          "docComment": "/**\n * String literal type for all permissible keys in {@link ChatErrors}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatErrorTarget = "
            },
            {
              "kind": "Content",
              "text": "'ChatClient.createChatThread' | 'ChatClient.deleteChatThread' | 'ChatClient.getChatThreadClient' | 'ChatClient.listChatThreads' | 'ChatClient.off' | 'ChatClient.on' | 'ChatClient.startRealtimeNotifications' | 'ChatClient.stopRealtimeNotifications' | 'ChatThreadClient.addParticipants' | 'ChatThreadClient.deleteMessage' | 'ChatThreadClient.getMessage' | 'ChatThreadClient.getProperties' | 'ChatThreadClient.listMessages' | 'ChatThreadClient.listParticipants' | 'ChatThreadClient.listReadReceipts' | 'ChatThreadClient.removeParticipant' | 'ChatThreadClient.sendMessage' | 'ChatThreadClient.sendReadReceipt' | 'ChatThreadClient.sendTypingNotification' | 'ChatThreadClient.updateMessage' | 'ChatThreadClient.updateTopic'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatErrorTarget",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatHandlers:type",
          "docComment": "/**\n * Object containing all the handlers required for chat components.\n *\n * Chat related components from this package are able to pick out relevant handlers from this object. See {@link useHandlers} and {@link usePropsFor}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatHandlers = "
            },
            {
              "kind": "Content",
              "text": "{\n    onSendMessage: (content: string, options?: "
            },
            {
              "kind": "Reference",
              "text": "SendMessageOptions",
              "canonicalReference": "@azure/communication-chat!SendMessageOptions:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    onMessageSeen: (chatMessageId: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    onTyping: () => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    onRemoveParticipant: (userId: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    updateThreadTopicName: (topicName: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    onLoadPreviousChatMessages: (messagesToLoad: number) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<boolean>;\n    onUpdateMessage: (messageId: string, content: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    onDeleteMessage: (messageId: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatHandlers",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 20
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ChatMessage:interface",
          "docComment": "/**\n * A chat message.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ChatMessage extends "
            },
            {
              "kind": "Reference",
              "text": "MessageCommon",
              "canonicalReference": "@azure/communication-react!MessageCommon:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ChatMessage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#attached:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attached?: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageAttachedStatus",
                  "canonicalReference": "@azure/communication-react!MessageAttachedStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "attached",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#clientMessageId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientMessageId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "clientMessageId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#content:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#contentType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentType: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageContentType",
                  "canonicalReference": "@azure/communication-react!MessageContentType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "contentType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#deletedOn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deletedOn?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "deletedOn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#editedOn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editedOn?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "editedOn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#messageType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageType: "
                },
                {
                  "kind": "Content",
                  "text": "'chat'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "messageType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#metadata:member",
              "docComment": "/**\n * A metadata field for the message. {@link @azure/communication-chat#ChatMessage.metadata}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "metadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#mine:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mine?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "mine",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#senderDisplayName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "senderDisplayName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "senderDisplayName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#senderId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "senderId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "senderId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ChatMessage#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status?: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageStatus",
                  "canonicalReference": "@azure/communication-react!MessageStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatMessageWithStatus:type",
          "docComment": "/**\n * An extension to {@link @azure/communication-chat#ChatMessage} that stores client-side only metadata for chat messages.\n *\n * TODO: The name has bitrotted. Rename me.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatMessageWithStatus = "
            },
            {
              "kind": "Reference",
              "text": "ChatMessage",
              "canonicalReference": "@azure/communication-chat!ChatMessage:interface"
            },
            {
              "kind": "Content",
              "text": " & {\n    clientMessageId?: string;\n    status: "
            },
            {
              "kind": "Reference",
              "text": "MessageStatus",
              "canonicalReference": "@azure/communication-react!MessageStatus:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatMessageWithStatus",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatParticipantListSelector:type",
          "docComment": "/**\n * Selector type for {@link ParticipantList} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatParticipantListSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "ChatClientState",
              "canonicalReference": "@azure/communication-react!ChatClientState:type"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "ChatBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!ChatBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    myUserId: string;\n    participants: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantListParticipant",
              "canonicalReference": "@azure/communication-react!ParticipantListParticipant:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatParticipantListSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatReturnProps:type",
          "docComment": "/**\n * Helper type for {@link usePropsFor}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatReturnProps<Component extends "
            },
            {
              "kind": "Content",
              "text": "(props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "GetChatSelector",
              "canonicalReference": "@azure/communication-react!GetSelector:type"
            },
            {
              "kind": "Content",
              "text": "<Component> extends (state: "
            },
            {
              "kind": "Reference",
              "text": "ChatClientState",
              "canonicalReference": "@azure/communication-react!ChatClientState:type"
            },
            {
              "kind": "Content",
              "text": ", props: any) => any ? "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GetChatSelector",
              "canonicalReference": "@azure/communication-react!GetSelector:type"
            },
            {
              "kind": "Content",
              "text": "<Component>> & "
            },
            {
              "kind": "Reference",
              "text": "Common",
              "canonicalReference": "@azure/communication-react!Common:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChatHandlers",
              "canonicalReference": "@azure/communication-react!ChatHandlers:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<Component>[0]> : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatReturnProps",
          "typeParameters": [
            {
              "typeParameterName": "Component",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 18
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ChatThreadClientProvider:var",
          "docComment": "/**\n * A {@link React.Context} that stores a {@link @azure/communication-chat#ChatThreadClient}.\n *\n * Chat components from this package must be wrapped with a {@link ChatThreadClientProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ChatThreadClientProvider: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ChatThreadClientProviderProps",
              "canonicalReference": "@azure/communication-react!ChatThreadClientProviderProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatThreadClientProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatThreadClientProviderProps:type",
          "docComment": "/**\n * Arguments to initialize a {@link ChatThreadClientProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatThreadClientProviderProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    children: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!~React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    chatThreadClient: "
            },
            {
              "kind": "Reference",
              "text": "ChatThreadClient",
              "canonicalReference": "@azure/communication-chat!ChatThreadClient:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatThreadClientProviderProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatThreadClientState:type",
          "docComment": "/**\n * Centralized state for {@link @azure/communication-chat#ChatThreadClient}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatThreadClientState = "
            },
            {
              "kind": "Content",
              "text": "{\n    chatMessages: {\n        [key: string]: "
            },
            {
              "kind": "Reference",
              "text": "ChatMessageWithStatus",
              "canonicalReference": "@azure/communication-react!ChatMessageWithStatus:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    participants: {\n        [key: string]: "
            },
            {
              "kind": "Reference",
              "text": "ChatParticipant",
              "canonicalReference": "@azure/communication-chat!ChatParticipant:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    threadId: string;\n    properties?: "
            },
            {
              "kind": "Reference",
              "text": "ChatThreadProperties",
              "canonicalReference": "@azure/communication-react!ChatThreadProperties:type"
            },
            {
              "kind": "Content",
              "text": ";\n    readReceipts: "
            },
            {
              "kind": "Reference",
              "text": "ChatMessageReadReceipt",
              "canonicalReference": "@azure/communication-chat!ChatMessageReadReceipt:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    typingIndicators: "
            },
            {
              "kind": "Reference",
              "text": "TypingIndicatorReceivedEvent",
              "canonicalReference": "@azure/communication-signaling!TypingIndicatorReceivedEvent:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    latestReadTime: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatThreadClientState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ChatThreadProperties:type",
          "docComment": "/**\n * Properties of a chat thread.\n *\n * We define a minimal one that helps us hide the different types used by underlying API.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChatThreadProperties = "
            },
            {
              "kind": "Content",
              "text": "{\n    topic?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChatThreadProperties",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ClientState:type",
          "docComment": "/**\n * Centralized state for {@link @azure/communication-calling#CallClient} or {@link @azure/communication-chat#ChatClient}.\n *\n * See also: {@link CallClientState}, {@link ChatClientState}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ClientState = "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "ChatClientState",
              "canonicalReference": "@azure/communication-react!ChatClientState:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ClientState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!Common:type",
          "docComment": "/**\n * Return intersect type of 2 types\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Common<A, B> = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<A, "
            },
            {
              "kind": "Reference",
              "text": "CommonProperties",
              "canonicalReference": "@azure/communication-react!CommonProperties:type"
            },
            {
              "kind": "Content",
              "text": "<A, B>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Common",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CommonCallingHandlers:interface",
          "docComment": "/**\n * Object containing all the handlers required for calling components.\n *\n * Calling related components from this package are able to pick out relevant handlers from this object. See {@link useHandlers} and {@link usePropsFor}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CommonCallingHandlers "
            }
          ],
          "releaseTag": "Public",
          "name": "CommonCallingHandlers",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onCreateLocalStreamView:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCreateLocalStreamView: "
                },
                {
                  "kind": "Content",
                  "text": "(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void | "
                },
                {
                  "kind": "Reference",
                  "text": "CreateVideoStreamViewResult",
                  "canonicalReference": "@azure/communication-react!CreateVideoStreamViewResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onCreateLocalStreamView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onCreateRemoteStreamView:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCreateRemoteStreamView: "
                },
                {
                  "kind": "Content",
                  "text": "(userId: string, options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void | "
                },
                {
                  "kind": "Reference",
                  "text": "CreateVideoStreamViewResult",
                  "canonicalReference": "@azure/communication-react!CreateVideoStreamViewResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onCreateRemoteStreamView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onDisposeLocalStreamView:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDisposeLocalStreamView: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onDisposeLocalStreamView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onDisposeRemoteStreamView:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDisposeRemoteStreamView: "
                },
                {
                  "kind": "Content",
                  "text": "(userId: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onDisposeRemoteStreamView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onHangUp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onHangUp: "
                },
                {
                  "kind": "Content",
                  "text": "(forEveryone?: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onHangUp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onRemoveParticipant:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRemoveParticipant(userId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "userId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "onRemoveParticipant"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onSelectCamera:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectCamera: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onSelectCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onSelectMicrophone:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectMicrophone: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onSelectMicrophone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onSelectSpeaker:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectSpeaker: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onSelectSpeaker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onStartCall:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStartCall: "
                },
                {
                  "kind": "Content",
                  "text": "(participants: ("
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationUserIdentifier",
                  "canonicalReference": "@azure/communication-common!CommunicationUserIdentifier:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PhoneNumberIdentifier",
                  "canonicalReference": "@azure/communication-common!PhoneNumberIdentifier:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "UnknownIdentifier",
                  "canonicalReference": "@azure/communication-common!UnknownIdentifier:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[], options?: "
                },
                {
                  "kind": "Reference",
                  "text": "StartCallOptions",
                  "canonicalReference": "@azure/communication-calling!StartCallOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onStartCall",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onStartLocalVideo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStartLocalVideo: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onStartLocalVideo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onStartScreenShare:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStartScreenShare: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onStartScreenShare",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onStopScreenShare:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStopScreenShare: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onStopScreenShare",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onToggleCamera:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onToggleCamera: "
                },
                {
                  "kind": "Content",
                  "text": "(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onToggleCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onToggleMicrophone:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onToggleMicrophone: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onToggleMicrophone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CommonCallingHandlers#onToggleScreenShare:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onToggleScreenShare: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onToggleScreenShare",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CommonProperties:type",
          "docComment": "/**\n * Return intersect properties of 2 types\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CommonProperties<A, B> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof A & keyof B]: A[P] extends B[P] ? P : never;\n}[keyof A & keyof B]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CommonProperties",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CommunicationParticipant:type",
          "docComment": "/**\n * A Chat or Calling participant's state, as reflected in the UI.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CommunicationParticipant = "
            },
            {
              "kind": "Content",
              "text": "{\n    userId: string;\n    displayName?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CommunicationParticipant",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_DE_DE:var",
          "docComment": "/**\n * Locale for German (Germany).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_DE_DE: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_DE_DE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_EN_GB:var",
          "docComment": "/**\n * Locale for English (GB).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_EN_GB: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_EN_GB",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_EN_US:var",
          "docComment": "/**\n * Locale for English (US).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_EN_US: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_EN_US",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_ES_ES:var",
          "docComment": "/**\n * Locale for Spanish (Spain).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_ES_ES: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_ES_ES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_FR_FR:var",
          "docComment": "/**\n * Locale for French (France).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_FR_FR: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_FR_FR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_IT_IT:var",
          "docComment": "/**\n * Locale for Italian (Italy).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_IT_IT: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_IT_IT",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_JA_JP:var",
          "docComment": "/**\n * Locale for Japanese (Japan).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_JA_JP: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_JA_JP",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_KO_KR:var",
          "docComment": "/**\n * Locale for Korean (South Korea).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_KO_KR: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_KO_KR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_NL_NL:var",
          "docComment": "/**\n * Locale for Dutch (Netherlands).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_NL_NL: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_NL_NL",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_PT_BR:var",
          "docComment": "/**\n * Locale for Portuguese (Brazil).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_PT_BR: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_PT_BR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_RU_RU:var",
          "docComment": "/**\n * Locale for Russian (Russia).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_RU_RU: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_RU_RU",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_TR_TR:var",
          "docComment": "/**\n * Locale for Turkish (Turkey).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_TR_TR: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_TR_TR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_ZH_CN:var",
          "docComment": "/**\n * Locale for Chinese (Mainland China).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_ZH_CN: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_ZH_CN",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPONENT_LOCALE_ZH_TW:var",
          "docComment": "/**\n * Locale for Chinese (Taiwan).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPONENT_LOCALE_ZH_TW: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPONENT_LOCALE_ZH_TW",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ComponentIcons:type",
          "docComment": "/**\n * Icons used by the React components exported from this library.\n *\n * @remark See {@link CompositeIcons} for icons used by composites only.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ComponentIcons = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof typeof "
            },
            {
              "kind": "Reference",
              "text": "DEFAULT_COMPONENT_ICONS",
              "canonicalReference": "@azure/communication-react!DEFAULT_COMPONENT_ICONS:var"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ComponentIcons",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ComponentLocale:interface",
          "docComment": "/**\n * Locale information for all components exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ComponentLocale "
            }
          ],
          "releaseTag": "Public",
          "name": "ComponentLocale",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentLocale#strings:member",
              "docComment": "/**\n * Strings for components\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentStrings",
                  "canonicalReference": "@azure/communication-react!ComponentStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ComponentProps:type",
          "docComment": "/**\n * Helper type for {@link usePropsFor}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ComponentProps<Component extends "
            },
            {
              "kind": "Content",
              "text": "(props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ChatReturnProps",
              "canonicalReference": "@azure/communication-react!ChatReturnProps:type"
            },
            {
              "kind": "Content",
              "text": "<Component> extends never ? "
            },
            {
              "kind": "Reference",
              "text": "CallingReturnProps",
              "canonicalReference": "@azure/communication-react!CallingReturnProps:type"
            },
            {
              "kind": "Content",
              "text": "<Component> extends never ? undefined : "
            },
            {
              "kind": "Reference",
              "text": "CallingReturnProps",
              "canonicalReference": "@azure/communication-react!CallingReturnProps:type"
            },
            {
              "kind": "Content",
              "text": "<Component> : "
            },
            {
              "kind": "Reference",
              "text": "ChatReturnProps",
              "canonicalReference": "@azure/communication-react!ChatReturnProps:type"
            },
            {
              "kind": "Content",
              "text": "<Component>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ComponentProps",
          "typeParameters": [
            {
              "typeParameterName": "Component",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ComponentStrings:interface",
          "docComment": "/**\n * Strings used by all components exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ComponentStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "ComponentStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#cameraButton:member",
              "docComment": "/**\n * Strings for CameraButton\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraButton: "
                },
                {
                  "kind": "Reference",
                  "text": "CameraButtonStrings",
                  "canonicalReference": "@azure/communication-react!CameraButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameraButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#devicesButton:member",
              "docComment": "/**\n * Strings for DevicesButton\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "devicesButton: "
                },
                {
                  "kind": "Reference",
                  "text": "DevicesButtonStrings",
                  "canonicalReference": "@azure/communication-react!DevicesButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "devicesButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#endCallButton:member",
              "docComment": "/**\n * Strings for EndCallButton\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endCallButton: "
                },
                {
                  "kind": "Reference",
                  "text": "EndCallButtonStrings",
                  "canonicalReference": "@azure/communication-react!EndCallButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "endCallButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#errorBar:member",
              "docComment": "/**\n * Strings for ErroBar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorBar: "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorBarStrings",
                  "canonicalReference": "@azure/communication-react!ErrorBarStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "errorBar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#messageStatusIndicator:member",
              "docComment": "/**\n * Strings for MessageStatusIndicator\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageStatusIndicator: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageStatusIndicatorStrings",
                  "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "messageStatusIndicator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#messageThread:member",
              "docComment": "/**\n * Strings for MessageThread\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageThread: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageThreadStrings",
                  "canonicalReference": "@azure/communication-react!MessageThreadStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "messageThread",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#microphoneButton:member",
              "docComment": "/**\n * Strings for MicrophoneButton\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneButton: "
                },
                {
                  "kind": "Reference",
                  "text": "MicrophoneButtonStrings",
                  "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "microphoneButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#participantItem:member",
              "docComment": "/**\n * Strings for ParticipantItem\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participantItem: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantItemStrings",
                  "canonicalReference": "@azure/communication-react!ParticipantItemStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "participantItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#participantsButton:member",
              "docComment": "/**\n * Strings for ParticipantsButton\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participantsButton: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsButtonStrings",
                  "canonicalReference": "@azure/communication-react!ParticipantsButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "participantsButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#screenShareButton:member",
              "docComment": "/**\n * Strings for ScreenShareButton\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenShareButton: "
                },
                {
                  "kind": "Reference",
                  "text": "ScreenShareButtonStrings",
                  "canonicalReference": "@azure/communication-react!ScreenShareButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "screenShareButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#sendBox:member",
              "docComment": "/**\n * Strings for SendBox\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendBox: "
                },
                {
                  "kind": "Reference",
                  "text": "SendBoxStrings",
                  "canonicalReference": "@azure/communication-react!SendBoxStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sendBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#typingIndicator:member",
              "docComment": "/**\n * Strings for TypingIndicator\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typingIndicator: "
                },
                {
                  "kind": "Reference",
                  "text": "TypingIndicatorStrings",
                  "canonicalReference": "@azure/communication-react!TypingIndicatorStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "typingIndicator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ComponentStrings#videoGallery:member",
              "docComment": "/**\n * Strings for VideoGallery\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "videoGallery: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoGalleryStrings",
                  "canonicalReference": "@azure/communication-react!VideoGalleryStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "videoGallery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_DE_DE:var",
          "docComment": "/**\n * Locale for German (Germany)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_DE_DE: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_DE_DE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_EN_GB:var",
          "docComment": "/**\n * Locale for English (British)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_EN_GB: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_EN_GB",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_EN_US:var",
          "docComment": "/**\n * Locale for English (US)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_EN_US: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_EN_US",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_ES_ES:var",
          "docComment": "/**\n * Locale for Spanish (Spain)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_ES_ES: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_ES_ES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_FR_FR:var",
          "docComment": "/**\n * Locale for French (France)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_FR_FR: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_FR_FR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_IT_IT:var",
          "docComment": "/**\n * Locale for Italian (Italy)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_IT_IT: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_IT_IT",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_JA_JP:var",
          "docComment": "/**\n * Locale for Japanese (Japan)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_JA_JP: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_JA_JP",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_KO_KR:var",
          "docComment": "/**\n * Locale for Korean (South Korea)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_KO_KR: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_KO_KR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_NL_NL:var",
          "docComment": "/**\n * Locale for Dutch (Netherlands)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_NL_NL: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_NL_NL",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_PT_BR:var",
          "docComment": "/**\n * Locale for Portuguese (Brazil)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_PT_BR: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_PT_BR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_RU_RU:var",
          "docComment": "/**\n * Locale for Russian (Russia)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_RU_RU: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_RU_RU",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_TR_TR:var",
          "docComment": "/**\n * Locale for Turkish (Turkey)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_TR_TR: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_TR_TR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_ZH_CN:var",
          "docComment": "/**\n * Locale for Chinese (Mainland China)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_ZH_CN: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_ZH_CN",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_LOCALE_ZH_TW:var",
          "docComment": "/**\n * Locale for Chinese (Taiwan)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_LOCALE_ZH_TW: "
            },
            {
              "kind": "Reference",
              "text": "CompositeLocale",
              "canonicalReference": "@azure/communication-react!CompositeLocale:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_LOCALE_ZH_TW",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!COMPOSITE_ONLY_ICONS:var",
          "docComment": "/**\n * The default set of icons used by the composites directly (i.e. not via the components defined in this library).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COMPOSITE_ONLY_ICONS: "
            },
            {
              "kind": "Reference",
              "text": "CompositeIcons",
              "canonicalReference": "@azure/communication-react!CompositeIcons:type"
            }
          ],
          "releaseTag": "Public",
          "name": "COMPOSITE_ONLY_ICONS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CompositeIcons:type",
          "docComment": "/**\n * Icons that can be overridden in one of the composites exported by this library.\n *\n * See {@link ChatCompositeIcons}, {@link CallCompositeIcons} and {@link CallWithChatCompositeIcons} for more targeted types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CompositeIcons = "
            },
            {
              "kind": "Reference",
              "text": "ChatCompositeIcons",
              "canonicalReference": "@azure/communication-react!ChatCompositeIcons:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CallCompositeIcons",
              "canonicalReference": "@azure/communication-react!CallCompositeIcons:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatCompositeIcons",
              "canonicalReference": "@azure/communication-react!CallWithChatCompositeIcons:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CompositeIcons",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CompositeLocale:interface",
          "docComment": "/**\n * Locale information for all composites exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CompositeLocale "
            }
          ],
          "releaseTag": "Public",
          "name": "CompositeLocale",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CompositeLocale#component:member",
              "docComment": "/**\n * Locale information for the pure Components used by Composites. See {@link communication-react#ComponentLocale}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "component: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentLocale",
                  "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "component",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CompositeLocale#strings:member",
              "docComment": "/**\n * Strings used in composites directly\n *\n * Contrast with {@link CompositeLocale.component}, which contains strings used via the component library.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings: "
                },
                {
                  "kind": "Reference",
                  "text": "CompositeStrings",
                  "canonicalReference": "@azure/communication-react!CompositeStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CompositeStrings:interface",
          "docComment": "/**\n * Strings used in the composites directly.\n *\n * These strings are used by the composites directly, instead of by the contained components.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CompositeStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "CompositeStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CompositeStrings#call:member",
              "docComment": "/**\n * Strings used by {@link CallComposite}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "call: "
                },
                {
                  "kind": "Reference",
                  "text": "CallCompositeStrings",
                  "canonicalReference": "@azure/communication-react!CallCompositeStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "call",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CompositeStrings#callWithChat:member",
              "docComment": "/**\n * Strings used by {@link CallWithChatComposite}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callWithChat: "
                },
                {
                  "kind": "Reference",
                  "text": "CallWithChatCompositeStrings",
                  "canonicalReference": "@azure/communication-react!CallWithChatCompositeStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callWithChat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CompositeStrings#chat:member",
              "docComment": "/**\n * Strings used by {@link ChatComposite}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chat: "
                },
                {
                  "kind": "Reference",
                  "text": "ChatCompositeStrings",
                  "canonicalReference": "@azure/communication-react!ChatCompositeStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "chat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ContentSystemMessage:interface",
          "docComment": "/**\n * A system message with arbitary content.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ContentSystemMessage extends "
            },
            {
              "kind": "Reference",
              "text": "SystemMessageCommon",
              "canonicalReference": "@azure/communication-react!SystemMessageCommon:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ContentSystemMessage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ContentSystemMessage#content:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ContentSystemMessage#systemMessageType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "systemMessageType: "
                },
                {
                  "kind": "Content",
                  "text": "'content'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "systemMessageType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ControlBar:var",
          "docComment": "/**\n * A container for various buttons for call controls.\n *\n * Use with various call control buttons in this library, e.g., {@link CameraButton}, or your own instances of {@link ControlBarButton} directly.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ControlBar: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ControlBarProps",
              "canonicalReference": "@azure/communication-react!ControlBarProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ControlBar",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ControlBarButton:var",
          "docComment": "/**\n * Default button styled for the {@link ControlBar}.\n *\n * Use this component create custom buttons that are styled the same as other buttons provided by the UI Library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ControlBarButton: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonProps",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ControlBarButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ControlBarButtonProps:interface",
          "docComment": "/**\n * Props for {@link ControlBarButton}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ControlBarButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "IButtonProps",
              "canonicalReference": "@fluentui/react!IButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ControlBarButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps#labelKey:member",
              "docComment": "/**\n * Key to use for the Label component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelKey?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "labelKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps#onRenderOffIcon:member",
              "docComment": "/**\n * Icon to render when the button is not checked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderOffIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderOffIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps#onRenderOnIcon:member",
              "docComment": "/**\n * Icon to render when the button is checked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderOnIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderOnIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps#showLabel:member",
              "docComment": "/**\n * Whether the label is displayed or not.\n *\n * @defaultValue\n *\n * `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "ControlBarButtonStrings",
                  "canonicalReference": "@azure/communication-react!ControlBarButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps#styles:member",
              "docComment": "/**\n * Fluent styles, including extensions common to all {@link ControlBarButton}s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "ControlBarButtonStyles",
                  "canonicalReference": "@azure/communication-react!ControlBarButtonStyles:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps#tooltipId:member",
              "docComment": "/**\n * Id to use for the tooltip host.\n *\n * @defaultValue\n *\n * This uses the labelKey and appends -tooltip by default\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ControlBarButtonStrings:interface",
          "docComment": "/**\n * Strings of {@link ControlBarButton} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ControlBarButtonStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "ControlBarButtonStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStrings#label:member",
              "docComment": "/**\n * Label of the button. This supersedes onLabel or offLabel if used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStrings#offLabel:member",
              "docComment": "/**\n * Label of the button shown when the button is not checked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "offLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStrings#onLabel:member",
              "docComment": "/**\n * Label of the button shown when the button is checked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStrings#tooltipContent:member",
              "docComment": "/**\n * Tooltip content of the button. This supersedes tooltipDisabledContent, tooltipOnContent and tooltipOffContent if used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStrings#tooltipDisabledContent:member",
              "docComment": "/**\n * Tooltip content when the button is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipDisabledContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipDisabledContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStrings#tooltipOffContent:member",
              "docComment": "/**\n * Tooltip content when the button is in the unchecked state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipOffContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipOffContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStrings#tooltipOnContent:member",
              "docComment": "/**\n * Tooltip content when the button is in the checked state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipOnContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipOnContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ControlBarButtonStyles:type",
          "docComment": "/**\n * Styles for all {@link ControlBarButton} implementations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ControlBarButtonStyles = "
            },
            {
              "kind": "Reference",
              "text": "IButtonStyles",
              "canonicalReference": "@fluentui/react!IButtonStyles:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ControlBarButtonStyles",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ControlBarLayout:type",
          "docComment": "/**\n * Present layouts for the {@link ControlBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ControlBarLayout = "
            },
            {
              "kind": "Content",
              "text": "'horizontal' | 'vertical' | 'dockedTop' | 'dockedBottom' | 'dockedLeft' | 'dockedRight' | 'floatingTop' | 'floatingBottom' | 'floatingLeft' | 'floatingRight'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ControlBarLayout",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ControlBarProps:interface",
          "docComment": "/**\n * Props for {@link ControlBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ControlBarProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ControlBarProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarProps#children:member",
              "docComment": "/**\n * React Child components.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarProps#layout:member",
              "docComment": "/**\n * Changes the layout of the control bar. Available layouts are `horizontal`, `vertical`, `dockedTop`, `dockedBottom`, `dockedLeft`, `dockedRight`, `floatingTop`, `floatingBottom`, `floatingLeft`, `floatingRight` Defaults to a `horizontal` layout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layout?: "
                },
                {
                  "kind": "Reference",
                  "text": "ControlBarLayout",
                  "canonicalReference": "@azure/communication-react!ControlBarLayout:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "layout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ControlBarProps#styles:member",
              "docComment": "/**\n * Allows users to pass an object containing custom CSS styles.\n *\n * @Example\n * ```\n * <ControlBar styles={{ root: { background: 'blue' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "BaseCustomStyles",
                  "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createAzureCommunicationCallAdapter:var",
          "docComment": "/**\n * Create a {@link CallAdapter} backed by Azure Communication Services.\n *\n * This is the default implementation of {@link CallAdapter} provided by this library.\n *\n * Note: `displayName` can be a maximum of 256 characters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createAzureCommunicationCallAdapter: "
            },
            {
              "kind": "Content",
              "text": "({ userId, displayName, credential, locator }: "
            },
            {
              "kind": "Reference",
              "text": "AzureCommunicationCallAdapterArgs",
              "canonicalReference": "@azure/communication-react!AzureCommunicationCallAdapterArgs:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallAdapter",
              "canonicalReference": "@azure/communication-react!CallAdapter:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "createAzureCommunicationCallAdapter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createAzureCommunicationCallAdapterFromClient:var",
          "docComment": "/**\n * Create a {@link CallAdapter} using the provided {@link StatefulCallClient}.\n *\n * Useful if you want to keep a reference to {@link StatefulCallClient}. Consider using {@link createAzureCommunicationCallAdapter} for a simpler API.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createAzureCommunicationCallAdapterFromClient: "
            },
            {
              "kind": "Content",
              "text": "(callClient: "
            },
            {
              "kind": "Reference",
              "text": "StatefulCallClient",
              "canonicalReference": "@azure/communication-react!StatefulCallClient:interface"
            },
            {
              "kind": "Content",
              "text": ", callAgent: "
            },
            {
              "kind": "Reference",
              "text": "CallAgent",
              "canonicalReference": "@azure/communication-calling!CallAgent:interface"
            },
            {
              "kind": "Content",
              "text": ", locator: "
            },
            {
              "kind": "Reference",
              "text": "CallAdapterLocator",
              "canonicalReference": "@azure/communication-react!CallAdapterLocator:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallAdapter",
              "canonicalReference": "@azure/communication-react!CallAdapter:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "createAzureCommunicationCallAdapterFromClient",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createAzureCommunicationCallWithChatAdapter:var",
          "docComment": "/**\n * Create a CallWithChatAdapter backed by Azure Communication services to plug into the {@link CallWithChatComposite}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createAzureCommunicationCallWithChatAdapter: "
            },
            {
              "kind": "Content",
              "text": "({ userId, displayName, credential, endpoint, locator }: "
            },
            {
              "kind": "Reference",
              "text": "AzureCommunicationCallWithChatAdapterArgs",
              "canonicalReference": "@azure/communication-react!AzureCommunicationCallWithChatAdapterArgs:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapter",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "createAzureCommunicationCallWithChatAdapter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createAzureCommunicationCallWithChatAdapterFromClients:var",
          "docComment": "/**\n * Create a {@link CallWithChatAdapter} using the provided {@link StatefulChatClient} and {@link StatefulCallClient}.\n *\n * Useful if you want to keep a reference to {@link StatefulChatClient} and {@link StatefulCallClient}. Consider using {@link createAzureCommunicationCallWithChatAdapter} for a simpler API.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createAzureCommunicationCallWithChatAdapterFromClients: "
            },
            {
              "kind": "Content",
              "text": "({ callClient, callAgent, callLocator, chatClient, chatThreadClient }: "
            },
            {
              "kind": "Reference",
              "text": "AzureCommunicationCallWithChatAdapterFromClientArgs",
              "canonicalReference": "@azure/communication-react!AzureCommunicationCallWithChatAdapterFromClientArgs:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapter",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "createAzureCommunicationCallWithChatAdapterFromClients",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createAzureCommunicationChatAdapter:var",
          "docComment": "/**\n * Create a {@link ChatAdapter} backed by Azure Communication Services.\n *\n * This is the default implementation of {@link ChatAdapter} provided by this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createAzureCommunicationChatAdapter: "
            },
            {
              "kind": "Content",
              "text": "({ "
            },
            {
              "kind": "Reference",
              "text": "endpoint",
              "canonicalReference": "@azure/communication-react!~__type#endpoint"
            },
            {
              "kind": "Content",
              "text": ": endpointUrl, userId, displayName, credential, threadId }: "
            },
            {
              "kind": "Reference",
              "text": "AzureCommunicationChatAdapterArgs",
              "canonicalReference": "@azure/communication-react!AzureCommunicationChatAdapterArgs:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChatAdapter",
              "canonicalReference": "@azure/communication-react!ChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "createAzureCommunicationChatAdapter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createAzureCommunicationChatAdapterFromClient:var",
          "docComment": "/**\n * Create a {@link ChatAdapter} using the provided {@link StatefulChatClient}.\n *\n * Useful if you want to keep a reference to {@link StatefulChatClient}. Consider using {@link createAzureCommunicationChatAdapter} for a simpler API.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createAzureCommunicationChatAdapterFromClient: "
            },
            {
              "kind": "Content",
              "text": "(chatClient: "
            },
            {
              "kind": "Reference",
              "text": "StatefulChatClient",
              "canonicalReference": "@azure/communication-react!StatefulChatClient:interface"
            },
            {
              "kind": "Content",
              "text": ", chatThreadClient: "
            },
            {
              "kind": "Reference",
              "text": "ChatThreadClient",
              "canonicalReference": "@azure/communication-chat!ChatThreadClient:class"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChatAdapter",
              "canonicalReference": "@azure/communication-react!ChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "createAzureCommunicationChatAdapterFromClient",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createDefaultCallingHandlers:var",
          "docComment": "/**\n * Create the default implementation of {@link CallingHandlers} for teams call.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createDefaultCallingHandlers: "
            },
            {
              "kind": "Content",
              "text": "(callClient: "
            },
            {
              "kind": "Reference",
              "text": "StatefulCallClient",
              "canonicalReference": "@azure/communication-react!StatefulCallClient:interface"
            },
            {
              "kind": "Content",
              "text": ", callAgent: "
            },
            {
              "kind": "Reference",
              "text": "CallAgent",
              "canonicalReference": "@azure/communication-calling!CallAgent:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined, deviceManager: "
            },
            {
              "kind": "Reference",
              "text": "StatefulDeviceManager",
              "canonicalReference": "@azure/communication-react!StatefulDeviceManager:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined, call: "
            },
            {
              "kind": "Reference",
              "text": "Call",
              "canonicalReference": "@azure/communication-calling!Call:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "CallingHandlers",
              "canonicalReference": "@azure/communication-react!CallingHandlers:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "createDefaultCallingHandlers",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createDefaultChatHandlers:var",
          "docComment": "/**\n * Create the default implementation of {@link ChatHandlers}.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * Returned object is memoized to avoid rerenders when used as props for React Components.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createDefaultChatHandlers: "
            },
            {
              "kind": "Content",
              "text": "(chatClient: "
            },
            {
              "kind": "Reference",
              "text": "StatefulChatClient",
              "canonicalReference": "@azure/communication-react!StatefulChatClient:interface"
            },
            {
              "kind": "Content",
              "text": ", chatThreadClient: "
            },
            {
              "kind": "Reference",
              "text": "ChatThreadClient",
              "canonicalReference": "@azure/communication-chat!ChatThreadClient:class"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "ChatHandlers",
              "canonicalReference": "@azure/communication-react!ChatHandlers:type"
            }
          ],
          "releaseTag": "Public",
          "name": "createDefaultChatHandlers",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createStatefulCallClient:var",
          "docComment": "/**\n * Creates a StatefulCallClient {@link StatefulCallClient} by proxying CallClient {@link @azure/communication-calling#CallClient} with ProxyCallClient {@link ProxyCallClient} which then allows access to state in a declarative way.\n *\n * It is important to use the {@link @azure/communication-calling#DeviceManager} and {@link @azure/communication-calling#CallAgent} and {@link @azure/communication-calling#Call} (and etc.) that are obtained from the StatefulCallClient in order for their state changes to be proxied properly.\n *\n * @param args - {@link StatefulCallClientArgs}\n *\n * @param options - {@link StatefulCallClientOptions}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createStatefulCallClient: "
            },
            {
              "kind": "Content",
              "text": "(args: "
            },
            {
              "kind": "Reference",
              "text": "StatefulCallClientArgs",
              "canonicalReference": "@azure/communication-react!StatefulCallClientArgs:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "StatefulCallClientOptions",
              "canonicalReference": "@azure/communication-react!StatefulCallClientOptions:type"
            },
            {
              "kind": "Content",
              "text": " | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "StatefulCallClient",
              "canonicalReference": "@azure/communication-react!StatefulCallClient:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "createStatefulCallClient",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!createStatefulChatClient:var",
          "docComment": "/**\n * Creates a stateful ChatClient {@link StatefulChatClient} by proxying ChatClient {@link @azure/communication-chat#ChatClient} with ProxyChatClient {@link ProxyChatClient} which then allows access to state in a declarative way.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createStatefulChatClient: "
            },
            {
              "kind": "Content",
              "text": "(args: "
            },
            {
              "kind": "Reference",
              "text": "StatefulChatClientArgs",
              "canonicalReference": "@azure/communication-react!StatefulChatClientArgs:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "StatefulChatClientOptions",
              "canonicalReference": "@azure/communication-react!StatefulChatClientOptions:type"
            },
            {
              "kind": "Content",
              "text": " | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "StatefulChatClient",
              "canonicalReference": "@azure/communication-react!StatefulChatClient:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "createStatefulChatClient",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CreateVideoStreamViewResult:interface",
          "docComment": "/**\n * Object returned after creating a local or remote VideoStream. This contains helper functions to manipulate the render of the stream.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CreateVideoStreamViewResult "
            }
          ],
          "releaseTag": "Public",
          "name": "CreateVideoStreamViewResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CreateVideoStreamViewResult#view:member",
              "docComment": "/**\n * View handle of the rendered video stream\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "view: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        updateScalingMode: (scalingMode: "
                },
                {
                  "kind": "Reference",
                  "text": "ViewScalingMode",
                  "canonicalReference": "@azure/communication-react!ViewScalingMode:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "view",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CreateViewResult:type",
          "docComment": "/**\n * Return result from {@link StatefulCallClient.createView}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CreateViewResult = "
            },
            {
              "kind": "Content",
              "text": "{\n    renderer: "
            },
            {
              "kind": "Reference",
              "text": "VideoStreamRenderer",
              "canonicalReference": "@azure/communication-calling!VideoStreamRenderer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    view: "
            },
            {
              "kind": "Reference",
              "text": "VideoStreamRendererView",
              "canonicalReference": "@azure/communication-calling!VideoStreamRendererView:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CreateViewResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!CustomAvatarOptions:type",
          "docComment": "/**\n * Options that can be injected into the `onRender` function for customizing an Avatar (`Persona`) component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CustomAvatarOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    coinSize?: number;\n    hidePersonaDetails?: boolean;\n    initialsTextColor?: string;\n    noVideoAvailableAriaLabel?: string;\n    presence?: "
            },
            {
              "kind": "Reference",
              "text": "PersonaPresence",
              "canonicalReference": "@fluentui/react!PersonaPresence:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    size?: "
            },
            {
              "kind": "Reference",
              "text": "PersonaSize",
              "canonicalReference": "@fluentui/react!PersonaSize:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    styles?: "
            },
            {
              "kind": "Reference",
              "text": "IStyleFunctionOrObject",
              "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaStyleProps",
              "canonicalReference": "@fluentui/react!IPersonaStyleProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IPersonaStyles",
              "canonicalReference": "@fluentui/react!IPersonaStyles:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    text?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomAvatarOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!CustomMessage:interface",
          "docComment": "/**\n * A custom message type.\n *\n * Custom messages are not rendered by default, but applications can provide custom renderers for them.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CustomMessage extends "
            },
            {
              "kind": "Reference",
              "text": "MessageCommon",
              "canonicalReference": "@azure/communication-react!MessageCommon:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CustomMessage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CustomMessage#content:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!CustomMessage#messageType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageType: "
                },
                {
                  "kind": "Content",
                  "text": "'custom'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "messageType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!darkTheme:var",
          "docComment": "/**\n * Preset dark theme for components exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "darkTheme: "
            },
            {
              "kind": "Reference",
              "text": "PartialTheme",
              "canonicalReference": "@fluentui/theme!PartialTheme:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CallingTheme",
              "canonicalReference": "@azure/communication-react!CallingTheme:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "darkTheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!DEFAULT_COMPONENT_ICONS:var",
          "docComment": "/**\n * The default set of icons that are available to use in the UI components.\n *\n * @remark Icons used only in the composites are available in {@link DEFAULT_COMPOSITE_ICONS}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_COMPONENT_ICONS: "
            },
            {
              "kind": "Content",
              "text": "{\n    ChatMessageOptions: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonCameraOff: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonCameraOn: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonEndCall: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonMicOff: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonMicOn: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonOptions: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonParticipants: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonScreenShareStart: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonScreenShareStop: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    EditBoxCancel: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    EditBoxSubmit: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallCameraAccessDenied: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallCameraAlreadyInUse: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallLocalVideoFreeze: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMacOsCameraAccessDenied: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMacOsMicrophoneAccessDenied: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneAccessDenied: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneMutedBySystem: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneUnmutedBySystem: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNetworkQualityLow: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNoMicrophoneFound: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNoSpeakerFound: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarClear: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallVideoRecoveredBySystem: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallVideoStoppedBySystem: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    HorizontalGalleryLeftButton: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    HorizontalGalleryRightButton: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageDelivered: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageEdit: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageFailed: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageRemove: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageResend: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageSeen: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageSending: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsCamera: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsMic: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsSpeaker: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemMicOff: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptions: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptionsHovered: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemScreenShareStart: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    SendBoxSend: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    SendBoxSendHovered: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    VideoTileMicOff: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "DEFAULT_COMPONENT_ICONS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 92
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!DEFAULT_COMPOSITE_ICONS:var",
          "docComment": "/**\n * The default set of icons that are available to used in the Composites.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_COMPOSITE_ICONS: "
            },
            {
              "kind": "Content",
              "text": "{\n    EditBoxCancel: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    EditBoxSubmit: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageDelivered: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageEdit: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageFailed: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageRemove: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageSeen: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageSending: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptions: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemOptionsHovered: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    SendBoxSend: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    SendBoxSendHovered: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonCameraOff: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonCameraOn: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonEndCall: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonMicOff: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonMicOn: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonOptions: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonParticipants: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonScreenShareStart: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ControlButtonScreenShareStop: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallCameraAccessDenied: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallCameraAlreadyInUse: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallLocalVideoFreeze: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMacOsCameraAccessDenied: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMacOsMicrophoneAccessDenied: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneAccessDenied: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneMutedBySystem: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallMicrophoneUnmutedBySystem: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNetworkQualityLow: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNoMicrophoneFound: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallNoSpeakerFound: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarClear: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    HorizontalGalleryLeftButton: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    HorizontalGalleryRightButton: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LobbyScreenConnectingToCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    LobbyScreenWaitingToBeAdmitted?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    LocalDeviceSettingsCamera?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    LocalDeviceSettingsMic?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    LocalDeviceSettingsSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    LocalPreviewPlaceholder?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    Muted?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    NetworkReconnectIcon?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    NoticePageAccessDeniedTeamsMeeting?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    NoticePageJoinCallFailedDueToNoNetwork?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    NoticePageLeftCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    NoticePageRemovedFromCall?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    OptionsCamera: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsMic: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    OptionsSpeaker: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemMicOff: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ParticipantItemScreenShareStart: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    VideoTileMicOff: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalCameraSwitch?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    ChevronLeft?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    ControlBarChatButtonActive?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    ControlBarChatButtonInactive?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    ControlBarPeopleButton?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    Link?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    MoreDrawerMicrophones?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    MoreDrawerPeople?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    MoreDrawerSelectedMicrophone?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    MoreDrawerSelectedSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    MoreDrawerSpeakers?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    SendBoxAttachFile?: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    ChatMessageOptions: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallVideoRecoveredBySystem: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    ErrorBarCallVideoStoppedBySystem: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    MessageResend: "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "DEFAULT_COMPOSITE_ICONS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 140
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!DeviceManagerState:type",
          "docComment": "/**\n * This type is meant to encapsulate all the state inside {@link @azure/communication-calling#DeviceManager}. For optional parameters they may not be available until permission is granted by the user. The cameras, microphones, speakers, and deviceAccess states will be empty until the corresponding {@link @azure/communication-calling#DeviceManager}'s getCameras, getMicrophones, getSpeakers, and askDevicePermission APIs are called and completed.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeviceManagerState = "
            },
            {
              "kind": "Content",
              "text": "{\n    isSpeakerSelectionAvailable: boolean;\n    selectedMicrophone?: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    selectedSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    selectedCamera?: "
            },
            {
              "kind": "Reference",
              "text": "VideoDeviceInfo",
              "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    cameras: "
            },
            {
              "kind": "Reference",
              "text": "VideoDeviceInfo",
              "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    microphones: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    speakers: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    deviceAccess?: "
            },
            {
              "kind": "Reference",
              "text": "DeviceAccess",
              "canonicalReference": "@azure/communication-calling!DeviceAccess:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    unparentedViews: "
            },
            {
              "kind": "Reference",
              "text": "LocalVideoStreamState",
              "canonicalReference": "@azure/communication-react!LocalVideoStreamState:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeviceManagerState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!DevicesButton:var",
          "docComment": "/**\n * A button to open a menu that controls device options.\n *\n * Can be used with {@link ControlBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DevicesButton: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "DevicesButtonProps",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "DevicesButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!DevicesButtonContextualMenuStyles:interface",
          "docComment": "/**\n * Styles for the {@link DevicesButton} menu.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DevicesButtonContextualMenuStyles extends "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuStyles",
              "canonicalReference": "@fluentui/react!IContextualMenuStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DevicesButtonContextualMenuStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonContextualMenuStyles#menuItemStyles:member",
              "docComment": "/**\n * Styles for the items inside the {@link DevicesButton} button menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuItemStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemStyles",
                  "canonicalReference": "@fluentui/react!IContextualMenuItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menuItemStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!DevicesButtonProps:interface",
          "docComment": "/**\n * Props for {@link DevicesButton}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DevicesButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonProps",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DevicesButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#cameras:member",
              "docComment": "/**\n * Available cameras for selection\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameras?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cameras",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#microphones:member",
              "docComment": "/**\n * Available microphones for selection\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphones?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "microphones",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#onSelectCamera:member",
              "docComment": "/**\n * Callback when a camera is selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectCamera?: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSelectCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#onSelectMicrophone:member",
              "docComment": "/**\n * Callback when a microphone is selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectMicrophone?: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSelectMicrophone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#onSelectSpeaker:member",
              "docComment": "/**\n * Speaker when a speaker is selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectSpeaker?: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSelectSpeaker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#selectedCamera:member",
              "docComment": "/**\n * Camera that is shown as currently selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedCamera?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectedCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#selectedMicrophone:member",
              "docComment": "/**\n * Microphone that is shown as currently selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedMicrophone?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectedMicrophone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#selectedSpeaker:member",
              "docComment": "/**\n * Speaker that is shown as currently selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedSpeaker?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectedSpeaker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#speakers:member",
              "docComment": "/**\n * Available speakers for selection\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "speakers?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "speakers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "DevicesButtonStrings",
                  "canonicalReference": "@azure/communication-react!DevicesButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonProps#styles:member",
              "docComment": "/**\n * Option to increase the touch targets of the button flyout menu items from 36px to 48px. Recommended for mobile devices.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "DevicesButtonStyles",
                  "canonicalReference": "@azure/communication-react!DevicesButtonStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!DevicesButtonSelector:type",
          "docComment": "/**\n * Selector type for {@link DevicesButton} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DevicesButtonSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "CallingBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!CallingBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    microphones: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    speakers: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    cameras: "
            },
            {
              "kind": "Reference",
              "text": "VideoDeviceInfo",
              "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    selectedMicrophone?: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    selectedSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    selectedCamera?: "
            },
            {
              "kind": "Reference",
              "text": "VideoDeviceInfo",
              "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DevicesButtonSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!DevicesButtonStrings:interface",
          "docComment": "/**\n * Strings of {@link DevicesButton} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DevicesButtonStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "DevicesButtonStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonStrings#cameraMenuTitle:member",
              "docComment": "/**\n * Title of camera menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraMenuTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameraMenuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonStrings#cameraMenuTooltip:member",
              "docComment": "/**\n * Tooltip of camera menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameraMenuTooltip: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cameraMenuTooltip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonStrings#label:member",
              "docComment": "/**\n * Label of button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonStrings#microphoneMenuTitle:member",
              "docComment": "/**\n * Title of microphone menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneMenuTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "microphoneMenuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonStrings#microphoneMenuTooltip:member",
              "docComment": "/**\n * Tooltip of microphone menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneMenuTooltip: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "microphoneMenuTooltip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonStrings#speakerMenuTitle:member",
              "docComment": "/**\n * Title of speaker menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "speakerMenuTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "speakerMenuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonStrings#speakerMenuTooltip:member",
              "docComment": "/**\n * Tooltip of speaker menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "speakerMenuTooltip: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "speakerMenuTooltip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonStrings#tooltipContent:member",
              "docComment": "/**\n * Button tooltip content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!DevicesButtonStyles:interface",
          "docComment": "/**\n * Styles for the Devices button menu items.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DevicesButtonStyles extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonStyles",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStyles:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DevicesButtonStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DevicesButtonStyles#menuStyles:member",
              "docComment": "/**\n * Styles for the {@link DevicesButton} menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "DevicesButtonContextualMenuStyles",
                  "canonicalReference": "@azure/communication-react!DevicesButtonContextualMenuStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menuStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!DiagnosticChangedEventListner:type",
          "docComment": "/**\n * Callback for {@link CallAdapterSubscribers} 'diagnosticChanged' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DiagnosticChangedEventListner = "
            },
            {
              "kind": "Content",
              "text": "(event: "
            },
            {
              "kind": "Reference",
              "text": "MediaDiagnosticChangedEvent",
              "canonicalReference": "@azure/communication-react!MediaDiagnosticChangedEvent:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "NetworkDiagnosticChangedEvent",
              "canonicalReference": "@azure/communication-react!NetworkDiagnosticChangedEvent:type"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DiagnosticChangedEventListner",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!DiagnosticsCallFeatureState:interface",
          "docComment": "/**\n * State only proxy for {@link @azure/communication-calling#DiagnosticsCallFeature}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DiagnosticsCallFeatureState "
            }
          ],
          "releaseTag": "Public",
          "name": "DiagnosticsCallFeatureState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DiagnosticsCallFeatureState#media:member",
              "docComment": "/**\n * Stores diagnostics related to media quality.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "media: "
                },
                {
                  "kind": "Reference",
                  "text": "MediaDiagnosticsState",
                  "canonicalReference": "@azure/communication-react!MediaDiagnosticsState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "media",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!DiagnosticsCallFeatureState#network:member",
              "docComment": "/**\n * Stores diagnostics related to network conditions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "network: "
                },
                {
                  "kind": "Reference",
                  "text": "NetworkDiagnosticsState",
                  "canonicalReference": "@azure/communication-react!NetworkDiagnosticsState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "network",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!DisplayNameChangedListener:type",
          "docComment": "/**\n * Callback for {@link CallAdapterSubscribers} 'displayNameChanged' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DisplayNameChangedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    participantId: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationIdentifierKind",
              "canonicalReference": "@azure/communication-common!CommunicationIdentifierKind:type"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DisplayNameChangedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!Disposable:interface",
          "docComment": "/**\n * Functionality for correctly disposing a Composite.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Disposable "
            }
          ],
          "releaseTag": "Public",
          "name": "Disposable",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!Disposable#dispose:member(1)",
              "docComment": "/**\n * Dispose of the Composite\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!EmptySelector:type",
          "docComment": "/**\n * A type for trivial selectors that return no data.\n *\n * Used as a default return value if {@link usePropsFor} is called for a component that requires no data.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EmptySelector = "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, never>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EmptySelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!EndCallButton:var",
          "docComment": "/**\n * A button to end an ongoing call.\n *\n * Can be used with {@link ControlBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "EndCallButton: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "EndCallButtonProps",
              "canonicalReference": "@azure/communication-react!EndCallButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "EndCallButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!EndCallButtonProps:interface",
          "docComment": "/**\n * Props for {@link EndCallButton}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EndCallButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonProps",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EndCallButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!EndCallButtonProps#onHangUp:member",
              "docComment": "/**\n * Utility property for using this component with `communication react eventHandlers`. Maps directly to the `onClick` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onHangUp?: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onHangUp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!EndCallButtonProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "EndCallButtonStrings",
                  "canonicalReference": "@azure/communication-react!EndCallButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!EndCallButtonStrings:interface",
          "docComment": "/**\n * Strings of {@link EndCallButton} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EndCallButtonStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "EndCallButtonStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!EndCallButtonStrings#label:member",
              "docComment": "/**\n * Label of button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!EndCallButtonStrings#tooltipContent:member",
              "docComment": "/**\n * Tooltip content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ErrorBar:var",
          "docComment": "/**\n * A component to show error messages on the UI. All strings that can be shown are accepted as the {@link ErrorBarProps.strings} so that they can be localized. Active errors are selected by {@link ErrorBarProps.activeErrorMessages}.\n *\n * This component internally tracks dismissed by the user. * Errors that have an associated timestamp: The error is shown on the UI again if it occurs after being dismissed. * Errors that do not have a timestamp: The error is dismissed until it disappears from the props. If the error recurs, it is shown in the UI.\n *\n * Uses {@link @fluentui/react#MessageBar} UI element.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ErrorBar: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ErrorBarProps",
              "canonicalReference": "@azure/communication-react!ErrorBarProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ErrorBar",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ErrorBarProps:interface",
          "docComment": "/**\n * Props for {@link ErrorBar}.\n *\n * In addition to the following, {@link ErrorBar} forwards all {@link @fluentui/react#IMessageBarProps} to the underlying {@link @fluentui/react#MessageBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ErrorBarProps extends "
            },
            {
              "kind": "Reference",
              "text": "IMessageBarProps",
              "canonicalReference": "@fluentui/react!IMessageBarProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ErrorBarProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarProps#activeErrorMessages:member",
              "docComment": "/**\n * Currently active errors.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activeErrorMessages: "
                },
                {
                  "kind": "Reference",
                  "text": "ActiveErrorMessage",
                  "canonicalReference": "@azure/communication-react!ActiveErrorMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "activeErrorMessages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarProps#strings:member",
              "docComment": "/**\n * Strings shown on the UI on errors.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "ErrorBarStrings",
                  "canonicalReference": "@azure/communication-react!ErrorBarStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ErrorBarStrings:interface",
          "docComment": "/**\n * All strings that may be shown on the UI in the {@link ErrorBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ErrorBarStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "ErrorBarStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#accessDenied:member",
              "docComment": "/**\n * User does not have access to the Chat service. This usually means that either the Azure Communication Services endpiont or the token provided are incorrect.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessDenied: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accessDenied",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callCameraAccessDenied:member",
              "docComment": "/**\n * Message shown when camera can be enumerated but access is blocked by the system.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callCameraAccessDenied: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callCameraAccessDenied",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callCameraAlreadyInUse:member",
              "docComment": "/**\n * Message shown when local video fails to start because camera is already in use by another applciation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callCameraAlreadyInUse: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callCameraAlreadyInUse",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callLocalVideoFreeze:member",
              "docComment": "/**\n * Message shown when poor network causes local video stream to be frozen.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callLocalVideoFreeze: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callLocalVideoFreeze",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callMacOsCameraAccessDenied:member",
              "docComment": "/**\n * Mac OS specific message shown when system denies access to camera.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callMacOsCameraAccessDenied: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callMacOsCameraAccessDenied",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callMacOsMicrophoneAccessDenied:member",
              "docComment": "/**\n * Mac OS specific message shown when microphone can be enumerated but access is blocked by the system.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callMacOsMicrophoneAccessDenied: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callMacOsMicrophoneAccessDenied",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callMacOsScreenShareAccessDenied:member",
              "docComment": "/**\n * Mac OS specific message shown when system denies sharing local screen on a call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callMacOsScreenShareAccessDenied: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callMacOsScreenShareAccessDenied",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callMicrophoneAccessDenied:member",
              "docComment": "/**\n * Message shown when microphone can be enumerated but access is blocked by the system.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callMicrophoneAccessDenied: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callMicrophoneAccessDenied",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callMicrophoneMutedBySystem:member",
              "docComment": "/**\n * Message shown when microphone is muted by the system (not by local or remote participants)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callMicrophoneMutedBySystem: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callMicrophoneMutedBySystem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callMicrophoneUnmutedBySystem:member",
              "docComment": "/**\n * Message shown when microphone is unmuted by the system (not by local or remote participants). This typically occurs if the system recovers from an unexpected mute.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callMicrophoneUnmutedBySystem: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callMicrophoneUnmutedBySystem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callNetworkQualityLow:member",
              "docComment": "/**\n * Message shown when poor network quality is detected during a call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callNetworkQualityLow: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callNetworkQualityLow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callNoMicrophoneFound:member",
              "docComment": "/**\n * Message shown on failure to detect audio input devices.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callNoMicrophoneFound: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callNoMicrophoneFound",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callNoSpeakerFound:member",
              "docComment": "/**\n * Message shown on failure to detect audio output devices.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callNoSpeakerFound: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callNoSpeakerFound",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callVideoRecoveredBySystem:member",
              "docComment": "/**\n * Message shown when local video was recovered by the system (not by the local participant)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callVideoRecoveredBySystem: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callVideoRecoveredBySystem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#callVideoStoppedBySystem:member",
              "docComment": "/**\n * Message shown when local video is stopped by the system (not by local or remote participants)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callVideoStoppedBySystem: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callVideoStoppedBySystem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#dismissButtonAriaLabel:member",
              "docComment": "/**\n * Dimiss errorbar button aria label read by screen reader accessibility tools\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dismissButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#failedToJoinCallGeneric:member",
              "docComment": "/**\n * An error message when joining a call fails.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedToJoinCallGeneric?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "failedToJoinCallGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#failedToJoinCallInvalidMeetingLink:member",
              "docComment": "/**\n * An error message when joining a call fails specifically due to an invalid meeting link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedToJoinCallInvalidMeetingLink?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "failedToJoinCallInvalidMeetingLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#muteGeneric:member",
              "docComment": "/**\n * A generic message when muting microphone fails.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "muteGeneric: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "muteGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#sendMessageGeneric:member",
              "docComment": "/**\n * A generic message when sending message fails. Prefer more specific error strings when possible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendMessageGeneric: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sendMessageGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#sendMessageNotInChatThread:member",
              "docComment": "/**\n * Sending message failed because user is no longer on the thread.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendMessageNotInChatThread: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sendMessageNotInChatThread",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#startScreenShareGeneric:member",
              "docComment": "/**\n * A generic message when starting screenshare fails.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startScreenShareGeneric: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "startScreenShareGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#startVideoGeneric:member",
              "docComment": "/**\n * A generic message when starting video fails.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startVideoGeneric: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "startVideoGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#stopScreenShareGeneric:member",
              "docComment": "/**\n * A generic message when stopping screenshare fails.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopScreenShareGeneric: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stopScreenShareGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#stopVideoGeneric:member",
              "docComment": "/**\n * A generic message when starting video fails.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopVideoGeneric: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stopVideoGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#unableToReachChatService:member",
              "docComment": "/**\n * Unable to reach Chat service.\n *\n * This can mean: - Incorrect Azure Communication Services endpoint was provided. - User's network connection is down.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unableToReachChatService: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "unableToReachChatService",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#unmuteGeneric:member",
              "docComment": "/**\n * A generic message when unmuting microphone fails.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unmuteGeneric: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "unmuteGeneric",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings#userNotInChatThread:member",
              "docComment": "/**\n * User is no longer on the thread.\n *\n * See also: {@link ErrorBarStrings.sendMessageNotInChatThread} for a more specific error.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userNotInChatThread: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "userNotInChatThread",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ErrorType:type",
          "docComment": "/**\n * All errors that can be shown in the {@link ErrorBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ErrorType = "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "ErrorBarStrings",
              "canonicalReference": "@azure/communication-react!ErrorBarStrings:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ErrorType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!FluentThemeProvider:var",
          "docComment": "/**\n * Provider to apply a Fluent theme across this library's react components.\n *\n * @remarks\n *\n * Components in this library are composed primarily from [Fluent UI](https://developer.microsoft.com/fluentui#/controls/web), controls, and also from [Fluent React Northstar](https://fluentsite.z22.web.core.windows.net/0.53.0) controls. This provider handles applying any theme provided to both the underlying Fluent UI controls, as well as the Fluent React Northstar controls.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FluentThemeProvider: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "FluentThemeProviderProps",
              "canonicalReference": "@azure/communication-react!FluentThemeProviderProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "FluentThemeProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!FluentThemeProviderProps:interface",
          "docComment": "/**\n * Props for {@link FluentThemeProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FluentThemeProviderProps "
            }
          ],
          "releaseTag": "Public",
          "name": "FluentThemeProviderProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!FluentThemeProviderProps#children:member",
              "docComment": "/**\n * Children to be themed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!FluentThemeProviderProps#fluentTheme:member",
              "docComment": "/**\n * Theme for components. Defaults to a light theme if not provided.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fluentTheme?: "
                },
                {
                  "kind": "Reference",
                  "text": "PartialTheme",
                  "canonicalReference": "@fluentui/theme!PartialTheme:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@fluentui/theme!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fluentTheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!FluentThemeProviderProps#rtl:member",
              "docComment": "/**\n * Whether components are displayed right-to-left\n *\n * @defaultValue\n *\n * `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rtl?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rtl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!fromFlatCommunicationIdentifier:var",
          "docComment": "/**\n * Reverse operation of {@link toFlatCommunicationIdentifier}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "fromFlatCommunicationIdentifier: "
            },
            {
              "kind": "Content",
              "text": "(id: string) => "
            },
            {
              "kind": "Reference",
              "text": "CommunicationIdentifier",
              "canonicalReference": "@azure/communication-common!CommunicationIdentifier:type"
            }
          ],
          "releaseTag": "Public",
          "name": "fromFlatCommunicationIdentifier",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!GetCallingSelector:type",
          "docComment": "/**\n * Specific type of the selector applicable to a given Component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type GetSelector<Component extends "
            },
            {
              "kind": "Content",
              "text": "(props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "VideoGallery",
              "canonicalReference": "@azure/communication-react!VideoGallery:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "VideoGallerySelector",
              "canonicalReference": "@azure/communication-react!VideoGallerySelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "DevicesButton",
              "canonicalReference": "@azure/communication-react!DevicesButton:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "DevicesButtonSelector",
              "canonicalReference": "@azure/communication-react!DevicesButtonSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "MicrophoneButton",
              "canonicalReference": "@azure/communication-react!MicrophoneButton:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "MicrophoneButtonSelector",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "CameraButton",
              "canonicalReference": "@azure/communication-react!CameraButton:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "CameraButtonSelector",
              "canonicalReference": "@azure/communication-react!CameraButtonSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "ScreenShareButton",
              "canonicalReference": "@azure/communication-react!ScreenShareButton:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "ScreenShareButtonSelector",
              "canonicalReference": "@azure/communication-react!ScreenShareButtonSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "ParticipantList",
              "canonicalReference": "@azure/communication-react!ParticipantList:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "ParticipantListSelector",
              "canonicalReference": "@azure/communication-react!ParticipantListSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "ParticipantsButton",
              "canonicalReference": "@azure/communication-react!ParticipantsButton:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "ParticipantsButtonSelector",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "EndCallButton",
              "canonicalReference": "@azure/communication-react!EndCallButton:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "EmptySelector",
              "canonicalReference": "@azure/communication-react!EmptySelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "ErrorBar",
              "canonicalReference": "@azure/communication-react!ErrorBar:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "ErrorBarSelector",
              "canonicalReference": "@azure/communication-react!ErrorBarSelector:type"
            },
            {
              "kind": "Content",
              "text": " : undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GetCallingSelector",
          "typeParameters": [
            {
              "typeParameterName": "Component",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 59
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!getCallingSelector:var",
          "docComment": "/**\n * Get the selector for a specified component.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getSelector: "
            },
            {
              "kind": "Content",
              "text": "<Component extends (props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined>(component: Component) => "
            },
            {
              "kind": "Reference",
              "text": "GetSelector",
              "canonicalReference": "@azure/communication-react!GetSelector:type"
            },
            {
              "kind": "Content",
              "text": "<Component>"
            }
          ],
          "releaseTag": "Public",
          "name": "getCallingSelector",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!GetChatSelector:type",
          "docComment": "/**\n * Specific type of the selector applicable to a given Component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type GetSelector<Component extends "
            },
            {
              "kind": "Content",
              "text": "(props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "SendBox",
              "canonicalReference": "@azure/communication-react!SendBox:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "SendBoxSelector",
              "canonicalReference": "@azure/communication-react!SendBoxSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "MessageThread",
              "canonicalReference": "@azure/communication-react!MessageThread:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "MessageThreadSelector",
              "canonicalReference": "@azure/communication-react!MessageThreadSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "TypingIndicator",
              "canonicalReference": "@azure/communication-react!TypingIndicator:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "TypingIndicatorSelector",
              "canonicalReference": "@azure/communication-react!TypingIndicatorSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "ParticipantList",
              "canonicalReference": "@azure/communication-react!ParticipantList:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "ChatParticipantListSelector",
              "canonicalReference": "@azure/communication-react!ChatParticipantListSelector:type"
            },
            {
              "kind": "Content",
              "text": " : "
            },
            {
              "kind": "Reference",
              "text": "AreEqual",
              "canonicalReference": "@azure/communication-react!AreEqual:type"
            },
            {
              "kind": "Content",
              "text": "<Component, typeof "
            },
            {
              "kind": "Reference",
              "text": "ErrorBar",
              "canonicalReference": "@azure/communication-react!ErrorBar:var"
            },
            {
              "kind": "Content",
              "text": "> extends true ? "
            },
            {
              "kind": "Reference",
              "text": "ErrorBarSelector",
              "canonicalReference": "@azure/communication-react!ErrorBarSelector:type"
            },
            {
              "kind": "Content",
              "text": " : undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GetChatSelector",
          "typeParameters": [
            {
              "typeParameterName": "Component",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 35
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!getChatSelector:var",
          "docComment": "/**\n * Get the selector for a specified component.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getSelector: "
            },
            {
              "kind": "Content",
              "text": "<Component extends (props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined>(component: Component) => "
            },
            {
              "kind": "Reference",
              "text": "GetSelector",
              "canonicalReference": "@azure/communication-react!GetSelector:type"
            },
            {
              "kind": "Content",
              "text": "<Component>"
            }
          ],
          "releaseTag": "Public",
          "name": "getChatSelector",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!GridLayout:var",
          "docComment": "/**\n * A component to lay out audio / video participants tiles in a call.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GridLayout: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "GridLayoutProps",
              "canonicalReference": "@azure/communication-react!GridLayoutProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "GridLayout",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!GridLayoutProps:interface",
          "docComment": "/**\n * Props for {@link GridLayout}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GridLayoutProps "
            }
          ],
          "releaseTag": "Public",
          "name": "GridLayoutProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!GridLayoutProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!GridLayoutProps#styles:member",
              "docComment": "/**\n * Allows users to pass in an object contains custom CSS styles.\n *\n * @Example\n * ```\n * <GridLayout styles={{ root: { background: 'blue' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "BaseCustomStyles",
                  "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!GridLayoutStyles:interface",
          "docComment": "/**\n * {@link GridLayout} Component Styles.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GridLayoutStyles extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCustomStyles",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "GridLayoutStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!GridLayoutStyles#children:member",
              "docComment": "/**\n * Styles for each child of {@link GridLayout}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!HorizontalGalleryStyles:interface",
          "docComment": "/**\n * {@link HorizontalGallery} Component Styles.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HorizontalGalleryStyles extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCustomStyles",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "HorizontalGalleryStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!HorizontalGalleryStyles#children:member",
              "docComment": "/**\n * Styles for each child of {@link HorizontalGallery}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!HorizontalGalleryStyles#nextButton:member",
              "docComment": "/**\n * Styles for navigation button to go to next page\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextButton?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "nextButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!HorizontalGalleryStyles#previousButton:member",
              "docComment": "/**\n * Styles for navigation button to go to previous page\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "previousButton?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "previousButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!IncomingCallState:interface",
          "docComment": "/**\n * State only version of {@link @azure/communication-calling#IncomingCall}. {@link StatefulCallClient} will automatically detect incoming calls and add their state to the state exposed by {@link StatefulCallClient}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IncomingCallState "
            }
          ],
          "releaseTag": "Public",
          "name": "IncomingCallState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!IncomingCallState#callEndReason:member",
              "docComment": "/**\n * Set to the state returned by 'callEnded' event on {@link @azure/communication-calling#IncomingCall} when received. This property is added by the stateful layer and is not a proxy of SDK state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callEndReason?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallEndReason",
                  "canonicalReference": "@azure/communication-calling!CallEndReason:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "callEndReason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!IncomingCallState#callerInfo:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#IncomingCall.callerInfo}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callerInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "CallerInfo",
                  "canonicalReference": "@azure/communication-calling!CallerInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callerInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!IncomingCallState#endTime:member",
              "docComment": "/**\n * Stores the local date when the call ended on the client. This property is added by the stateful layer and is not a proxy of SDK state. It is undefined if the call is not ended yet.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endTime?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "endTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!IncomingCallState#id:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#IncomingCall.id}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!IncomingCallState#startTime:member",
              "docComment": "/**\n * Stores the local date when the call started on the client. This property is added by the stateful layer and is not a proxy of SDK state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startTime: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "startTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!IsLocalScreenSharingActiveChangedListener:type",
          "docComment": "/**\n * Callback for {@link CallAdapterSubscribers} 'isLocalScreenSharingActiveChanged' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IsLocalScreenSharingActiveChangedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    isScreenSharingOn: boolean;\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IsLocalScreenSharingActiveChangedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!IsMutedChangedListener:type",
          "docComment": "/**\n * Callback for {@link CallAdapterSubscribers} 'isMuted' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IsMutedChangedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    identifier: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationIdentifierKind",
              "canonicalReference": "@azure/communication-common!CommunicationIdentifierKind:type"
            },
            {
              "kind": "Content",
              "text": ";\n    isMuted: boolean;\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IsMutedChangedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!IsSpeakingChangedListener:type",
          "docComment": "/**\n * Callback for {@link CallAdapterSubscribers} 'isSpeakingChanged' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IsSpeakingChangedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    identifier: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationIdentifierKind",
              "canonicalReference": "@azure/communication-common!CommunicationIdentifierKind:type"
            },
            {
              "kind": "Content",
              "text": ";\n    isSpeaking: boolean;\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IsSpeakingChangedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!JumpToNewMessageButtonProps:interface",
          "docComment": "/**\n * Arguments for {@link MessageThreadProps.onRenderJumpToNewMessageButton}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JumpToNewMessageButtonProps "
            }
          ],
          "releaseTag": "Public",
          "name": "JumpToNewMessageButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!JumpToNewMessageButtonProps#onClick:member",
              "docComment": "/**\n * Callback for when button is clicked\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!JumpToNewMessageButtonProps#text:member",
              "docComment": "/**\n * String for button text\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!lightTheme:var",
          "docComment": "/**\n * Preset light theme for components exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "lightTheme: "
            },
            {
              "kind": "Reference",
              "text": "PartialTheme",
              "canonicalReference": "@fluentui/theme!PartialTheme:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CallingTheme",
              "canonicalReference": "@azure/communication-react!CallingTheme:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "lightTheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!LoadingState:type",
          "docComment": "/**\n * Whether the stream is loading or not.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LoadingState = "
            },
            {
              "kind": "Content",
              "text": "'loading' | 'none'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LoadingState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!LocalizationProvider:var",
          "docComment": "/**\n * Provider to provide localized strings for this library's react components.\n *\n * @remarks\n *\n * Components will be provided localized strings in English (US) by default if this provider is not used.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LocalizationProvider: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "LocalizationProviderProps",
              "canonicalReference": "@azure/communication-react!LocalizationProviderProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "LocalizationProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!LocalizationProviderProps:type",
          "docComment": "/**\n * Props for {@link LocalizationProvider}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LocalizationProviderProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    locale: "
            },
            {
              "kind": "Reference",
              "text": "ComponentLocale",
              "canonicalReference": "@azure/communication-react!ComponentLocale:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    children: "
            },
            {
              "kind": "Reference",
              "text": "React.ReactNode",
              "canonicalReference": "@types/react!~React.ReactNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LocalizationProviderProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!LocalVideoCameraCycleButtonProps:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LocalVideoCameraCycleButtonProps "
            }
          ],
          "releaseTag": "Public",
          "name": "LocalVideoCameraCycleButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!LocalVideoCameraCycleButtonProps#ariaDescription:member",
              "docComment": "/**\n * description for local video camera switcher\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ariaDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!LocalVideoCameraCycleButtonProps#cameras:member",
              "docComment": "/**\n * Array of cameras available to the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cameras?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cameras",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!LocalVideoCameraCycleButtonProps#label:member",
              "docComment": "/**\n * label for local video camera switcher\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!LocalVideoCameraCycleButtonProps#onSelectCamera:member",
              "docComment": "/**\n * callback function to change video feed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectCamera?: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSelectCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!LocalVideoCameraCycleButtonProps#selectedCamera:member",
              "docComment": "/**\n * Currently selected camera in the local video stream.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedCamera?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectedCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!LocalVideoStreamState:interface",
          "docComment": "/**\n * State only version of {@link @azure/communication-calling#LocalVideoStream}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LocalVideoStreamState "
            }
          ],
          "releaseTag": "Public",
          "name": "LocalVideoStreamState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!LocalVideoStreamState#mediaStreamType:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#LocalVideoStream.mediaStreamType}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mediaStreamType: "
                },
                {
                  "kind": "Reference",
                  "text": "MediaStreamType",
                  "canonicalReference": "@azure/communication-calling!MediaStreamType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mediaStreamType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!LocalVideoStreamState#source:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#LocalVideoStream.source}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "source: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoDeviceInfo",
                  "canonicalReference": "@azure/communication-calling!VideoDeviceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!LocalVideoStreamState#view:member",
              "docComment": "/**\n * {@link VideoStreamRendererView} that is managed by createView/disposeView in {@link StatefulCallClient} API. This can be undefined if the stream has not yet been rendered and defined after createView creates the view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "view?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamRendererViewState",
                  "canonicalReference": "@azure/communication-react!VideoStreamRendererViewState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "view",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MediaDiagnosticChangedEvent:type",
          "docComment": "/**\n * Payload for {@link DiagnosticChangedEventListner} where there is a change in a media diagnostic.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MediaDiagnosticChangedEvent = "
            },
            {
              "kind": "Reference",
              "text": "MediaDiagnosticChangedEventArgs",
              "canonicalReference": "@azure/communication-calling!MediaDiagnosticChangedEventArgs:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    type: 'media';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MediaDiagnosticChangedEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MediaDiagnosticsState:interface",
          "docComment": "/**\n * State only proxy for {@link @azure/communication-calling#MediaDiagnostics}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MediaDiagnosticsState "
            }
          ],
          "releaseTag": "Public",
          "name": "MediaDiagnosticsState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MediaDiagnosticsState#latest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "latest: "
                },
                {
                  "kind": "Reference",
                  "text": "LatestMediaDiagnostics",
                  "canonicalReference": "@azure/communication-calling!LatestMediaDiagnostics:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!Message:type",
          "docComment": "/**\n * Discriminated union of all messages.\n *\n * The `messageType` field specializes into union variants.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Message = "
            },
            {
              "kind": "Reference",
              "text": "ChatMessage",
              "canonicalReference": "@azure/communication-react!ChatMessage:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "SystemMessage",
              "canonicalReference": "@azure/communication-react!SystemMessage:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "CustomMessage",
              "canonicalReference": "@azure/communication-react!CustomMessage:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Message",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageAttachedStatus:type",
          "docComment": "/**\n * Indicate whether a chat message should be displayed merged with the message before / after it.\n *\n * Useful to merge many messages from the same sender into a single message bubble.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageAttachedStatus = "
            },
            {
              "kind": "Content",
              "text": "'bottom' | 'top' | boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageAttachedStatus",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MessageCommon:interface",
          "docComment": "/**\n * Common properties of all message types.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MessageCommon "
            }
          ],
          "releaseTag": "Public",
          "name": "MessageCommon",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageCommon#createdOn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createdOn: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createdOn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageCommon#messageId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "messageId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageContentType:type",
          "docComment": "/**\n * Supported types of chat message content.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageContentType = "
            },
            {
              "kind": "Content",
              "text": "'text' | 'html' | 'richtext/html' | 'unknown'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageContentType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageProps:type",
          "docComment": "/**\n * Props to render a single message.\n *\n * See {@link MessageRenderer}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    message: "
            },
            {
              "kind": "Reference",
              "text": "Message",
              "canonicalReference": "@azure/communication-react!Message:type"
            },
            {
              "kind": "Content",
              "text": ";\n    strings: "
            },
            {
              "kind": "Reference",
              "text": "MessageThreadStrings",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    messageContainerStyle?: "
            },
            {
              "kind": "Reference",
              "text": "ComponentSlotStyle",
              "canonicalReference": "@fluentui/styles!ComponentSlotStyle:type"
            },
            {
              "kind": "Content",
              "text": ";\n    showDate?: boolean;\n    disableEditing?: boolean;\n    onUpdateMessage?: "
            },
            {
              "kind": "Reference",
              "text": "UpdateMessageCallback",
              "canonicalReference": "@azure/communication-react!UpdateMessageCallback:type"
            },
            {
              "kind": "Content",
              "text": ";\n    onDeleteMessage?: (messageId: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    onSendMessage?: (messageId: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageReadListener:type",
          "docComment": "/**\n * Callback for {@link ChatAdapterSubscribers} 'messageRead' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageReadListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    message: "
            },
            {
              "kind": "Reference",
              "text": "ChatMessage",
              "canonicalReference": "@azure/communication-chat!ChatMessage:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    readBy: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationUserKind",
              "canonicalReference": "@azure/communication-common!CommunicationUserKind:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageReadListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageReceivedListener:type",
          "docComment": "/**\n * Callback for {@link ChatAdapterSubscribers} 'messageReceived' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageReceivedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    message: "
            },
            {
              "kind": "Reference",
              "text": "ChatMessage",
              "canonicalReference": "@azure/communication-chat!ChatMessage:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageReceivedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageRenderer:type",
          "docComment": "/**\n * A component to render a single message.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageRenderer = "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "MessageProps",
              "canonicalReference": "@azure/communication-react!MessageProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageRenderer",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageSentListener:type",
          "docComment": "/**\n * Callback for {@link ChatAdapterSubscribers} 'messageSent' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageSentListener = "
            },
            {
              "kind": "Reference",
              "text": "MessageReceivedListener",
              "canonicalReference": "@azure/communication-react!MessageReceivedListener:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageSentListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageStatus:type",
          "docComment": "/**\n * Client-side state of a sent message.\n *\n * Includes transitional states that occur before message delivery is confirmed from the backend.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageStatus = "
            },
            {
              "kind": "Content",
              "text": "'delivered' | 'sending' | 'seen' | 'failed'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageStatus",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!MessageStatusIndicator:var",
          "docComment": "/**\n * Component to display the status of a sent message.\n *\n * Adds an icon and tooltip corresponding to the message status.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MessageStatusIndicator: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "MessageStatusIndicatorProps",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageStatusIndicator",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MessageStatusIndicatorProps:interface",
          "docComment": "/**\n * Props for {@link MessageStatusIndicator}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MessageStatusIndicatorProps "
            }
          ],
          "releaseTag": "Public",
          "name": "MessageStatusIndicatorProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorProps#onToggleToolTip:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onToggleToolTip?: "
                },
                {
                  "kind": "Content",
                  "text": "(isToggled: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onToggleToolTip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorProps#readCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "readCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorProps#remoteParticipantsCount:member",
              "docComment": "/**\n * number of participants not including myself\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remoteParticipantsCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "remoteParticipantsCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorProps#status:member",
              "docComment": "/**\n * Message status that determines the icon to display.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status?: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageStatus",
                  "canonicalReference": "@azure/communication-react!MessageStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageStatusIndicatorStrings",
                  "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorProps#styles:member",
              "docComment": "/**\n * Allows users to pass an object containing custom CSS styles.\n *\n * @Example\n * ```\n * <MessageStatus styles={{ root: { background: 'blue' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "BaseCustomStyles",
                  "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings:interface",
          "docComment": "/**\n * Strings of {@link MessageStatusIndicator} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MessageStatusIndicatorStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "MessageStatusIndicatorStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings#deliveredAriaLabel:member",
              "docComment": "/**\n * Aria label to notify user when their message has been delivered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deliveredAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "deliveredAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings#deliveredTooltipText:member",
              "docComment": "/**\n * Text to display in the delivered message icon tooltip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deliveredTooltipText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deliveredTooltipText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings#failedToSendAriaLabel:member",
              "docComment": "/**\n * Aria label to notify user when their message has failed to be sent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedToSendAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "failedToSendAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings#failedToSendTooltipText:member",
              "docComment": "/**\n * Text to display in the failed message icon tooltip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedToSendTooltipText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "failedToSendTooltipText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings#readByTooltipText:member",
              "docComment": "/**\n * Text to display in the seen message icon tooltip if read number logic is working correctly (more than 1 read number and more than 1 particiants)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readByTooltipText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "readByTooltipText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings#seenAriaLabel:member",
              "docComment": "/**\n * Aria label to notify user when their message has been seen by others.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "seenAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "seenAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings#seenTooltipText:member",
              "docComment": "/**\n * Text to display in the seen message icon tooltip if read number/ participant number is 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "seenTooltipText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "seenTooltipText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings#sendingAriaLabel:member",
              "docComment": "/**\n * Aria label to notify user when their message is being sent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendingAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sendingAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorStrings#sendingTooltipText:member",
              "docComment": "/**\n * Text to display in the sending message icon tooltip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendingTooltipText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sendingTooltipText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!MessageThread:var",
          "docComment": "/**\n * `MessageThread` allows you to easily create a component for rendering chat messages, handling scrolling behavior of new/old messages and customizing icons & controls inside the chat thread.\n *\n * @param props - of type MessageThreadProps\n *\n * Users will need to provide at least chat messages and userId to render the `MessageThread` component. Users can also customize `MessageThread` by passing in their own Avatar, `MessageStatusIndicator` icon, `JumpToNewMessageButton`, `LoadPreviousMessagesButton` and the behavior of these controls.\n *\n * `MessageThread` internally uses the `Chat` & `Chat.Message` component from `@fluentui/react-northstar`. You can checkout the details about these [two components](https://fluentsite.z22.web.core.windows.net/0.53.0/components/chat/props).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MessageThread: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "MessageThreadProps",
              "canonicalReference": "@azure/communication-react!MessageThreadProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageThread",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageThreadProps:type",
          "docComment": "/**\n * Props for {@link MessageThread}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageThreadProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    userId: string;\n    messages: ("
            },
            {
              "kind": "Reference",
              "text": "ChatMessage",
              "canonicalReference": "@azure/communication-react!ChatMessage:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "SystemMessage",
              "canonicalReference": "@azure/communication-react!SystemMessage:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "CustomMessage",
              "canonicalReference": "@azure/communication-react!CustomMessage:interface"
            },
            {
              "kind": "Content",
              "text": ")[];\n    participantCount?: number;\n    readReceiptsBySenderId?: "
            },
            {
              "kind": "Reference",
              "text": "ReadReceiptsBySenderId",
              "canonicalReference": "@azure/communication-react!ReadReceiptsBySenderId:type"
            },
            {
              "kind": "Content",
              "text": ";\n    styles?: "
            },
            {
              "kind": "Reference",
              "text": "MessageThreadStyles",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    disableJumpToNewMessageButton?: boolean;\n    showMessageDate?: boolean;\n    showMessageStatus?: boolean;\n    numberOfChatMessagesToReload?: number;\n    onMessageSeen?: (messageId: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    onRenderMessageStatus?: (messageStatusIndicatorProps: "
            },
            {
              "kind": "Reference",
              "text": "MessageStatusIndicatorProps",
              "canonicalReference": "@azure/communication-react!MessageStatusIndicatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    onRenderAvatar?: "
            },
            {
              "kind": "Reference",
              "text": "OnRenderAvatarCallback",
              "canonicalReference": "@azure/communication-react!OnRenderAvatarCallback:type"
            },
            {
              "kind": "Content",
              "text": ";\n    onRenderJumpToNewMessageButton?: (newMessageButtonProps: "
            },
            {
              "kind": "Reference",
              "text": "JumpToNewMessageButtonProps",
              "canonicalReference": "@azure/communication-react!JumpToNewMessageButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    onLoadPreviousChatMessages?: (messagesToLoad: number) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<boolean>;\n    onRenderMessage?: (messageProps: "
            },
            {
              "kind": "Reference",
              "text": "MessageProps",
              "canonicalReference": "@azure/communication-react!MessageProps:type"
            },
            {
              "kind": "Content",
              "text": ", messageRenderer?: "
            },
            {
              "kind": "Reference",
              "text": "MessageRenderer",
              "canonicalReference": "@azure/communication-react!MessageRenderer:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    onUpdateMessage?: "
            },
            {
              "kind": "Reference",
              "text": "UpdateMessageCallback",
              "canonicalReference": "@azure/communication-react!UpdateMessageCallback:type"
            },
            {
              "kind": "Content",
              "text": ";\n    onDeleteMessage?: (messageId: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    onSendMessage?: (messageId: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>;\n    disableEditing?: boolean;\n    strings?: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MessageThreadStrings",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageThreadProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 42
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MessageThreadSelector:type",
          "docComment": "/**\n * Selector type for {@link MessageThread} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MessageThreadSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "ChatClientState",
              "canonicalReference": "@azure/communication-react!ChatClientState:type"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "ChatBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!ChatBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    userId: string;\n    showMessageStatus: boolean;\n    messages: "
            },
            {
              "kind": "Reference",
              "text": "Message",
              "canonicalReference": "@azure/communication-react!Message:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageThreadSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MessageThreadStrings:interface",
          "docComment": "/**\n * Strings of {@link MessageThread} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MessageThreadStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "MessageThreadStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#actionMenuMoreOptions:member",
              "docComment": "/**\n * String for action menu indicating there are more options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actionMenuMoreOptions?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "actionMenuMoreOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#editBoxCancelButton:member",
              "docComment": "/**\n * String for Cancel button in EditBox\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editBoxCancelButton: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editBoxCancelButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#editBoxPlaceholderText:member",
              "docComment": "/**\n * String for placeholder text in EditBox when there is no user input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editBoxPlaceholderText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editBoxPlaceholderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#editBoxSubmitButton:member",
              "docComment": "/**\n * String for Submit in EditBox when there is no user input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editBoxSubmitButton: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editBoxSubmitButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#editBoxTextLimit:member",
              "docComment": "/**\n * String for warning on text limit exceeded in EditBox\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editBoxTextLimit: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editBoxTextLimit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#editedTag:member",
              "docComment": "/**\n * Tag shown on a message that has been edited\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editedTag: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editedTag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#editMessage:member",
              "docComment": "/**\n * String for editing message in floating menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editMessage: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#failToSendTag:member",
              "docComment": "/**\n * String for indicating failed to send messages\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failToSendTag?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "failToSendTag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#friday:member",
              "docComment": "/**\n * String for Friday\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "friday: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "friday",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#liveAuthorIntro:member",
              "docComment": "/**\n * String for LiveMessage introduction for the Chat Message\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "liveAuthorIntro: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "liveAuthorIntro",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#messageContentAriaText:member",
              "docComment": "/**\n * String for aria text of remote user's message content\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageContentAriaText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "messageContentAriaText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#messageContentMineAriaText:member",
              "docComment": "/**\n * String for aria text of local user's message content\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageContentMineAriaText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "messageContentMineAriaText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#messageReadCount:member",
              "docComment": "/**\n * String for showing message read status in floating menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageReadCount?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "messageReadCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#monday:member",
              "docComment": "/**\n * String for Monday\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "monday: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "monday",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#newMessagesIndicator:member",
              "docComment": "/**\n * String for new messages indicator\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newMessagesIndicator: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "newMessagesIndicator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#noDisplayNameSub:member",
              "docComment": "/**\n * String for replacing display name when there is none\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noDisplayNameSub: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "noDisplayNameSub",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#participantJoined:member",
              "docComment": "/**\n * String for participants joined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participantJoined: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "participantJoined",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#participantLeft:member",
              "docComment": "/**\n * String for participants left\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participantLeft: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "participantLeft",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#removeMessage:member",
              "docComment": "/**\n * String for removing message in floating menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeMessage: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "removeMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#resendMessage:member",
              "docComment": "/**\n * String for resending failed message in floating menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resendMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resendMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#saturday:member",
              "docComment": "/**\n * String for Saturday\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "saturday: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "saturday",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#sunday:member",
              "docComment": "/**\n * String for Sunday\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sunday: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sunday",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#thursday:member",
              "docComment": "/**\n * String for Thursday\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "thursday: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "thursday",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#tuesday:member",
              "docComment": "/**\n * String for Tuesday\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tuesday: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tuesday",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#wednesday:member",
              "docComment": "/**\n * String for Wednesday\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wednesday: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "wednesday",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStrings#yesterday:member",
              "docComment": "/**\n * String for Yesterday\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "yesterday: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "yesterday",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MessageThreadStyles:interface",
          "docComment": "/**\n * Fluent styles for {@link MessageThread}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MessageThreadStyles extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCustomStyles",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MessageThreadStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#chatContainer:member",
              "docComment": "/**\n * Styles for chat container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentSlotStyle",
                  "canonicalReference": "@fluentui/styles!ComponentSlotStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "chatContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#chatItemMessageContainer:member",
              "docComment": "/**\n * styles for chat items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatItemMessageContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentSlotStyle",
                  "canonicalReference": "@fluentui/styles!ComponentSlotStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "chatItemMessageContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#chatMessageContainer:member",
              "docComment": "/**\n * Styles for chat message container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chatMessageContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentSlotStyle",
                  "canonicalReference": "@fluentui/styles!ComponentSlotStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "chatMessageContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#failedMyChatMessageContainer:member",
              "docComment": "/**\n * Styles for my chat message container in case of failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedMyChatMessageContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentSlotStyle",
                  "canonicalReference": "@fluentui/styles!ComponentSlotStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "failedMyChatMessageContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#loadPreviousMessagesButtonContainer:member",
              "docComment": "/**\n * Styles for load previous messages container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadPreviousMessagesButtonContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "loadPreviousMessagesButtonContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#messageStatusContainer:member",
              "docComment": "/**\n * Styles for message status indicator container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageStatusContainer?: "
                },
                {
                  "kind": "Content",
                  "text": "(mine: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "messageStatusContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#myChatItemMessageContainer:member",
              "docComment": "/**\n * styles for my chat items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "myChatItemMessageContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentSlotStyle",
                  "canonicalReference": "@fluentui/styles!ComponentSlotStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "myChatItemMessageContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#myChatMessageContainer:member",
              "docComment": "/**\n * Styles for my chat message container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "myChatMessageContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentSlotStyle",
                  "canonicalReference": "@fluentui/styles!ComponentSlotStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "myChatMessageContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#newMessageButtonContainer:member",
              "docComment": "/**\n * Styles for new message container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newMessageButtonContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "newMessageButtonContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MessageThreadStyles#systemMessageContainer:member",
              "docComment": "/**\n * Styles for system message container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "systemMessageContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "ComponentSlotStyle",
                  "canonicalReference": "@fluentui/styles!ComponentSlotStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "systemMessageContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!MicrophoneButton:var",
          "docComment": "/**\n * A button to turn microphone on / off.\n *\n * Can be used with {@link ControlBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MicrophoneButton: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "MicrophoneButtonProps",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "MicrophoneButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MicrophoneButtonContextualMenuStyles:interface",
          "docComment": "/**\n * Styles for the {@link MicrophoneButton} menu.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MicrophoneButtonContextualMenuStyles extends "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuStyles",
              "canonicalReference": "@fluentui/react!IContextualMenuStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MicrophoneButtonContextualMenuStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonContextualMenuStyles#menuItemStyles:member",
              "docComment": "/**\n * Styles for the items inside the {@link MicrophoneButton} button menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuItemStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemStyles",
                  "canonicalReference": "@fluentui/react!IContextualMenuItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menuItemStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MicrophoneButtonProps:interface",
          "docComment": "/**\n * Props for {@link MicrophoneButton}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MicrophoneButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonProps",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MicrophoneButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#enableDeviceSelectionMenu:member",
              "docComment": "/**\n * Whether to use a {@link SplitButton} with a {@link IContextualMenu} for device selection.\n *\n * default: false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableDeviceSelectionMenu?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "enableDeviceSelectionMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#microphones:member",
              "docComment": "/**\n * Available microphones for selection\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphones?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "microphones",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#onSelectMicrophone:member",
              "docComment": "/**\n * Callback when a microphone is selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectMicrophone?: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSelectMicrophone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#onSelectSpeaker:member",
              "docComment": "/**\n * Speaker when a speaker is selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSelectSpeaker?: "
                },
                {
                  "kind": "Content",
                  "text": "(device: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSelectSpeaker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#onToggleMicrophone:member",
              "docComment": "/**\n * Utility property for using this component with `communication react eventHandlers`. Maps directly to the `onClick` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onToggleMicrophone?: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onToggleMicrophone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#selectedMicrophone:member",
              "docComment": "/**\n * Microphone that is shown as currently selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedMicrophone?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectedMicrophone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#selectedSpeaker:member",
              "docComment": "/**\n * Speaker that is shown as currently selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedSpeaker?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "selectedSpeaker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#speakers:member",
              "docComment": "/**\n * Available speakers for selection\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "speakers?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsDevice",
                  "canonicalReference": "@azure/communication-react!OptionsDevice:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "speakers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "MicrophoneButtonStrings",
                  "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonProps#styles:member",
              "docComment": "/**\n * Styles for {@link MicrophoneButton} and the device selection flyout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "MicrophoneButtonStyles",
                  "canonicalReference": "@azure/communication-react!MicrophoneButtonStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!MicrophoneButtonSelector:type",
          "docComment": "/**\n * Selector type for {@link MicrophoneButton} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MicrophoneButtonSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "CallingBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!CallingBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    disabled: boolean;\n    checked: boolean;\n    microphones: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    speakers: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    selectedMicrophone?: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    selectedSpeaker?: "
            },
            {
              "kind": "Reference",
              "text": "AudioDeviceInfo",
              "canonicalReference": "@azure/communication-calling!AudioDeviceInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MicrophoneButtonSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings:interface",
          "docComment": "/**\n * Strings of {@link MicrophoneButton} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MicrophoneButtonStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "MicrophoneButtonStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#microphoneActionTurnedOffAnnouncement:member",
              "docComment": "/**\n * Microphone action turned off string for announcer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneActionTurnedOffAnnouncement?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "microphoneActionTurnedOffAnnouncement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#microphoneActionTurnedOnAnnouncement:member",
              "docComment": "/**\n * Microphone action turned on string for announcer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneActionTurnedOnAnnouncement?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "microphoneActionTurnedOnAnnouncement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#microphoneButtonSplitRoleDescription:member",
              "docComment": "/**\n * Description of microphone button split button role\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneButtonSplitRoleDescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "microphoneButtonSplitRoleDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#microphoneMenuTitle:member",
              "docComment": "/**\n * Title of microphone menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneMenuTitle?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "microphoneMenuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#microphoneMenuTooltip:member",
              "docComment": "/**\n * Tooltip of microphone menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "microphoneMenuTooltip?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "microphoneMenuTooltip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#offLabel:member",
              "docComment": "/**\n * Label when button is off.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#offSplitButtonAriaLabel:member",
              "docComment": "/**\n * Microphone split button aria label when mic is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offSplitButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "offSplitButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#onLabel:member",
              "docComment": "/**\n * Label when button is on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#onSplitButtonAriaLabel:member",
              "docComment": "/**\n * Microphone split button aria label when mic is enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSplitButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSplitButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#speakerMenuTitle:member",
              "docComment": "/**\n * Title of speaker menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "speakerMenuTitle?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "speakerMenuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#speakerMenuTooltip:member",
              "docComment": "/**\n * Tooltip of speaker menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "speakerMenuTooltip?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "speakerMenuTooltip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#tooltipDisabledContent:member",
              "docComment": "/**\n * * Tooltip content when the button is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipDisabledContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipDisabledContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#tooltipOffContent:member",
              "docComment": "/**\n * Tooltip content when the button is off.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipOffContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipOffContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStrings#tooltipOnContent:member",
              "docComment": "/**\n * Tooltip content when the button is on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipOnContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipOnContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!MicrophoneButtonStyles:interface",
          "docComment": "/**\n * Styles for {@link MicrophoneButton}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MicrophoneButtonStyles extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonStyles",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStyles:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MicrophoneButtonStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!MicrophoneButtonStyles#menuStyles:member",
              "docComment": "/**\n * Styles for the {@link MicrophoneButton} menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "MicrophoneButtonContextualMenuStyles",
                  "canonicalReference": "@azure/communication-react!MicrophoneButtonContextualMenuStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menuStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!NetworkDiagnosticChangedEvent:type",
          "docComment": "/**\n * Payload for {@link DiagnosticChangedEventListner} where there is a change in a network diagnostic.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NetworkDiagnosticChangedEvent = "
            },
            {
              "kind": "Reference",
              "text": "NetworkDiagnosticChangedEventArgs",
              "canonicalReference": "@azure/communication-calling!NetworkDiagnosticChangedEventArgs:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    type: 'network';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NetworkDiagnosticChangedEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!NetworkDiagnosticsState:interface",
          "docComment": "/**\n * State only proxy for {@link @azure/communication-calling#NetworkDiagnostics}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NetworkDiagnosticsState "
            }
          ],
          "releaseTag": "Public",
          "name": "NetworkDiagnosticsState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!NetworkDiagnosticsState#latest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "latest: "
                },
                {
                  "kind": "Reference",
                  "text": "LatestNetworkDiagnostics",
                  "canonicalReference": "@azure/communication-calling!LatestNetworkDiagnostics:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!OnRenderAvatarCallback:type",
          "docComment": "/**\n * A custom rendered callback that allows users to customize the rendering of a Persona Component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type OnRenderAvatarCallback = "
            },
            {
              "kind": "Content",
              "text": "(\nuserId?: string, options?: "
            },
            {
              "kind": "Reference",
              "text": "CustomAvatarOptions",
              "canonicalReference": "@azure/communication-react!CustomAvatarOptions:type"
            },
            {
              "kind": "Content",
              "text": ", \ndefaultOnRender?: (props: "
            },
            {
              "kind": "Reference",
              "text": "CustomAvatarOptions",
              "canonicalReference": "@azure/communication-react!CustomAvatarOptions:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "OnRenderAvatarCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!OptionsDevice:interface",
          "docComment": "/**\n * A device, e.g. camera, microphone, or speaker, in the {@link DevicesButton} flyout.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OptionsDevice "
            }
          ],
          "releaseTag": "Public",
          "name": "OptionsDevice",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!OptionsDevice#id:member",
              "docComment": "/**\n * Device unique identifier\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!OptionsDevice#name:member",
              "docComment": "/**\n * Device name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantAddedSystemMessage:interface",
          "docComment": "/**\n * A system message notifying that a participant was added to the chat thread.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantAddedSystemMessage extends "
            },
            {
              "kind": "Reference",
              "text": "SystemMessageCommon",
              "canonicalReference": "@azure/communication-react!SystemMessageCommon:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantAddedSystemMessage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantAddedSystemMessage#participants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participants: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationParticipant",
                  "canonicalReference": "@azure/communication-react!CommunicationParticipant:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "participants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantAddedSystemMessage#systemMessageType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "systemMessageType: "
                },
                {
                  "kind": "Content",
                  "text": "'participantAdded'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "systemMessageType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ParticipantItem:var",
          "docComment": "/**\n * Component to render a calling or chat participant.\n *\n * Displays the participant's avatar, displayName and status as well as optional icons and context menu.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ParticipantItem: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantItemProps",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantItem",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantItemProps:interface",
          "docComment": "/**\n * Props for {@link ParticipantItem}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantItemProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#displayName:member",
              "docComment": "/**\n * Name of participant.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "displayName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#me:member",
              "docComment": "/**\n * Optional indicator to show participant is the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "me?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "me",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#menuItems:member",
              "docComment": "/**\n * Optional array of IContextualMenuItem for contextual menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menuItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#onClick:member",
              "docComment": "/**\n * Optional callback when component is clicked\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(props?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantItemProps",
                  "canonicalReference": "@azure/communication-react!ParticipantItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#onRenderAvatar:member",
              "docComment": "/**\n * Optional callback returning a JSX element to override avatar.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderAvatar?: "
                },
                {
                  "kind": "Reference",
                  "text": "OnRenderAvatarCallback",
                  "canonicalReference": "@azure/communication-react!OnRenderAvatarCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderAvatar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#onRenderIcon:member",
              "docComment": "/**\n * Optional callback returning a JSX element rendered on the right portion of the ParticipantItem. Intended for adding icons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderIcon?: "
                },
                {
                  "kind": "Content",
                  "text": "(props?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantItemProps",
                  "canonicalReference": "@azure/communication-react!ParticipantItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#presence:member",
              "docComment": "/**\n * Optional PersonaPresence to show participant presence. This will not have an effect if property avatar is assigned.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "presence?: "
                },
                {
                  "kind": "Reference",
                  "text": "PersonaPresence",
                  "canonicalReference": "@fluentui/react!PersonaPresence:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "presence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#showParticipantOverflowTooltip:member",
              "docComment": "/**\n * prop to determine if we should show tooltip for participants or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showParticipantOverflowTooltip?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showParticipantOverflowTooltip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantItemStrings",
                  "canonicalReference": "@azure/communication-react!ParticipantItemStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#styles:member",
              "docComment": "/**\n * Allows users to pass in an object contains custom CSS styles.\n *\n * @Example\n * ```\n * <ParticipantItem styles={{ root: { background: 'blue' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantItemStyles",
                  "canonicalReference": "@azure/communication-react!ParticipantItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemProps#userId:member",
              "docComment": "/**\n * Unique User ID of the participant. This `userId` is available in the `onRenderAvatar` callback function\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "userId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantItemStrings:interface",
          "docComment": "/**\n * Strings of {@link ParticipantItem} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantItemStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantItemStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStrings#displayNamePlaceholder:member",
              "docComment": "/**\n * placeholder text for participants who does not have a display name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayNamePlaceholder?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "displayNamePlaceholder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStrings#isMeText:member",
              "docComment": "/**\n * String shown when participant is me\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMeText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isMeText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStrings#menuTitle:member",
              "docComment": "/**\n * String shown when hovering over menu button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuTitle: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "menuTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStrings#mutedIconLabel:member",
              "docComment": "/**\n * Label for the muted icon in participant state stack\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mutedIconLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mutedIconLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStrings#removeButtonLabel:member",
              "docComment": "/**\n * Label for the remove button in participant menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "removeButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStrings#sharingIconLabel:member",
              "docComment": "/**\n * Label for the sharing icon in participant state stack\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sharingIconLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sharingIconLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantItemStyles:interface",
          "docComment": "/**\n * Fluent styles for {@link ParticipantItem}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantItemStyles extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCustomStyles",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantItemStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStyles#avatar:member",
              "docComment": "/**\n * Styles for the avatar.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "avatar?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "avatar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStyles#iconContainer:member",
              "docComment": "/**\n * Styles for the container of the icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "iconContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStyles#me:member",
              "docComment": "/**\n * Styles for the (You) string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "me?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "me",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantItemStyles#menu:member",
              "docComment": "/**\n * Styles for the menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menu?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ParticipantList:var",
          "docComment": "/**\n * Component to render all calling or chat participants.\n *\n * By default, each participant is rendered with {@link ParticipantItem}. See {@link ParticipantListProps.onRenderParticipant} to override.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ParticipantList: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantListProps",
              "canonicalReference": "@azure/communication-react!ParticipantListProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantList",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantListItemStyles:interface",
          "docComment": "/**\n * Styles for the {@link ParticipantList} {@link ParticipantItem}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantListItemStyles extends "
            },
            {
              "kind": "Reference",
              "text": "ParticipantItemStyles",
              "canonicalReference": "@azure/communication-react!ParticipantItemStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantListItemStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantListItemStyles#participantSubMenuItemsStyles:member",
              "docComment": "/**\n * Styles applied to the sub-menu of the {@link ParticipantList} {@link ParticipantItem}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participantSubMenuItemsStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemStyles",
                  "canonicalReference": "@fluentui/react!IContextualMenuItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "participantSubMenuItemsStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantListParticipant:type",
          "docComment": "/**\n * Participants displayed in a {@link ParticipantList}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantListParticipant = "
            },
            {
              "kind": "Reference",
              "text": "CommunicationParticipant",
              "canonicalReference": "@azure/communication-react!CommunicationParticipant:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    isRemovable: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantListParticipant",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantListProps:type",
          "docComment": "/**\n * Props for {@link ParticipantList}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantListProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    participants: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantListParticipant",
              "canonicalReference": "@azure/communication-react!ParticipantListParticipant:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    myUserId?: string;\n    excludeMe?: boolean;\n    onRenderParticipant?: (participant: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantListParticipant",
              "canonicalReference": "@azure/communication-react!ParticipantListParticipant:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null;\n    onRenderAvatar?: "
            },
            {
              "kind": "Reference",
              "text": "OnRenderAvatarCallback",
              "canonicalReference": "@azure/communication-react!OnRenderAvatarCallback:type"
            },
            {
              "kind": "Content",
              "text": ";\n    onRemoveParticipant?: (userId: string) => void;\n    onFetchParticipantMenuItems?: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantMenuItemsCallback",
              "canonicalReference": "@azure/communication-react!ParticipantMenuItemsCallback:type"
            },
            {
              "kind": "Content",
              "text": ";\n    onParticipantClick?: (participant?: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantListParticipant",
              "canonicalReference": "@azure/communication-react!ParticipantListParticipant:type"
            },
            {
              "kind": "Content",
              "text": ") => void;\n    styles?: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantListStyles",
              "canonicalReference": "@azure/communication-react!ParticipantListStyles:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    showParticipantOverflowTooltip?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantListProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantListSelector:type",
          "docComment": "/**\n * Selector type for {@link ParticipantList} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantListSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "CallingBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!CallingBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    participants: "
            },
            {
              "kind": "Reference",
              "text": "CallParticipantListParticipant",
              "canonicalReference": "@azure/communication-react!CallParticipantListParticipant:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    myUserId: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantListSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantListStyles:interface",
          "docComment": "/**\n * Styles for the {@link ParticipantList}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantListStyles extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCustomStyles",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantListStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantListStyles#participantItemStyles:member",
              "docComment": "/**\n * Styles for the {@link ParticipantList} {@link ParticipantItem}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participantItemStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantListItemStyles",
                  "canonicalReference": "@azure/communication-react!ParticipantListItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "participantItemStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantMenuItemsCallback:type",
          "docComment": "/**\n * A callback for providing custom menu items for each participant in {@link ParticipantList}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantMenuItemsCallback = "
            },
            {
              "kind": "Content",
              "text": "(participantUserId: string, userId?: string, defaultMenuItems?: "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItem",
              "canonicalReference": "@fluentui/react!IContextualMenuItem:interface"
            },
            {
              "kind": "Content",
              "text": "[]) => "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItem",
              "canonicalReference": "@fluentui/react!IContextualMenuItem:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantMenuItemsCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantRemovedSystemMessage:interface",
          "docComment": "/**\n * A system message notifying that a participant was removed from the chat thread.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantRemovedSystemMessage extends "
            },
            {
              "kind": "Reference",
              "text": "SystemMessageCommon",
              "canonicalReference": "@azure/communication-react!SystemMessageCommon:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantRemovedSystemMessage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantRemovedSystemMessage#participants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participants: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationParticipant",
                  "canonicalReference": "@azure/communication-react!CommunicationParticipant:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "participants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantRemovedSystemMessage#systemMessageType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "systemMessageType: "
                },
                {
                  "kind": "Content",
                  "text": "'participantRemoved'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "systemMessageType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantsAddedListener:type",
          "docComment": "/**\n * Callback for {@link ChatAdapterSubscribers} 'participantsAdded' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantsAddedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    participantsAdded: "
            },
            {
              "kind": "Reference",
              "text": "ChatParticipant",
              "canonicalReference": "@azure/communication-chat!ChatParticipant:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    addedBy: "
            },
            {
              "kind": "Reference",
              "text": "ChatParticipant",
              "canonicalReference": "@azure/communication-chat!ChatParticipant:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsAddedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ParticipantsButton:var",
          "docComment": "/**\n * A button to show a menu with calling or chat participants.\n *\n * Can be used with {@link ControlBar}.\n *\n * This button contains dropdown menu items defined through its property `menuProps`. By default, it can display the number of remote participants with the full list as sub-menu and an option to mute all participants, as well as a copy-to-clipboard button to copy the call invitation URL. This `menuProps` can be fully redefined and its property is of type [IContextualMenuProps](https://developer.microsoft.com/fluentui#/controls/web/contextualmenu#IContextualMenuProps).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ParticipantsButton: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ParticipantsButtonProps",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantsButtonContextualMenuStyles:interface",
          "docComment": "/**\n * Styles for the {@link ParticipantsButton} menu.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantsButtonContextualMenuStyles extends "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuStyles",
              "canonicalReference": "@fluentui/react!IContextualMenuStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsButtonContextualMenuStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonContextualMenuStyles#menuItemStyles:member",
              "docComment": "/**\n * Styles for the {@link ParticipantsButton} menu items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuItemStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemStyles",
                  "canonicalReference": "@fluentui/react!IContextualMenuItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menuItemStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonContextualMenuStyles#participantListStyles:member",
              "docComment": "/**\n * Styles for the {@link ParticipantList} menu item inside the {@link ParticipantsButton} menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participantListStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantListStyles",
                  "canonicalReference": "@azure/communication-react!ParticipantListStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "participantListStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantsButtonProps:interface",
          "docComment": "/**\n * Props for {@link ParticipantsButton}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantsButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonProps",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#callInvitationURL:member",
              "docComment": "/**\n * URL to invite new participants to the current call\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callInvitationURL?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "callInvitationURL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#excludeMe:member",
              "docComment": "/**\n * If set to `true`, excludes the local participant from the participant list with use of `myUserId` props (required in this case).\n *\n * @defaultValue\n *\n * `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "excludeMe?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "excludeMe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#myUserId:member",
              "docComment": "/**\n * User ID of user\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "myUserId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "myUserId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#onFetchParticipantMenuItems:member",
              "docComment": "/**\n * Callback to render custom menu items for each participant.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFetchParticipantMenuItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantMenuItemsCallback",
                  "canonicalReference": "@azure/communication-react!ParticipantMenuItemsCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onFetchParticipantMenuItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#onMuteAll:member",
              "docComment": "/**\n * CallBack to mute all remote participants\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMuteAll?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onMuteAll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#onRemoveParticipant:member",
              "docComment": "/**\n * Callback to render the context menu for each participant\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRemoveParticipant?: "
                },
                {
                  "kind": "Content",
                  "text": "(userId: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRemoveParticipant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#onRenderAvatar:member",
              "docComment": "/**\n * Callback to render the avatar for each participant. This property will have no effect if `onRenderParticipant` is assigned.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderAvatar?: "
                },
                {
                  "kind": "Reference",
                  "text": "OnRenderAvatarCallback",
                  "canonicalReference": "@azure/communication-react!OnRenderAvatarCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderAvatar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#onRenderParticipant:member",
              "docComment": "/**\n * Callback to render each participant. If no callback is provided, each participant will be rendered with `ParticipantItem`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderParticipant?: "
                },
                {
                  "kind": "Content",
                  "text": "(participant: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationParticipant",
                  "canonicalReference": "@azure/communication-react!CommunicationParticipant:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderParticipant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#onRenderParticipantList:member",
              "docComment": "/**\n * Optional callback to render a custom participant list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderParticipantList?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantListProps",
                  "canonicalReference": "@azure/communication-react!ParticipantListProps:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderParticipantList",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#participants:member",
              "docComment": "/**\n * Participants in user call or chat\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participants: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantListParticipant",
                  "canonicalReference": "@azure/communication-react!ParticipantListParticipant:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "participants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#showParticipantOverflowTooltip:member",
              "docComment": "/**\n * prop to determine if we should show tooltip for participants or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showParticipantOverflowTooltip?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showParticipantOverflowTooltip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsButtonStrings",
                  "canonicalReference": "@azure/communication-react!ParticipantsButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonProps#styles:member",
              "docComment": "/**\n * Allows users to pass an object containing custom CSS styles.\n *\n * @Example\n * ```\n * <ParticipantsButton styles={{ root: { background: 'blue' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsButtonStyles",
                  "canonicalReference": "@azure/communication-react!ParticipantsButtonStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantsButtonSelector:type",
          "docComment": "/**\n * Selector type for {@link ParticipantsButton} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantsButtonSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "CallingBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!CallingBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    participants: "
            },
            {
              "kind": "Reference",
              "text": "CallParticipantListParticipant",
              "canonicalReference": "@azure/communication-react!CallParticipantListParticipant:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    myUserId: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsButtonSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantsButtonStrings:interface",
          "docComment": "/**\n * Strings of {@link ParticipantsButton} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantsButtonStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsButtonStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonStrings#copyInviteLinkButtonLabel:member",
              "docComment": "/**\n * Label of menu button to copy invite link\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyInviteLinkButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "copyInviteLinkButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonStrings#label:member",
              "docComment": "/**\n * Label of button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonStrings#menuHeader:member",
              "docComment": "/**\n * Header of menu pop up\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuHeader: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "menuHeader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonStrings#muteAllButtonLabel:member",
              "docComment": "/**\n * Label of menu button to mute all participants\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "muteAllButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "muteAllButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonStrings#participantsListButtonLabel:member",
              "docComment": "/**\n * Label of menu button to show list of participants. Placeholders: [numParticipants]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "participantsListButtonLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "participantsListButtonLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonStrings#tooltipContent:member",
              "docComment": "/**\n * Button tooltip content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ParticipantsButtonStyles:interface",
          "docComment": "/**\n * Styles Props for {@link ParticipantsButton}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParticipantsButtonStyles extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonStyles",
              "canonicalReference": "@azure/communication-react!ControlBarButtonStyles:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsButtonStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ParticipantsButtonStyles#menuStyles:member",
              "docComment": "/**\n * Styles of the {@link ParticipantsButton} menu flyout\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ParticipantsButtonContextualMenuStyles",
                  "canonicalReference": "@azure/communication-react!ParticipantsButtonContextualMenuStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "menuStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantsJoinedListener:type",
          "docComment": "/**\n * Callback for {@link CallAdapterSubscribers} 'participantsJoined' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantsJoinedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    joined: "
            },
            {
              "kind": "Reference",
              "text": "RemoteParticipant",
              "canonicalReference": "@azure/communication-calling!RemoteParticipant:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsJoinedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantsLeftListener:type",
          "docComment": "/**\n * Callback for {@link CallAdapterSubscribers} 'participantsLeft' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantsLeftListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    removed: "
            },
            {
              "kind": "Reference",
              "text": "RemoteParticipant",
              "canonicalReference": "@azure/communication-calling!RemoteParticipant:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsLeftListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantsRemovedListener:type",
          "docComment": "/**\n * Callback for {@link ChatAdapterSubscribers} 'participantsRemoved' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantsRemovedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    participantsRemoved: "
            },
            {
              "kind": "Reference",
              "text": "ChatParticipant",
              "canonicalReference": "@azure/communication-chat!ChatParticipant:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    removedBy: "
            },
            {
              "kind": "Reference",
              "text": "ChatParticipant",
              "canonicalReference": "@azure/communication-chat!ChatParticipant:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantsRemovedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ParticipantState:type",
          "docComment": "/**\n * The connection state of a call participant.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ParticipantState = "
            },
            {
              "kind": "Content",
              "text": "'Idle' | 'Connecting' | 'Ringing' | 'Connected' | 'Hold' | 'InLobby' | 'EarlyMedia' | 'Disconnected'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ParticipantState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ReadReceiptsBySenderId:type",
          "docComment": "/**\n * An array of key value pairs that stores each sender's display name and last read message\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ReadReceiptsBySenderId = "
            },
            {
              "kind": "Content",
              "text": "{\n    [key: string]: {\n        lastReadMessage: string;\n        displayName: string;\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ReadReceiptsBySenderId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!RecordingCallFeature:interface",
          "docComment": "/**\n * State only version of {@link @azure/communication-calling#RecordingCallFeature}. {@link StatefulCallClient} will automatically listen for recording state of the call and update the state exposed by {@link StatefulCallClient} accordingly.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RecordingCallFeatureState "
            }
          ],
          "releaseTag": "Public",
          "name": "RecordingCallFeature",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RecordingCallFeature#isRecordingActive:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RecordingCallFeature.isRecordingActive}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isRecordingActive: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isRecordingActive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!RemoteParticipantState:interface",
          "docComment": "/**\n * State only version of {@link @azure/communication-calling#RemoteParticipant}. {@link StatefulCallClient} will automatically retrieve RemoteParticipants and add their state to the state exposed by {@link StatefulCallClient}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RemoteParticipantState "
            }
          ],
          "releaseTag": "Public",
          "name": "RemoteParticipantState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteParticipantState#callEndReason:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteParticipant.callEndReason}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callEndReason?: "
                },
                {
                  "kind": "Reference",
                  "text": "CallEndReason",
                  "canonicalReference": "@azure/communication-calling!CallEndReason:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "callEndReason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteParticipantState#displayName:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteParticipant.displayName}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "displayName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteParticipantState#identifier:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteParticipant.identifier}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "identifier: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationUserKind",
                  "canonicalReference": "@azure/communication-common!CommunicationUserKind:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PhoneNumberKind",
                  "canonicalReference": "@azure/communication-common!PhoneNumberKind:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MicrosoftTeamsUserKind",
                  "canonicalReference": "@azure/communication-common!MicrosoftTeamsUserKind:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "UnknownIdentifierKind",
                  "canonicalReference": "@azure/communication-common!UnknownIdentifierKind:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "identifier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteParticipantState#isMuted:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteParticipant.isMuted}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMuted: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isMuted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteParticipantState#isSpeaking:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteParticipant.isSpeaking}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSpeaking: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isSpeaking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteParticipantState#state:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteParticipant.state}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Reference",
                  "text": "RemoteParticipantStatus",
                  "canonicalReference": "@azure/communication-calling!RemoteParticipantState:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteParticipantState#videoStreams:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteParticipant.videoStreams} as an object with {@link RemoteVideoStream} fields keyed by {@link @azure/communication-calling#RemoteVideoStream.id}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "videoStreams: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: number]: "
                },
                {
                  "kind": "Reference",
                  "text": "RemoteVideoStreamState",
                  "canonicalReference": "@azure/communication-react!RemoteVideoStreamState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "videoStreams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!RemoteVideoStreamState:interface",
          "docComment": "/**\n * State only version of {@link @azure/communication-calling#RemoteVideoStream}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RemoteVideoStreamState "
            }
          ],
          "releaseTag": "Public",
          "name": "RemoteVideoStreamState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteVideoStreamState#id:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteVideoStream.id}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteVideoStreamState#isAvailable:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteVideoStream.isAvailable}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAvailable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isAvailable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteVideoStreamState#mediaStreamType:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#RemoteVideoStream.mediaStreamType}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mediaStreamType: "
                },
                {
                  "kind": "Reference",
                  "text": "MediaStreamType",
                  "canonicalReference": "@azure/communication-calling!MediaStreamType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mediaStreamType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!RemoteVideoStreamState#view:member",
              "docComment": "/**\n * {@link VideoStreamRendererView} that is managed by createView/disposeView in {@link StatefulCallClient} API. This can be undefined if the stream has not yet been rendered and defined after createView creates the view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "view?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamRendererViewState",
                  "canonicalReference": "@azure/communication-react!VideoStreamRendererViewState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "view",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!ScreenShareButton:var",
          "docComment": "/**\n * A button to start / stop screen sharing.\n *\n * Can be used with {@link ControlBar}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ScreenShareButton: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ScreenShareButtonProps",
              "canonicalReference": "@azure/communication-react!ScreenShareButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ScreenShareButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ScreenShareButtonProps:interface",
          "docComment": "/**\n * Props for {@link ScreenShareButton}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ScreenShareButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "ControlBarButtonProps",
              "canonicalReference": "@azure/communication-react!ControlBarButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ScreenShareButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ScreenShareButtonProps#onToggleScreenShare:member",
              "docComment": "/**\n * Utility property for using this component with `communication react eventHandlers`. Maps directly to the `onClick` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onToggleScreenShare?: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onToggleScreenShare",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ScreenShareButtonProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ScreenShareButtonStrings",
                  "canonicalReference": "@azure/communication-react!ScreenShareButtonStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ScreenShareButtonSelector:type",
          "docComment": "/**\n * Selector type for {@link ScreenShareButton} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ScreenShareButtonSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "CallingBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!CallingBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    checked?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ScreenShareButtonSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!ScreenShareButtonStrings:interface",
          "docComment": "/**\n * Strings of {@link ScreenShareButton} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ScreenShareButtonStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "ScreenShareButtonStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ScreenShareButtonStrings#offLabel:member",
              "docComment": "/**\n * Label when button is off.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "offLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ScreenShareButtonStrings#onLabel:member",
              "docComment": "/**\n * Label when button is on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "onLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ScreenShareButtonStrings#tooltipDisabledContent:member",
              "docComment": "/**\n * * Tooltip content when the button is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipDisabledContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipDisabledContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ScreenShareButtonStrings#tooltipOffContent:member",
              "docComment": "/**\n * Tooltip content when the button is off.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipOffContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipOffContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!ScreenShareButtonStrings#tooltipOnContent:member",
              "docComment": "/**\n * Tooltip content when the button is on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipOnContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tooltipOnContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!Selector:type",
          "docComment": "/**\n * An optimized selector that refines {@link ClientState} updates into props for React Components in this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Selector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "ClientState",
              "canonicalReference": "@azure/communication-react!ClientState:type"
            },
            {
              "kind": "Content",
              "text": ", props: any) => any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Selector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!SendBox:var",
          "docComment": "/**\n * Component for typing and sending messages.\n *\n * Supports sending typing notification when user starts entering text. Supports an optional message below the text input field.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SendBox: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "SendBoxProps",
              "canonicalReference": "@azure/communication-react!SendBoxProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "SendBox",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!SendBoxProps:interface",
          "docComment": "/**\n * Props for {@link SendBox}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SendBoxProps "
            }
          ],
          "releaseTag": "Public",
          "name": "SendBoxProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#autoFocus:member",
              "docComment": "/**\n * enumerable to determine if the input box has focus on render or not. When undefined nothing has focus on render\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "'sendBoxTextField'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#disabled:member",
              "docComment": "/**\n * Optional boolean to disable text box\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#onRenderIcon:member",
              "docComment": "/**\n * Optional callback to render send button icon to the right of the SendBox.\n *\n * @defaultValue\n *\n * SendBoxSendHovered icon when mouse over icon and SendBoxSend icon otherwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderIcon?: "
                },
                {
                  "kind": "Content",
                  "text": "(isHover: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#onRenderSystemMessage:member",
              "docComment": "/**\n * Optional callback to render system message below the SendBox.\n *\n * @defaultValue\n *\n * MessageBar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSystemMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "(systemMessage: string | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactElement",
                  "canonicalReference": "@types/react!~React.ReactElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderSystemMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#onSendMessage:member",
              "docComment": "/**\n * Optional callback called when message is sent\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSendMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "(content: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSendMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#onTyping:member",
              "docComment": "/**\n * Optional callback called when user is typing\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTyping?: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onTyping",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SendBoxStrings",
                  "canonicalReference": "@azure/communication-react!SendBoxStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#styles:member",
              "docComment": "/**\n * Allows users to pass in an object contains custom CSS styles.\n *\n * @Example\n * ```\n * <SendBox styles={{ root: { background: 'blue' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "SendBoxStylesProps",
                  "canonicalReference": "@azure/communication-react!SendBoxStylesProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#supportNewline:member",
              "docComment": "/**\n * Optional boolean to support new line in SendBox.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "supportNewline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "supportNewline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxProps#systemMessage:member",
              "docComment": "/**\n * Optional text for system message below text box\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "systemMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "systemMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!SendBoxSelector:type",
          "docComment": "/**\n * Selector type for {@link SendBox} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SendBoxSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "ChatClientState",
              "canonicalReference": "@azure/communication-react!ChatClientState:type"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "ChatBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!ChatBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    displayName: string;\n    userId: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SendBoxSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!SendBoxStrings:interface",
          "docComment": "/**\n * Strings of {@link SendBox} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SendBoxStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "SendBoxStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxStrings#placeholderText:member",
              "docComment": "/**\n * Placeholder text in SendBox when there is no user input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placeholderText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "placeholderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxStrings#sendButtonAriaLabel:member",
              "docComment": "/**\n * Aria label for send message button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendButtonAriaLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sendButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxStrings#textTooLong:member",
              "docComment": "/**\n * The warning message when send box text length is more than max limit\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textTooLong: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textTooLong",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!SendBoxStylesProps:interface",
          "docComment": "/**\n * Fluent styles for {@link Sendbox}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SendBoxStylesProps extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCustomStyles",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SendBoxStylesProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxStylesProps#sendMessageIcon:member",
              "docComment": "/**\n * Styles for the send message icon; These styles will be ignored when a custom send message icon is provided.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendMessageIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sendMessageIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxStylesProps#sendMessageIconContainer:member",
              "docComment": "/**\n * Styles for the container of the send message icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendMessageIconContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sendMessageIconContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxStylesProps#systemMessage:member",
              "docComment": "/**\n * Styles for the system message; These styles will be ignored when a custom system message component is provided.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "systemMessage?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "systemMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxStylesProps#textField:member",
              "docComment": "/**\n * Styles for the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textField?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textField",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SendBoxStylesProps#textFieldContainer:member",
              "docComment": "/**\n * styles for the text field container\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textFieldContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textFieldContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!StatefulCallClient:interface",
          "docComment": "/**\n * Defines the methods that allow CallClient {@link @azure/communication-calling#CallClient} to be used statefully. The interface provides access to proxied state and also allows registering a handler for state change events. For state definition see {@link CallClientState}.\n *\n * State change events are driven by: - Returned data from {@link @azure/communication-calling#DeviceManager} APIs. - Returned data from {@link @azure/communication-calling#CallAgent} APIs. - Listeners automatically attached to various azure communication-calling objects: - CallAgent 'incomingCall' - CallAgent 'callsUpdated' - DeviceManager 'videoDevicesUpdated' - DeviceManager 'audioDevicesUpdated - DeviceManager 'selectedMicrophoneChanged' - DeviceManager 'selectedSpeakerChanged' - Call 'stateChanged' - Call 'idChanged' - Call 'isMutedChanged' - Call 'isScreenSharingOnChanged' - Call 'remoteParticipantsUpdated' - Call 'localVideoStreamsUpdated' - IncomingCall 'callEnded' - RemoteParticipant 'stateChanged' - RemoteParticipant 'isMutedChanged' - RemoteParticipant 'displayNameChanged' - RemoteParticipant 'isSpeakingChanged' - RemoteParticipant 'videoStreamsUpdated' - RemoteVideoStream 'isAvailableChanged' - TranscriptionCallFeature 'isTranscriptionActiveChanged' - RecordingCallFeature 'isRecordingActiveChanged'\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StatefulCallClient extends "
            },
            {
              "kind": "Reference",
              "text": "CallClient",
              "canonicalReference": "@azure/communication-calling!CallClient:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StatefulCallClient",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!StatefulCallClient#createView:member(1)",
              "docComment": "/**\n * Renders a {@link RemoteVideoStreamState} or {@link LocalVideoStreamState} and stores the resulting {@link VideoStreamRendererViewState} under the relevant {@link RemoteVideoStreamState} or {@link LocalVideoStreamState} or as unparented view in the state. Under the hood calls {@link @azure/communication-calling#VideoStreamRenderer.createView}.\n *\n * Scenario 1: Render RemoteVideoStreamState - CallId is required, participantId is required, and stream of type RemoteVideoStreamState is required - Resulting {@link VideoStreamRendererViewState} is stored in the given callId and participantId in {@link CallClientState}\n *\n * Scenario 2: Render LocalVideoStreamState for a call - CallId is required, participantId must be undefined, and stream of type LocalVideoStreamState is required. - The {@link @azure/communication-calling#Call.localVideoStreams} must already be started using {@link @azure/communication-calling#Call.startVideo}. - Resulting {@link VideoStreamRendererViewState} is stored in the given callId {@link CallState.localVideoStreams} in {@link CallClientState}.\n *\n * - Scenario 2: Render LocalVideoStreamState not part of a call (example rendering camera for local preview) - CallId must be undefined, participantId must be undefined, and stream of type LocalVideoStreamState is required. - Resulting {@link VideoStreamRendererViewState} is stored in under the given LocalVideoStreamState in {@link CallClientState.deviceManager.unparentedViews}\n *\n * @param callId - CallId for the given stream. Can be undefined if the stream is not part of any call.\n *\n * @param participantId - {@link RemoteParticipant.identifier} associated with the given RemoteVideoStreamState. Could be undefined if rendering LocalVideoStreamState.\n *\n * @param stream - The LocalVideoStreamState or RemoteVideoStreamState to start rendering.\n *\n * @param options - Options that are passed to the {@link @azure/communication-calling#VideoStreamRenderer}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createView(callId: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", participantId: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationIdentifier",
                  "canonicalReference": "@azure/communication-common!CommunicationIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", stream: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalVideoStreamState",
                  "canonicalReference": "@azure/communication-react!LocalVideoStreamState:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "RemoteVideoStreamState",
                  "canonicalReference": "@azure/communication-react!RemoteVideoStreamState:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "CreateViewOptions",
                  "canonicalReference": "@azure/communication-calling!CreateViewOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CreateViewResult",
                  "canonicalReference": "@azure/communication-react!CreateViewResult:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "participantId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "stream",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  }
                }
              ],
              "name": "createView"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!StatefulCallClient#disposeView:member(1)",
              "docComment": "/**\n * Stops rendering a {@link RemoteVideoStreamState} or {@link LocalVideoStreamState} and removes the {@link VideoStreamRendererView} from the relevant {@link RemoteVideoStreamState} in {@link CallClientState} or {@link LocalVideoStream} in {@link CallClientState} or appropriate {@link CallClientState.deviceManager.unparentedViews} Under the hood calls {@link @azure/communication-calling#VideoStreamRenderer.dispose}.\n *\n * Its important to disposeView to clean up resources properly.\n *\n * Scenario 1: Dispose RemoteVideoStreamState - CallId is required, participantId is required, and stream of type RemoteVideoStreamState is required\n *\n * Scenario 2: Dispose LocalVideoStreamState for a call - CallId is required, participantId must be undefined, and stream of type LocalVideoStreamState is required.\n *\n * - Scenario 2: Dispose LocalVideoStreamState not part of a call - CallId must be undefined, participantId must be undefined, and stream of type LocalVideoStreamState is required. - LocalVideoStreamState must be the original one passed to createView.\n *\n * @param callId - CallId for the given stream. Can be undefined if the stream is not part of any call.\n *\n * @param participantId - {@link RemoteParticipant.identifier} associated with the given RemoteVideoStreamState. Could be undefined if disposing LocalVideoStreamState.\n *\n * @param stream - The LocalVideoStreamState or RemoteVideoStreamState to dispose.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disposeView(callId: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", participantId: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationIdentifier",
                  "canonicalReference": "@azure/communication-common!CommunicationIdentifier:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", stream: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalVideoStreamState",
                  "canonicalReference": "@azure/communication-react!LocalVideoStreamState:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "RemoteVideoStreamState",
                  "canonicalReference": "@azure/communication-react!RemoteVideoStreamState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "participantId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "stream",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 9
                  }
                }
              ],
              "name": "disposeView"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!StatefulCallClient#getState:member(1)",
              "docComment": "/**\n * Holds all the state that we could proxy from CallClient {@link @azure/communication-calling#CallClient} as CallClientState {@link CallClientState}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getState(): "
                },
                {
                  "kind": "Reference",
                  "text": "CallClientState",
                  "canonicalReference": "@azure/communication-react!CallClientState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getState"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!StatefulCallClient#offStateChange:member(1)",
              "docComment": "/**\n * Allows unregistering for 'stateChanged' events.\n *\n * @param handler - Original callback to be unsubscribed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offStateChange(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(state: "
                },
                {
                  "kind": "Reference",
                  "text": "CallClientState",
                  "canonicalReference": "@azure/communication-react!CallClientState:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "offStateChange"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!StatefulCallClient#onStateChange:member(1)",
              "docComment": "/**\n * Allows a handler to be registered for 'stateChanged' events.\n *\n * @param handler - Callback to receive the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStateChange(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(state: "
                },
                {
                  "kind": "Reference",
                  "text": "CallClientState",
                  "canonicalReference": "@azure/communication-react!CallClientState:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "onStateChange"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!StatefulCallClientArgs:type",
          "docComment": "/**\n * Arguments to construct the StatefulCallClient.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StatefulCallClientArgs = "
            },
            {
              "kind": "Content",
              "text": "{\n    userId: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationUserIdentifier",
              "canonicalReference": "@azure/communication-common!CommunicationUserIdentifier:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StatefulCallClientArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!StatefulCallClientOptions:type",
          "docComment": "/**\n * Options to construct the StatefulCallClient with.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StatefulCallClientOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    callClientOptions: "
            },
            {
              "kind": "Reference",
              "text": "CallClientOptions",
              "canonicalReference": "@azure/communication-calling!CallClientOptions:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    maxStateChangeListeners?: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StatefulCallClientOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!StatefulChatClient:interface",
          "docComment": "/**\n * Defines the methods that allow {@Link @azure/communication-chat#ChatClient} to be used with a centralized generated state.\n *\n * The interface provides access to proxied state and also allows registering a handler for state change events.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StatefulChatClient extends "
            },
            {
              "kind": "Reference",
              "text": "ChatClient",
              "canonicalReference": "@azure/communication-chat!ChatClient:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StatefulChatClient",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!StatefulChatClient#getState:member(1)",
              "docComment": "/**\n * Holds all the state that we could proxy from ChatClient {@Link @azure/communication-chat#ChatClient} as ChatClientState {@Link ChatClientState}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getState(): "
                },
                {
                  "kind": "Reference",
                  "text": "ChatClientState",
                  "canonicalReference": "@azure/communication-react!ChatClientState:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getState"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!StatefulChatClient#offStateChange:member(1)",
              "docComment": "/**\n * Allows unregistering for 'stateChanged' events.\n *\n * @param handler - Original callback to be unsubscribed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offStateChange(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(state: "
                },
                {
                  "kind": "Reference",
                  "text": "ChatClientState",
                  "canonicalReference": "@azure/communication-react!ChatClientState:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "offStateChange"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@azure/communication-react!StatefulChatClient#onStateChange:member(1)",
              "docComment": "/**\n * Allows a handler to be registered for 'stateChanged' events.\n *\n * @param handler - Callback to receive the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onStateChange(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(state: "
                },
                {
                  "kind": "Reference",
                  "text": "ChatClientState",
                  "canonicalReference": "@azure/communication-react!ChatClientState:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "onStateChange"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!StatefulChatClientArgs:type",
          "docComment": "/**\n * Arguments to construct the {@link StatefulChatClient}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StatefulChatClientArgs = "
            },
            {
              "kind": "Content",
              "text": "{\n    userId: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationUserIdentifier",
              "canonicalReference": "@azure/communication-common!CommunicationUserIdentifier:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    displayName: string;\n    endpoint: string;\n    credential: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationTokenCredential",
              "canonicalReference": "@azure/communication-common!CommunicationTokenCredential:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StatefulChatClientArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!StatefulChatClientOptions:type",
          "docComment": "/**\n * Options to construct the {@link StatefulChatClient}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StatefulChatClientOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    chatClientOptions: "
            },
            {
              "kind": "Reference",
              "text": "ChatClientOptions",
              "canonicalReference": "@azure/communication-chat!ChatClientOptions:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    maxStateChangeListeners?: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StatefulChatClientOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!StatefulDeviceManager:interface",
          "docComment": "/**\n * Defines the additional methods added by the stateful on top of {@link @azure/communication-calling#DeviceManager}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StatefulDeviceManager extends "
            },
            {
              "kind": "Reference",
              "text": "DeviceManager",
              "canonicalReference": "@azure/communication-calling!DeviceManager:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StatefulDeviceManager",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!StatefulDeviceManager#selectCamera:member",
              "docComment": "/**\n * Sets the selectedCamera in the {@link DeviceManagerState}. This is completely developer driven and is not tied in any way to {@link @azure/communication-calling#DeviceManager}. It is entirely contained in {@link StatefulDeviceManager}. See also {@link DeviceManagerState.selectedCamera}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectCamera: "
                },
                {
                  "kind": "Content",
                  "text": "(VideoDeviceInfo: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selectCamera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!StreamMedia:var",
          "docComment": "/**\n * Utility component to convert an HTMLElement with a video stream into a JSX element.\n *\n * Use to convert an HTMLElement returned by headless calling API into a component that can be rendered as a {@link VideoTile}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StreamMedia: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "StreamMediaProps",
              "canonicalReference": "@azure/communication-react!StreamMediaProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "StreamMedia",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!StreamMediaProps:interface",
          "docComment": "/**\n * Props for {@link StreamMedia}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StreamMediaProps "
            }
          ],
          "releaseTag": "Public",
          "name": "StreamMediaProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!StreamMediaProps#isMirrored:member",
              "docComment": "/**\n * Decides whether to mirror the video or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMirrored?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isMirrored",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!StreamMediaProps#loadingState:member",
              "docComment": "/**\n * Whether the stream is loading data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadingState?: "
                },
                {
                  "kind": "Reference",
                  "text": "LoadingState",
                  "canonicalReference": "@azure/communication-react!LoadingState:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "loadingState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!StreamMediaProps#styles:member",
              "docComment": "/**\n * Allows users to pass in an object contains custom CSS styles.\n *\n * @Example\n * ```\n * <StreamMedia styles={{ root: { background: 'blue' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "BaseCustomStyles",
                  "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!StreamMediaProps#videoStreamElement:member",
              "docComment": "/**\n * Video stream element to render.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "videoStreamElement: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "videoStreamElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!SystemMessage:type",
          "docComment": "/**\n * Discriminated union of all system messages.\n *\n * The `systemMessageType` field specializes into union variants.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SystemMessage = "
            },
            {
              "kind": "Reference",
              "text": "ParticipantAddedSystemMessage",
              "canonicalReference": "@azure/communication-react!ParticipantAddedSystemMessage:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ParticipantRemovedSystemMessage",
              "canonicalReference": "@azure/communication-react!ParticipantRemovedSystemMessage:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TopicUpdatedSystemMessage",
              "canonicalReference": "@azure/communication-react!TopicUpdatedSystemMessage:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ContentSystemMessage",
              "canonicalReference": "@azure/communication-react!ContentSystemMessage:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SystemMessage",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!SystemMessageCommon:interface",
          "docComment": "/**\n * Common properties of all system messages.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SystemMessageCommon extends "
            },
            {
              "kind": "Reference",
              "text": "MessageCommon",
              "canonicalReference": "@azure/communication-react!MessageCommon:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SystemMessageCommon",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SystemMessageCommon#iconName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "iconName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!SystemMessageCommon#messageType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageType: "
                },
                {
                  "kind": "Content",
                  "text": "'system'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "messageType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!toFlatCommunicationIdentifier:var",
          "docComment": "/**\n * A string representation of a {@link @azure/communication-common#CommunicationIdentifier}.\n *\n * This string representation of CommunicationIdentifier is guaranteed to be stable for a unique Communication user. Thus, - it can be used to persist a user's identity in external databases. - it can be used as keys into a Map to store data for the user.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "toFlatCommunicationIdentifier: "
            },
            {
              "kind": "Content",
              "text": "(identifier: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationIdentifier",
              "canonicalReference": "@azure/communication-common!CommunicationIdentifier:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "releaseTag": "Public",
          "name": "toFlatCommunicationIdentifier",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!TopicChangedListener:type",
          "docComment": "/**\n * Callback for {@link ChatAdapterSubscribers} 'topicChanged' event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TopicChangedListener = "
            },
            {
              "kind": "Content",
              "text": "(event: {\n    topic: string;\n}) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TopicChangedListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!TopicUpdatedSystemMessage:interface",
          "docComment": "/**\n * A system message notifying that the chat thread topic was updated.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TopicUpdatedSystemMessage extends "
            },
            {
              "kind": "Reference",
              "text": "SystemMessageCommon",
              "canonicalReference": "@azure/communication-react!SystemMessageCommon:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TopicUpdatedSystemMessage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TopicUpdatedSystemMessage#systemMessageType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "systemMessageType: "
                },
                {
                  "kind": "Content",
                  "text": "'topicUpdated'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "systemMessageType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TopicUpdatedSystemMessage#topic:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "topic: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "topic",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!TranscriptionCallFeature:interface",
          "docComment": "/**\n * State only version of {@link @azure/communication-calling#TranscriptionCallFeature}. {@link StatefulCallClient} will automatically listen for transcription state of the call and update the state exposed by {@link StatefulCallClient} accordingly.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TranscriptionCallFeatureState "
            }
          ],
          "releaseTag": "Public",
          "name": "TranscriptionCallFeature",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TranscriptionCallFeature#isTranscriptionActive:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#TranscriptionCallFeature.isTranscriptionActive}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTranscriptionActive: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isTranscriptionActive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!TypingIndicator:var",
          "docComment": "/**\n * Component to notify local user when one or more participants in the chat thread are typing.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TypingIndicator: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "TypingIndicatorProps",
              "canonicalReference": "@azure/communication-react!TypingIndicatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "TypingIndicator",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!TypingIndicatorProps:interface",
          "docComment": "/**\n * Props for {@link TypingIndicator}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TypingIndicatorProps "
            }
          ],
          "releaseTag": "Public",
          "name": "TypingIndicatorProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorProps#onRenderUser:member",
              "docComment": "/**\n * Callback to render typing users\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderUser?: "
                },
                {
                  "kind": "Content",
                  "text": "(users: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationParticipant",
                  "canonicalReference": "@azure/communication-react!CommunicationParticipant:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderUser",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TypingIndicatorStrings",
                  "canonicalReference": "@azure/communication-react!TypingIndicatorStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorProps#styles:member",
              "docComment": "/**\n * Allows users to pass in an object contains custom CSS styles.\n *\n * @Example\n * ```\n * <TypingIndicator styles={{ root: { background: 'blue' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "TypingIndicatorStylesProps",
                  "canonicalReference": "@azure/communication-react!TypingIndicatorStylesProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorProps#typingUsers:member",
              "docComment": "/**\n * List of the typing users.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typingUsers: "
                },
                {
                  "kind": "Reference",
                  "text": "CommunicationParticipant",
                  "canonicalReference": "@azure/communication-react!CommunicationParticipant:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "typingUsers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!TypingIndicatorSelector:type",
          "docComment": "/**\n * Selector type for {@link TypingIndicator} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TypingIndicatorSelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "ChatClientState",
              "canonicalReference": "@azure/communication-react!ChatClientState:type"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "ChatBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!ChatBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    typingUsers: "
            },
            {
              "kind": "Reference",
              "text": "CommunicationParticipant",
              "canonicalReference": "@azure/communication-react!CommunicationParticipant:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TypingIndicatorSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!TypingIndicatorStrings:interface",
          "docComment": "/**\n * Strings of {@link TypingIndicator} that can be overridden.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TypingIndicatorStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "TypingIndicatorStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorStrings#delimiter:member",
              "docComment": "/**\n * String to use as delimiter to separate multiple users.\n *\n * @example\n * ```\n * <TypingIndicator\n *  strings={{ delimiter: ' + ' }}\n *  typingUsers={[\n *    { userId: 'user1', displayName: 'Claire' },\n *    { userId: 'user2', displayName: 'Chris' },\n *    { userId: 'user3', displayName: 'Jill' }\n *  ]}\n * />\n * ```\n *\n * would be 'Claire + Chris + Jill are typing...'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delimiter: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "delimiter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorStrings#multipleUsers:member",
              "docComment": "/**\n * String template to use when multiple users are typing. Placeholders: [users].\n *\n * @example\n * ```\n * <TypingIndicator\n *  strings={{ multipleUsers: '{users} are typing...' }}\n *  typingUsers={[\n *    { userId: 'user1', displayName: 'Claire' },\n *    { userId: 'user2', displayName: 'Christopher' }\n *  ]}\n * />\n * ```\n *\n * would be 'Claire, Chris are typing...'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multipleUsers: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "multipleUsers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorStrings#multipleUsersAbbreviateMany:member",
              "docComment": "/**\n * String template to use when multiple users are typing with one other user abbreviated. Placeholders: [users, numOthers].\n *\n * @example\n * ```\n * <TypingIndicator\n *  strings={{ multipleUsersAbbreviateMany: '{users} and {numOthers} others are typing...' }}\n *  typingUsers={[\n *    { userId: 'user1', displayName: 'Claire Romanov' },\n *    { userId: 'user2', displayName: 'Christopher Rutherford' },\n *    { userId: 'user3', displayName: 'Jill Vernblom' }\n *  ]}\n * />\n * ```\n *\n * would be 'Claire Romanov and 2 others are typing...'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multipleUsersAbbreviateMany: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "multipleUsersAbbreviateMany",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorStrings#multipleUsersAbbreviateOne:member",
              "docComment": "/**\n * String template to use when multiple users are typing with one other user abbreviated. Placeholders: [users].\n *\n * @example\n * ```typescript\n * <TypingIndicator\n * strings={{ multipleUsersAbbreviateOne: '{users} and 1 other are typing...' }}\n * typingUsers={[\n * { userId: 'user1', displayName: 'Claire Romanov' },\n * { userId: 'user2', displayName: 'Christopher Rutherford' }\n * ]}\n * />\n * ```\n *\n * would be 'Claire Romanov and 1 other are typing...'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multipleUsersAbbreviateOne: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "multipleUsersAbbreviateOne",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorStrings#singleUser:member",
              "docComment": "/**\n * String template to use when one user is typing. Placeholders: [user].\n *\n * @example\n * ```\n * <TypingIndicator\n *  strings={{ multipleUsersAbbreviateOne: '{users} is typing...' }}\n *  typingUsers={[{ userId: 'user1', displayName: 'Claire' }]}\n * />\n * ```\n *\n * would be 'Claire is typing...'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "singleUser: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "singleUser",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!TypingIndicatorStylesProps:interface",
          "docComment": "/**\n * Fluent styles for {@link TypingIndicator}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TypingIndicatorStylesProps extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCustomStyles",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TypingIndicatorStylesProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorStylesProps#typingString:member",
              "docComment": "/**\n * Styles for the typing string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typingString?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "typingString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!TypingIndicatorStylesProps#typingUserDisplayName:member",
              "docComment": "/**\n * Styles for each typing user's displayName.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typingUserDisplayName?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "typingUserDisplayName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!UpdateMessageCallback:type",
          "docComment": "/**\n * Callback function run when a message is updated.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type UpdateMessageCallback = "
            },
            {
              "kind": "Content",
              "text": "(messageId: string, content: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdateMessageCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useAzureCommunicationCallAdapter:var",
          "docComment": "/**\n * A custom React hook to simplify the creation of {@link CallAdapter}.\n *\n * Similar to {@link createAzureCommunicationCallAdapter}, but takes care of asynchronous creation of the adapter internally.\n *\n * Allows arguments to be undefined so that you can respect the rule-of-hooks and pass in arguments as they are created. The adapter is only created when all arguments are defined.\n *\n * Note that you must memoize the arguments to avoid recreating adapter on each render. See storybook for typical usage examples.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useAzureCommunicationCallAdapter: "
            },
            {
              "kind": "Content",
              "text": "(args: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AzureCommunicationCallAdapterArgs",
              "canonicalReference": "@azure/communication-react!AzureCommunicationCallAdapterArgs:type"
            },
            {
              "kind": "Content",
              "text": ">, afterCreate?: ((adapter: "
            },
            {
              "kind": "Reference",
              "text": "CallAdapter",
              "canonicalReference": "@azure/communication-react!CallAdapter:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallAdapterCommon",
              "canonicalReference": "@azure/communication-react!CallAdapterCommon:interface"
            },
            {
              "kind": "Content",
              "text": ">) | undefined, beforeDispose?: ((adapter: "
            },
            {
              "kind": "Reference",
              "text": "CallAdapter",
              "canonicalReference": "@azure/communication-react!CallAdapter:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>) | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "CallAdapter",
              "canonicalReference": "@azure/communication-react!CallAdapter:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "releaseTag": "Public",
          "name": "useAzureCommunicationCallAdapter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useAzureCommunicationCallWithChatAdapter:var",
          "docComment": "/**\n * A custom React hook to simplify the creation of {@link CallWithChatAdapter}.\n *\n * Similar to {@link createAzureCommunicationCallWithChatAdapter}, but takes care of asynchronous creation of the adapter internally.\n *\n * Allows arguments to be undefined so that you can respect the rule-of-hooks and pass in arguments as they are created. The adapter is only created when all arguments are defined.\n *\n * Note that you must memoize the arguments to avoid recreating adapter on each render. See storybook for typical usage examples.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useAzureCommunicationCallWithChatAdapter: "
            },
            {
              "kind": "Content",
              "text": "(args: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AzureCommunicationCallWithChatAdapterArgs",
              "canonicalReference": "@azure/communication-react!AzureCommunicationCallWithChatAdapterArgs:type"
            },
            {
              "kind": "Content",
              "text": ">, afterCreate?: ((adapter: "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapter",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapter",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ">) | undefined, beforeDispose?: ((adapter: "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapter",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>) | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "CallWithChatAdapter",
              "canonicalReference": "@azure/communication-react!CallWithChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "releaseTag": "Public",
          "name": "useAzureCommunicationCallWithChatAdapter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useAzureCommunicationChatAdapter:var",
          "docComment": "/**\n * A custom React hook to simplify the creation of {@link ChatAdapter}.\n *\n * Similar to {@link createAzureCommunicationChatAdapter}, but takes care of asynchronous creation of the adapter internally.\n *\n * Allows arguments to be undefined so that you can respect the rule-of-hooks and pass in arguments as they are created. The adapter is only created when all arguments are defined.\n *\n * Note that you must memoize the arguments to avoid recreating adapter on each render. See storybook for typical usage examples.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useAzureCommunicationChatAdapter: "
            },
            {
              "kind": "Content",
              "text": "(args: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AzureCommunicationChatAdapterArgs",
              "canonicalReference": "@azure/communication-react!AzureCommunicationChatAdapterArgs:type"
            },
            {
              "kind": "Content",
              "text": ">, afterCreate?: ((adapter: "
            },
            {
              "kind": "Reference",
              "text": "ChatAdapter",
              "canonicalReference": "@azure/communication-react!ChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChatAdapter",
              "canonicalReference": "@azure/communication-react!ChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ">) | undefined, beforeDispose?: ((adapter: "
            },
            {
              "kind": "Reference",
              "text": "ChatAdapter",
              "canonicalReference": "@azure/communication-react!ChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>) | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "ChatAdapter",
              "canonicalReference": "@azure/communication-react!ChatAdapter:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "releaseTag": "Public",
          "name": "useAzureCommunicationChatAdapter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useCall:var",
          "docComment": "/**\n * Hook to obtain {@link @azure/communication-calling#Call} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * you must have previously used the CallProvider with a Call object to use this hook\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useCall: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Call",
              "canonicalReference": "@azure/communication-calling!Call:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "releaseTag": "Public",
          "name": "useCall",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useCallAgent:var",
          "docComment": "/**\n * Hook to obtain {@link @azure/communication-calling#CallAgent} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useCallAgent: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "CallAgent",
              "canonicalReference": "@azure/communication-calling!CallAgent:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "releaseTag": "Public",
          "name": "useCallAgent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useCallClient:var",
          "docComment": "/**\n * Hook to obtain {@link StatefulCallClient} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useCallClient: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "StatefulCallClient",
              "canonicalReference": "@azure/communication-react!StatefulCallClient:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "useCallClient",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useChatClient:var",
          "docComment": "/**\n * Hook to obtain {@link StatefulChatClient} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useChatClient: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "StatefulChatClient",
              "canonicalReference": "@azure/communication-react!StatefulChatClient:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "useChatClient",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useChatThreadClient:var",
          "docComment": "/**\n * Hook to obtain {@link @azure/communication-chat#ChatThreadClient} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useChatThreadClient: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "ChatThreadClient",
              "canonicalReference": "@azure/communication-chat!ChatThreadClient:class"
            }
          ],
          "releaseTag": "Public",
          "name": "useChatThreadClient",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useDeviceManager:var",
          "docComment": "/**\n * Hook to obtain {@link StatefulDeviceManager} from the provider.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useDeviceManager: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "StatefulDeviceManager",
              "canonicalReference": "@azure/communication-react!StatefulDeviceManager:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "releaseTag": "Public",
          "name": "useDeviceManager",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!usePropsFor:var",
          "docComment": "/**\n * Primary hook to get all hooks necessary for a React Component from this library.\n *\n * To call this hook, the component requires to be wrapped under these providers:\n *\n * 1. For chat components: {@link ChatClientProvider} and {@link ChatThreadClientProvider}.\n *\n * 2. For calling components: {@link CallClientProvider}, {@link CallAgentProvider} and {@link CallAgentProvider}.\n *\n * Most straightforward usage of a components looks like:\n *\n * @example\n * ```\n *     import { ParticipantList, usePropsFor } from '@azure/communication-react';\n *\n *     const App = (): JSX.Element => {\n *         // ... code to setup Providers ...\n *\n *         return <ParticipantList {...usePropsFor(ParticipantList)}/>\n *     }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "usePropsFor: "
            },
            {
              "kind": "Content",
              "text": "<Component extends (props: any) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ">(component: Component, type?: \"chat\" | \"calling\" | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "ComponentProps",
              "canonicalReference": "@azure/communication-react!ComponentProps:type"
            },
            {
              "kind": "Content",
              "text": "<Component>"
            }
          ],
          "releaseTag": "Public",
          "name": "usePropsFor",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useSelector:var",
          "docComment": "/**\n * Hook to obtain a selector for a specified component.\n *\n * Useful when implementing a custom component that utilizes the providers exported from this library.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useSelector: "
            },
            {
              "kind": "Content",
              "text": "<ParamT extends "
            },
            {
              "kind": "Reference",
              "text": "Selector",
              "canonicalReference": "@azure/communication-react!Selector:type"
            },
            {
              "kind": "Content",
              "text": " | undefined>(selector: ParamT, selectorProps?: (ParamT extends "
            },
            {
              "kind": "Reference",
              "text": "Selector",
              "canonicalReference": "@azure/communication-react!Selector:type"
            },
            {
              "kind": "Content",
              "text": " ? "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<ParamT>[1] : undefined) | undefined, type?: \"chat\" | \"calling\" | undefined) => ParamT extends "
            },
            {
              "kind": "Reference",
              "text": "Selector",
              "canonicalReference": "@azure/communication-react!Selector:type"
            },
            {
              "kind": "Content",
              "text": " ? "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<ParamT> : undefined"
            }
          ],
          "releaseTag": "Public",
          "name": "useSelector",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!useTheme:var",
          "docComment": "/**\n * React hook to access theme\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useTheme: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Theme",
              "canonicalReference": "@fluentui/theme!Theme:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "useTheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!VideoGallery:var",
          "docComment": "/**\n * VideoGallery represents a layout of video tiles for a specific call. It displays a {@link VideoTile} for the local user as well as for each remote participant who has joined the call.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VideoGallery: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "VideoGalleryProps",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGallery",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!VideoGalleryLayout:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type VideoGalleryLayout = "
            },
            {
              "kind": "Content",
              "text": "'default' | 'floatingLocalVideo'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGalleryLayout",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!VideoGalleryLocalParticipant:type",
          "docComment": "/**\n * The state of the local participant in the {@link VideoGallery}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type VideoGalleryLocalParticipant = "
            },
            {
              "kind": "Reference",
              "text": "VideoGalleryParticipant",
              "canonicalReference": "@azure/communication-react!VideoGalleryParticipant:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGalleryLocalParticipant",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!VideoGalleryParticipant:type",
          "docComment": "/**\n * The state of a participant in the {@link VideoGallery}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type VideoGalleryParticipant = "
            },
            {
              "kind": "Content",
              "text": "{\n    userId: string;\n    isMuted?: boolean;\n    displayName?: string;\n    videoStream?: "
            },
            {
              "kind": "Reference",
              "text": "VideoGalleryStream",
              "canonicalReference": "@azure/communication-react!VideoGalleryStream:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    isScreenSharingOn?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGalleryParticipant",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!VideoGalleryProps:interface",
          "docComment": "/**\n * Props for {@link VideoGallery}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VideoGalleryProps "
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGalleryProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#dominantSpeakers:member",
              "docComment": "/**\n * List of dominant speaker userIds in the order of their dominance. 0th index is the most dominant.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dominantSpeakers?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dominantSpeakers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#layout:member",
              "docComment": "/**\n * Layout of the video tiles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layout?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoGalleryLayout",
                  "canonicalReference": "@azure/communication-react!VideoGalleryLayout:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "layout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#localParticipant:member",
              "docComment": "/**\n * Local video particpant\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localParticipant: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoGalleryLocalParticipant",
                  "canonicalReference": "@azure/communication-react!VideoGalleryLocalParticipant:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "localParticipant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#localVideoCameraCycleButtonProps:member",
              "docComment": "/**\n * Camera control information for button to switch cameras.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localVideoCameraCycleButtonProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "LocalVideoCameraCycleButtonProps",
                  "canonicalReference": "@azure/communication-react!LocalVideoCameraCycleButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "localVideoCameraCycleButtonProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#localVideoViewOptions:member",
              "docComment": "/**\n * Local video view options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localVideoViewOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "localVideoViewOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#maxRemoteVideoStreams:member",
              "docComment": "/**\n * Maximum number of participant remote video streams that is rendered.\n *\n * @defaultValue\n *\n * 4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxRemoteVideoStreams?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxRemoteVideoStreams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#onCreateLocalStreamView:member",
              "docComment": "/**\n * Callback to create the local video stream view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCreateLocalStreamView?: "
                },
                {
                  "kind": "Content",
                  "text": "(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void | "
                },
                {
                  "kind": "Reference",
                  "text": "CreateVideoStreamViewResult",
                  "canonicalReference": "@azure/communication-react!CreateVideoStreamViewResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onCreateLocalStreamView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#onCreateRemoteStreamView:member",
              "docComment": "/**\n * Callback to create a remote video stream view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCreateRemoteStreamView?: "
                },
                {
                  "kind": "Content",
                  "text": "(userId: string, options?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void | "
                },
                {
                  "kind": "Reference",
                  "text": "CreateVideoStreamViewResult",
                  "canonicalReference": "@azure/communication-react!CreateVideoStreamViewResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onCreateRemoteStreamView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#onDisposeLocalStreamView:member",
              "docComment": "/**\n * Callback to dispose of the local video stream view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDisposeLocalStreamView?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onDisposeLocalStreamView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#onDisposeRemoteStreamView:member",
              "docComment": "/**\n * Callback to dispose a remote video stream view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDisposeRemoteStreamView?: "
                },
                {
                  "kind": "Content",
                  "text": "(userId: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onDisposeRemoteStreamView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#onRenderAvatar:member",
              "docComment": "/**\n * Callback to render a particpant avatar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderAvatar?: "
                },
                {
                  "kind": "Reference",
                  "text": "OnRenderAvatarCallback",
                  "canonicalReference": "@azure/communication-react!OnRenderAvatarCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderAvatar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#onRenderLocalVideoTile:member",
              "docComment": "/**\n * Callback to render the local video tile\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderLocalVideoTile?: "
                },
                {
                  "kind": "Content",
                  "text": "(localParticipant: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoGalleryLocalParticipant",
                  "canonicalReference": "@azure/communication-react!VideoGalleryLocalParticipant:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderLocalVideoTile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#onRenderRemoteVideoTile:member",
              "docComment": "/**\n * Callback to render a remote video tile\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderRemoteVideoTile?: "
                },
                {
                  "kind": "Content",
                  "text": "(remoteParticipant: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoGalleryRemoteParticipant",
                  "canonicalReference": "@azure/communication-react!VideoGalleryRemoteParticipant:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderRemoteVideoTile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#remoteParticipants:member",
              "docComment": "/**\n * List of remote video particpants\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remoteParticipants?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoGalleryRemoteParticipant",
                  "canonicalReference": "@azure/communication-react!VideoGalleryRemoteParticipant:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "remoteParticipants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#remoteVideoViewOptions:member",
              "docComment": "/**\n * Remote videos view options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remoteVideoViewOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoStreamOptions",
                  "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "remoteVideoViewOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#showCameraSwitcherInLocalPreview:member",
              "docComment": "/**\n * Whether to display the local video camera switcher button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showCameraSwitcherInLocalPreview?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showCameraSwitcherInLocalPreview",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#showMuteIndicator:member",
              "docComment": "/**\n * Whether to display a mute icon beside the user's display name.\n *\n * @defaultValue\n *\n * `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showMuteIndicator?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showMuteIndicator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#strings:member",
              "docComment": "/**\n * Optional strings to override in component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "VideoGalleryStrings",
                  "canonicalReference": "@azure/communication-react!VideoGalleryStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryProps#styles:member",
              "docComment": "/**\n * Allows users to pass an object containing custom CSS styles for the gallery container.\n *\n * @Example\n * ```\n * <VideoGallery styles={{ root: { border: 'solid 1px red' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoGalleryStyles",
                  "canonicalReference": "@azure/communication-react!VideoGalleryStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!VideoGalleryRemoteParticipant:interface",
          "docComment": "/**\n * The state of a remote participant in the {@link VideoGallery}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VideoGalleryRemoteParticipant extends "
            },
            {
              "kind": "Reference",
              "text": "VideoGalleryParticipant",
              "canonicalReference": "@azure/communication-react!VideoGalleryParticipant:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGalleryRemoteParticipant",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryRemoteParticipant#isSpeaking:member",
              "docComment": "/**\n * Whether participant is speaking or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSpeaking?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isSpeaking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryRemoteParticipant#screenShareStream:member",
              "docComment": "/**\n * Video stream of shared screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenShareStream?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoGalleryStream",
                  "canonicalReference": "@azure/communication-react!VideoGalleryStream:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "screenShareStream",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!VideoGallerySelector:type",
          "docComment": "/**\n * Selector type for {@link VideoGallery} component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type VideoGallerySelector = "
            },
            {
              "kind": "Content",
              "text": "(state: "
            },
            {
              "kind": "Reference",
              "text": "CallClientState",
              "canonicalReference": "@azure/communication-react!CallClientState:interface"
            },
            {
              "kind": "Content",
              "text": ", props: "
            },
            {
              "kind": "Reference",
              "text": "CallingBaseSelectorProps",
              "canonicalReference": "@azure/communication-react!CallingBaseSelectorProps:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    screenShareParticipant: "
            },
            {
              "kind": "Reference",
              "text": "VideoGalleryRemoteParticipant",
              "canonicalReference": "@azure/communication-react!VideoGalleryRemoteParticipant:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    localParticipant: "
            },
            {
              "kind": "Reference",
              "text": "VideoGalleryLocalParticipant",
              "canonicalReference": "@azure/communication-react!VideoGalleryLocalParticipant:type"
            },
            {
              "kind": "Content",
              "text": ";\n    remoteParticipants: "
            },
            {
              "kind": "Reference",
              "text": "VideoGalleryRemoteParticipant",
              "canonicalReference": "@azure/communication-react!VideoGalleryRemoteParticipant:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    dominantSpeakers?: string[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGallerySelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!VideoGalleryStream:interface",
          "docComment": "/**\n * Video stream of a participant in {@link VideoGallery}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VideoGalleryStream "
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGalleryStream",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStream#id:member",
              "docComment": "/**\n * ID of the video stream\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStream#isAvailable:member",
              "docComment": "/**\n * Whether the video stream is available or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAvailable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isAvailable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStream#isMirrored:member",
              "docComment": "/**\n * Whether the video stream is mirrored or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMirrored?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isMirrored",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStream#isReceiving:member",
              "docComment": "/**\n * Whether the video stream is receiving data or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isReceiving?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isReceiving",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStream#renderElement:member",
              "docComment": "/**\n * Render element of the video stream\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderElement?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "renderElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!VideoGalleryStrings:interface",
          "docComment": "/**\n * All strings that may be shown on the UI in the {@link VideoGallery}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VideoGalleryStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGalleryStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStrings#displayNamePlaceholder:member",
              "docComment": "/**\n * placeholder text for participants who does not have a display name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayNamePlaceholder: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "displayNamePlaceholder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStrings#localVideoCameraSwitcherLabel:member",
              "docComment": "/**\n * String for local video camera switcher\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localVideoCameraSwitcherLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "localVideoCameraSwitcherLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStrings#localVideoLabel:member",
              "docComment": "/**\n * String for local video label. Default is \"You\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localVideoLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "localVideoLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStrings#localVideoMovementLabel:member",
              "docComment": "/**\n * String for announcing the local video tile can be moved by keyboard controls\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localVideoMovementLabel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "localVideoMovementLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStrings#localVideoSelectedDescription:member",
              "docComment": "/**\n * String for announcing the selected camera\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localVideoSelectedDescription: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "localVideoSelectedDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStrings#screenIsBeingSharedMessage:member",
              "docComment": "/**\n * String to notify that local user is sharing their screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenIsBeingSharedMessage: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "screenIsBeingSharedMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStrings#screenShareLoadingMessage:member",
              "docComment": "/**\n * String to show when remote screen share stream is loading\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenShareLoadingMessage: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "screenShareLoadingMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!VideoGalleryStyles:interface",
          "docComment": "/**\n * {@link VideoGallery} Component Styles.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VideoGalleryStyles extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCustomStyles",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "VideoGalleryStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStyles#gridLayout:member",
              "docComment": "/**\n * Styles for the grid layout\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gridLayout?: "
                },
                {
                  "kind": "Reference",
                  "text": "GridLayoutStyles",
                  "canonicalReference": "@azure/communication-react!GridLayoutStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "gridLayout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStyles#horizontalGallery:member",
              "docComment": "/**\n * Styles for the horizontal gallery\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "horizontalGallery?: "
                },
                {
                  "kind": "Reference",
                  "text": "HorizontalGalleryStyles",
                  "canonicalReference": "@azure/communication-react!HorizontalGalleryStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "horizontalGallery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoGalleryStyles#localVideo:member",
              "docComment": "/**\n * Styles for the local video\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localVideo?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "localVideo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!VideoStreamOptions:interface",
          "docComment": "/**\n * Options to control how video streams are rendered.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare interface VideoStreamOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "VideoStreamOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoStreamOptions#isMirrored:member",
              "docComment": "/**\n * Whether the video stream is mirrored or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMirrored?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isMirrored",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoStreamOptions#scalingMode:member",
              "docComment": "/**\n * Scaling mode. It can be `Stretch`, `Crop` or `Fit`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scalingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ViewScalingMode",
                  "canonicalReference": "@azure/communication-react!ViewScalingMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scalingMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!VideoStreamRendererViewState:interface",
          "docComment": "/**\n * State only version of {@link @azure/communication-calling#VideoStreamRendererView}. This property is added to the state exposed by {@link StatefulCallClient} by {@link StatefulCallClient.createView} and removed by {@link StatefulCallClient.disposeView}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VideoStreamRendererViewState "
            }
          ],
          "releaseTag": "Public",
          "name": "VideoStreamRendererViewState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoStreamRendererViewState#isMirrored:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#VideoStreamRendererView.isMirrored}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMirrored: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isMirrored",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoStreamRendererViewState#scalingMode:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#VideoStreamRendererView.scalingMode}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scalingMode: "
                },
                {
                  "kind": "Reference",
                  "text": "ScalingMode",
                  "canonicalReference": "@azure/communication-calling!ScalingMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scalingMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoStreamRendererViewState#target:member",
              "docComment": "/**\n * Proxy of {@link @azure/communication-calling#VideoStreamRendererView.target}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@azure/communication-react!VideoTile:var",
          "docComment": "/**\n * A component to render the video stream for a single call participant.\n *\n * Use with {@link GridLayout} in a {@link VideoGallery}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VideoTile: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "VideoTileProps",
              "canonicalReference": "@azure/communication-react!VideoTileProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "VideoTile",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!VideoTileProps:interface",
          "docComment": "/**\n * Props for {@link VideoTile}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VideoTileProps "
            }
          ],
          "releaseTag": "Public",
          "name": "VideoTileProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#children:member",
              "docComment": "/**\n * React Child components. Child Components will show as overlay component in the VideoTile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#displayName:member",
              "docComment": "/**\n * Display Name of the Participant to be shown in the label.\n *\n * @remarks\n *\n * `displayName` is used to generate avatar initials if `initialsName` is not provided.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "displayName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#initialsName:member",
              "docComment": "/**\n * Name of the participant used to generate initials. For example, a name `John Doe` will display `JD` as initials.\n *\n * @remarks\n *\n * `displayName` is used if this property is not specified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialsName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "initialsName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#isMirrored:member",
              "docComment": "/**\n * Determines if the video is mirrored or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMirrored?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isMirrored",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#isMuted:member",
              "docComment": "/**\n * Whether the video is muted or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMuted?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isMuted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#isSpeaking:member",
              "docComment": "/**\n * Whether the participant in the videoTile is speaking. Shows a speaking indicator (border).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSpeaking?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isSpeaking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#noVideoAvailableAriaLabel:member",
              "docComment": "/**\n * Optional property to set the aria label of the video tile if there is no available stream.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noVideoAvailableAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noVideoAvailableAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#onRenderPlaceholder:member",
              "docComment": "/**\n * Custom render Component function for no video is available. Render a Persona Icon if undefined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderPlaceholder?: "
                },
                {
                  "kind": "Reference",
                  "text": "OnRenderAvatarCallback",
                  "canonicalReference": "@azure/communication-react!OnRenderAvatarCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onRenderPlaceholder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#personaMaxSize:member",
              "docComment": "/**\n * Maximum size of the personal avatar in px. The persona avatar is the default placeholder shown when no video stream is available. For more information see https://developer.microsoft.com/en-us/fluentui#/controls/web/persona\n *\n * @defaultValue\n *\n * 100px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personaMaxSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "personaMaxSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#personaMinSize:member",
              "docComment": "/**\n * Minimum size of the persona avatar in px. The persona avatar is the default placeholder shown when no video stream is available. For more information see https://developer.microsoft.com/en-us/fluentui#/controls/web/persona\n *\n * @defaultValue\n *\n * 32px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personaMinSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "personaMinSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#renderElement:member",
              "docComment": "/**\n * Component with the video stream.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderElement?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "renderElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#showLabel:member",
              "docComment": "/**\n * Show label on the VideoTile\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#showMuteIndicator:member",
              "docComment": "/**\n * Whether to display a mute icon beside the user's display name.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showMuteIndicator?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "showMuteIndicator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#styles:member",
              "docComment": "/**\n * Allows users to pass in an object contains custom CSS styles.\n *\n * @Example\n * ```\n * <VideoTile styles={{ root: { background: 'blue' } }} />\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "VideoTileStylesProps",
                  "canonicalReference": "@azure/communication-react!VideoTileStylesProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileProps#userId:member",
              "docComment": "/**\n * user id for the VideoTile placeholder.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "userId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@azure/communication-react!VideoTileStylesProps:interface",
          "docComment": "/**\n * Fluent styles for {@link VideoTile}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VideoTileStylesProps extends "
            },
            {
              "kind": "Reference",
              "text": "BaseCustomStyles",
              "canonicalReference": "@azure/communication-react!BaseCustomStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "VideoTileStylesProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileStylesProps#displayNameContainer:member",
              "docComment": "/**\n * Styles for displayName on the video container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayNameContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "displayNameContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileStylesProps#overlayContainer:member",
              "docComment": "/**\n * Styles for container overlayed on the video container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overlayContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overlayContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@azure/communication-react!VideoTileStylesProps#videoContainer:member",
              "docComment": "/**\n * Styles for video container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "videoContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "videoContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@azure/communication-react!ViewScalingMode:type",
          "docComment": "/**\n * Scaling mode of a {@link VideoGalleryStream}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ViewScalingMode = "
            },
            {
              "kind": "Content",
              "text": "'Stretch' | 'Crop' | 'Fit'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ViewScalingMode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
