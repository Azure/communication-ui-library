{"version":3,"file":"InitAction.js","sourceRoot":"","sources":["../../src/cli/InitAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,oDAA4B;AAC5B,2CAA6B;AAC7B,oEAA0D;AAC1D,gEAA+D;AAG/D,4DAAyD;AAEzD,MAAa,UAAW,SAAQ,mCAAiB;IAC/C,YAAmB,MAA+B;QAChD,KAAK,CAAC;YACJ,UAAU,EAAE,MAAM;YAClB,OAAO,EAAE,aAAa,iCAAe,CAAC,QAAQ,cAAc;YAC5D,aAAa,EACX,iFAAiF;gBACjF,IAAI,iCAAe,CAAC,QAAQ,0EAA0E;gBACtG,qDAAqD;SACxD,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,WAAW;QACX,oBAAoB;IACtB,CAAC;IAES,KAAK,CAAC,SAAS;QACvB,WAAW;QACX,MAAM,aAAa,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,wCAAwC,CAAC,CAAC;QAChG,MAAM,cAAc,GAAW,IAAI,CAAC,OAAO,CAAC,iCAAe,CAAC,QAAQ,CAAC,CAAC;QAEtE,IAAI,8BAAU,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;YACrC,OAAO,CAAC,GAAG,CAAC,gBAAM,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC,CAAC;YAC3D,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,cAAc,GAAG,IAAI,CAAC,CAAC;YAC5C,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAChD;QAED,OAAO,CAAC,GAAG,CAAC,gBAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,cAAc,CAAC,CAAC;QAC7D,8BAAU,CAAC,QAAQ,CAAC;YAClB,UAAU,EAAE,aAAa;YACzB,eAAe,EAAE,cAAc;SAChC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CACT,qFAAqF;YACnF,oDAAoD,CACvD,CAAC;IACJ,CAAC;CACF;AAvCD,gCAuCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as path from 'path';\r\nimport { FileSystem } from '@rushstack/node-core-library';\r\nimport { CommandLineAction } from '@rushstack/ts-command-line';\r\n\r\nimport { ApiExtractorCommandLine } from './ApiExtractorCommandLine';\r\nimport { ExtractorConfig } from '../api/ExtractorConfig';\r\n\r\nexport class InitAction extends CommandLineAction {\r\n  public constructor(parser: ApiExtractorCommandLine) {\r\n    super({\r\n      actionName: 'init',\r\n      summary: `Create an ${ExtractorConfig.FILENAME} config file`,\r\n      documentation:\r\n        `Use this command when setting up API Extractor for a new project.  It writes an` +\r\n        ` ${ExtractorConfig.FILENAME} config file template with code comments that describe all the settings.` +\r\n        ` The file will be written in the current directory.`\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    // override\r\n    // No parameters yet\r\n  }\r\n\r\n  protected async onExecute(): Promise<void> {\r\n    // override\r\n    const inputFilePath: string = path.resolve(__dirname, '../schemas/api-extractor-template.json');\r\n    const outputFilePath: string = path.resolve(ExtractorConfig.FILENAME);\r\n\r\n    if (FileSystem.exists(outputFilePath)) {\r\n      console.log(colors.red('The output file already exists:'));\r\n      console.log('\\n  ' + outputFilePath + '\\n');\r\n      throw new Error('Unable to write output file');\r\n    }\r\n\r\n    console.log(colors.green('Writing file: ') + outputFilePath);\r\n    FileSystem.copyFile({\r\n      sourcePath: inputFilePath,\r\n      destinationPath: outputFilePath\r\n    });\r\n\r\n    console.log(\r\n      '\\nThe recommended location for this file is in the project\\'s \"config\" subfolder,\\n' +\r\n        'or else in the top-level folder with package.json.'\r\n    );\r\n  }\r\n}\r\n"]}