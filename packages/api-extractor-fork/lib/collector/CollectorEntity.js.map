{"version":3,"file":"CollectorEntity.js","sourceRoot":"","sources":["../../src/collector/CollectorEntity.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,+CAAiC;AAEjC,qDAAkD;AAClD,2CAAwC;AACxC,oEAAoD;AAGpD;;;;;;;;GAQG;AACH,MAAa,eAAe;IAc1B,YAAmB,SAAoB;QAR/B,iBAAY,GAAgB,IAAI,GAAG,EAAU,CAAC;QAC9C,uBAAkB,GAAY,KAAK,CAAC;QACpC,sBAAiB,GAAuB,SAAS,CAAC;QAElD,iBAAY,GAAuB,SAAS,CAAC;QAE7C,aAAQ,GAAuB,SAAS,CAAC;QAG/C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,IAAW,WAAW,CAAC,KAAyB;QAC9C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC,8BAA8B;IAC3D,CAAC;IAED;;;;;;;;;;OAUG;IACH,IAAW,WAAW;QACpB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC5B,wBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAChC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;SAChC;QACD,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,IAAW,kBAAkB;QAC3B,+BAA+B;QAC/B,IAAI,IAAI,CAAC,SAAS,YAAY,qBAAS,EAAE;YACvC,4DAA4D;YAC5D,IAAI,IAAI,CAAC,iBAAiB,KAAK,SAAS,IAAI,IAAI,CAAC,iBAAiB,KAAK,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE;gBACpG,gFAAgF;gBAChF,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,iBAAiB,EAAE;oBACnF,OAAO,IAAI,CAAC;iBACb;aACF;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACI,aAAa,CAAC,UAAkB;QACrC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACtC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAElC,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,EAAE;gBAChC,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;aACrC;iBAAM;gBACL,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;aACpC;SACF;IACH,CAAC;IAED;;OAEG;IACI,UAAU;QACf,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,QAAQ,GAAG,qBAAS,CAAC,4BAA4B,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;SACtG;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF;AA7GD,0CA6GC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nimport { AstSymbol } from '../analyzer/AstSymbol';\r\nimport { Collector } from './Collector';\r\nimport { Sort } from '@rushstack/node-core-library';\r\nimport { AstEntity } from '../analyzer/AstSymbolTable';\r\n\r\n/**\r\n * This is a data structure used by the Collector to track an AstEntity that may be emitted in the *.d.ts file.\r\n *\r\n * @remarks\r\n * The additional contextual state beyond AstSymbol is:\r\n * - Whether it's an export of this entry point or not\r\n * - The nameForEmit, which may get renamed by DtsRollupGenerator._makeUniqueNames()\r\n * - The export name (or names, if the same declaration is exported multiple times)\r\n */\r\nexport class CollectorEntity {\r\n  /**\r\n   * The AstEntity that this entry represents.\r\n   */\r\n  public readonly astEntity: AstEntity;\r\n\r\n  private _exportNames: Set<string> = new Set<string>();\r\n  private _exportNamesSorted: boolean = false;\r\n  private _singleExportName: string | undefined = undefined;\r\n\r\n  private _nameForEmit: string | undefined = undefined;\r\n\r\n  private _sortKey: string | undefined = undefined;\r\n\r\n  public constructor(astEntity: AstEntity) {\r\n    this.astEntity = astEntity;\r\n  }\r\n\r\n  /**\r\n   * The declaration name that will be emitted in a .d.ts rollup.  For non-exported declarations,\r\n   * Collector._makeUniqueNames() may need to rename the declaration to avoid conflicts with other declarations\r\n   * in that module.\r\n   */\r\n  public get nameForEmit(): string | undefined {\r\n    return this._nameForEmit;\r\n  }\r\n\r\n  public set nameForEmit(value: string | undefined) {\r\n    this._nameForEmit = value;\r\n    this._sortKey = undefined; // invalidate the cached value\r\n  }\r\n\r\n  /**\r\n   * If this symbol is exported from the entry point, the list of export names.\r\n   *\r\n   * @remarks\r\n   * Note that a given symbol may be exported more than once:\r\n   * ```\r\n   * class X { }\r\n   * export { X }\r\n   * export { X as Y }\r\n   * ```\r\n   */\r\n  public get exportNames(): ReadonlySet<string> {\r\n    if (!this._exportNamesSorted) {\r\n      Sort.sortSet(this._exportNames);\r\n      this._exportNamesSorted = true;\r\n    }\r\n    return this._exportNames;\r\n  }\r\n\r\n  /**\r\n   * If exportNames contains only one string, then singleExportName is that string.\r\n   * In all other cases, it is undefined.\r\n   */\r\n  public get singleExportName(): string | undefined {\r\n    return this._singleExportName;\r\n  }\r\n\r\n  /**\r\n   * This is true if exportNames contains only one string, and the declaration can be exported using the inline syntax\r\n   * such as \"export class X { }\" instead of \"export { X }\".\r\n   */\r\n  public get shouldInlineExport(): boolean {\r\n    // We don't inline an AstImport\r\n    if (this.astEntity instanceof AstSymbol) {\r\n      // We don't inline a symbol with more than one exported name\r\n      if (this._singleExportName !== undefined && this._singleExportName !== ts.InternalSymbolName.Default) {\r\n        // We can't inline a symbol whose emitted name is different from the export name\r\n        if (this._nameForEmit === undefined || this._nameForEmit === this._singleExportName) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this symbol is an export for the entry point being analyzed.\r\n   */\r\n  public get exported(): boolean {\r\n    return this.exportNames.size > 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a new exportName to the exportNames set.\r\n   */\r\n  public addExportName(exportName: string): void {\r\n    if (!this._exportNames.has(exportName)) {\r\n      this._exportNamesSorted = false;\r\n      this._exportNames.add(exportName);\r\n\r\n      if (this._exportNames.size === 1) {\r\n        this._singleExportName = exportName;\r\n      } else {\r\n        this._singleExportName = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A sorting key used by DtsRollupGenerator._makeUniqueNames()\r\n   */\r\n  public getSortKey(): string {\r\n    if (!this._sortKey) {\r\n      this._sortKey = Collector.getSortKeyIgnoringUnderscore(this.nameForEmit || this.astEntity.localName);\r\n    }\r\n    return this._sortKey;\r\n  }\r\n}\r\n"]}