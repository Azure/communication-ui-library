{"version":3,"file":"VisitorState.js","sourceRoot":"","sources":["../../src/collector/VisitorState.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D;;GAEG;AACH,IAAY,YAiBX;AAjBD,WAAY,YAAY;IACtB;;OAEG;IACH,yDAAa,CAAA;IAEb;;;;OAIG;IACH,uDAAY,CAAA;IAEZ;;OAEG;IACH,qDAAW,CAAA;AACb,CAAC,EAjBW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAiBvB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Keeps track of a directed graph traversal that needs to detect cycles.\r\n */\r\nexport enum VisitorState {\r\n  /**\r\n   * We have not visited the node yet.\r\n   */\r\n  Unvisited = 0,\r\n\r\n  /**\r\n   * We have visited the node, but have not finished traversing its references yet.\r\n   * If we reach a node that is already in the `Visiting` state, this means we have\r\n   * encountered a cyclic reference.\r\n   */\r\n  Visiting = 1,\r\n\r\n  /**\r\n   * We are finished vising the node and all its references.\r\n   */\r\n  Visited = 2\r\n}\r\n"]}