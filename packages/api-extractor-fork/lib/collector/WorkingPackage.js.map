{"version":3,"file":"WorkingPackage.js","sourceRoot":"","sources":["../../src/collector/WorkingPackage.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAgB3D;;;;;;;;;;;;;GAaG;AACH,MAAa,cAAc;IAmCzB,YAAmB,OAA+B;QAChD,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;IAC3D,CAAC;IAED;;OAEG;IACH,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IAC/B,CAAC;CACF;AA/CD,wCA+CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\n\r\nimport { INodePackageJson } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * Constructor options for WorkingPackage\r\n */\r\nexport interface IWorkingPackageOptions {\r\n  packageFolder: string;\r\n  packageJson: INodePackageJson;\r\n  entryPointSourceFile: ts.SourceFile;\r\n}\r\n\r\n/**\r\n * Information about the working package for a particular invocation of API Extractor.\r\n *\r\n * @remarks\r\n * API Extractor tries to model the world as a collection of NPM packages, such that each\r\n * .d.ts file belongs to at most one package.  When API Extractor is invoked on a project,\r\n * we refer to that project as being the \"working package\".  There is exactly one\r\n * \"working package\" for the duration of this analysis.  Any files that do not belong to\r\n * the working package are referred to as \"external\":  external declarations belonging to\r\n * external packages.\r\n *\r\n * If API Extractor is invoked on a standalone .d.ts file, the \"working package\" may not\r\n * have an actual package.json file on disk, but we still refer to it in concept.\r\n */\r\nexport class WorkingPackage {\r\n  /**\r\n   * Returns the folder for the package.json file of the working package.\r\n   *\r\n   * @remarks\r\n   * If the entry point is `C:\\Folder\\project\\src\\index.ts` and the nearest package.json\r\n   * is `C:\\Folder\\project\\package.json`, then the packageFolder is `C:\\Folder\\project`\r\n   */\r\n  public readonly packageFolder: string;\r\n\r\n  /**\r\n   * The parsed package.json file for the working package.\r\n   */\r\n  public readonly packageJson: INodePackageJson;\r\n\r\n  /**\r\n   * The entry point being processed during this invocation of API Extractor.\r\n   *\r\n   * @remarks\r\n   * The working package may have multiple entry points; however, today API Extractor\r\n   * only processes a single entry point during an invocation.  This will be improved\r\n   * in the future.\r\n   */\r\n  public readonly entryPointSourceFile: ts.SourceFile;\r\n\r\n  /**\r\n   * The `@packageDocumentation` comment, if any, for the working package.\r\n   */\r\n  public tsdocComment: tsdoc.DocComment | undefined;\r\n\r\n  /**\r\n   * Additional parser information for `WorkingPackage.tsdocComment`.\r\n   */\r\n  public tsdocParserContext: tsdoc.ParserContext | undefined;\r\n\r\n  public constructor(options: IWorkingPackageOptions) {\r\n    this.packageFolder = options.packageFolder;\r\n    this.packageJson = options.packageJson;\r\n    this.entryPointSourceFile = options.entryPointSourceFile;\r\n  }\r\n\r\n  /**\r\n   * Returns the full name of the working package.\r\n   */\r\n  public get name(): string {\r\n    return this.packageJson.name;\r\n  }\r\n}\r\n"]}