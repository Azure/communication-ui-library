{"version":3,"file":"DeclarationMetadata.js","sourceRoot":"","sources":["../../src/collector/DeclarationMetadata.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAK3D;;;;;;;GAOG;AACH,MAAsB,mBAAmB;CAuBxC;AAvBD,kDAuBC;AAED;;GAEG;AACH,MAAa,2BAA4B,SAAQ,mBAAmB;IAApE;;QACS,uBAAkB,GAAoC,SAAS,CAAC;QAEhE,gBAAW,GAAY,KAAK,CAAC;QAE7B,0BAAqB,GAAqB,EAAE,CAAC;IACtD,CAAC;CAAA;AAND,kEAMC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\n\r\n/**\r\n * Stores the Collector's additional analysis for a specific `AstDeclaration` signature.  This object is assigned to\r\n * `AstDeclaration.declarationMetadata` but consumers must always obtain it by calling\r\n * `Collector.fetchDeclarationMetadata()`.\r\n *\r\n * Note that ancillary declarations share their `ApiItemMetadata` with the main declaration,\r\n * whereas a separate `DeclarationMetadata` object is created for each declaration.\r\n */\r\nexport abstract class DeclarationMetadata {\r\n  /**\r\n   * The ParserContext from when the TSDoc comment was parsed from the source code.\r\n   * If the source code did not contain a doc comment, then this will be undefined.\r\n   *\r\n   * Note that if an ancillary declaration has a doc comment, it is tracked here, whereas\r\n   * `ApiItemMetadata.tsdocComment` corresponds to documentation for the main declaration.\r\n   */\r\n  public abstract readonly tsdocParserContext: tsdoc.ParserContext | undefined;\r\n\r\n  /**\r\n   * If true, then this declaration is treated as part of another declaration.\r\n   */\r\n  public abstract readonly isAncillary: boolean;\r\n\r\n  /**\r\n   * A list of other declarations that are treated as being part of this declaration.  For example, a property\r\n   * getter/setter pair will be treated as a single API item, with the setter being treated as ancillary to the getter.\r\n   *\r\n   * If the `ancillaryDeclarations` array is non-empty, then `isAncillary` will be false for this declaration,\r\n   * and `isAncillary` will be true for all the array items.\r\n   */\r\n  public abstract readonly ancillaryDeclarations: ReadonlyArray<AstDeclaration>;\r\n}\r\n\r\n/**\r\n * Used internally by the `Collector` to build up `DeclarationMetadata`.\r\n */\r\nexport class InternalDeclarationMetadata extends DeclarationMetadata {\r\n  public tsdocParserContext: tsdoc.ParserContext | undefined = undefined;\r\n\r\n  public isAncillary: boolean = false;\r\n\r\n  public ancillaryDeclarations: AstDeclaration[] = [];\r\n}\r\n"]}