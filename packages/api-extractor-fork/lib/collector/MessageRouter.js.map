{"version":3,"file":"MessageRouter.js","sourceRoot":"","sources":["../../src/collector/MessageRouter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as ts from 'typescript';\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\nimport { Sort, InternalError, LegacyAdapters } from '@rushstack/node-core-library';\r\n\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\nimport { AstSymbol } from '../analyzer/AstSymbol';\r\nimport {\r\n  ExtractorMessage,\r\n  ExtractorMessageCategory,\r\n  IExtractorMessageOptions,\r\n  IExtractorMessageProperties\r\n} from '../api/ExtractorMessage';\r\nimport { ExtractorMessageId, allExtractorMessageIds } from '../api/ExtractorMessageId';\r\nimport { IExtractorMessagesConfig, IConfigMessageReportingRule } from '../api/IConfigFile';\r\nimport { SourceMapper } from './SourceMapper';\r\nimport { ExtractorLogLevel } from '../api/ExtractorLogLevel';\r\nimport { ConsoleMessageId } from '../api/ConsoleMessageId';\r\n\r\ninterface IReportingRule {\r\n  logLevel: ExtractorLogLevel;\r\n  addToApiReportFile: boolean;\r\n}\r\n\r\nexport interface IMessageRouterOptions {\r\n  workingPackageFolder: string | undefined;\r\n  messageCallback: ((message: ExtractorMessage) => void) | undefined;\r\n  messagesConfig: IExtractorMessagesConfig;\r\n  showVerboseMessages: boolean;\r\n  showDiagnostics: boolean;\r\n  tsdocConfiguration: tsdoc.TSDocConfiguration;\r\n}\r\n\r\nexport interface IBuildJsonDumpObjectOptions {\r\n  /**\r\n   * {@link MessageRouter.buildJsonDumpObject} will omit any objects keys with these names.\r\n   */\r\n  keyNamesToOmit?: string[];\r\n}\r\n\r\nexport class MessageRouter {\r\n  public static readonly DIAGNOSTICS_LINE: string =\r\n    '============================================================';\r\n\r\n  private readonly _workingPackageFolder: string | undefined;\r\n  private readonly _messageCallback: ((message: ExtractorMessage) => void) | undefined;\r\n\r\n  // All messages\r\n  private readonly _messages: ExtractorMessage[];\r\n\r\n  // For each AstDeclaration, the messages associated with it.  This is used when addToApiReportFile=true\r\n  private readonly _associatedMessagesForAstDeclaration: Map<AstDeclaration, ExtractorMessage[]>;\r\n\r\n  private readonly _sourceMapper: SourceMapper;\r\n\r\n  private readonly _tsdocConfiguration: tsdoc.TSDocConfiguration;\r\n\r\n  // Normalized representation of the routing rules from api-extractor.json\r\n  private _reportingRuleByMessageId: Map<string, IReportingRule> = new Map<string, IReportingRule>();\r\n  private _compilerDefaultRule: IReportingRule = {\r\n    logLevel: ExtractorLogLevel.None,\r\n    addToApiReportFile: false\r\n  };\r\n  private _extractorDefaultRule: IReportingRule = {\r\n    logLevel: ExtractorLogLevel.None,\r\n    addToApiReportFile: false\r\n  };\r\n  private _tsdocDefaultRule: IReportingRule = { logLevel: ExtractorLogLevel.None, addToApiReportFile: false };\r\n\r\n  public errorCount: number = 0;\r\n  public warningCount: number = 0;\r\n\r\n  /**\r\n   * See {@link IExtractorInvokeOptions.showVerboseMessages}\r\n   */\r\n  public readonly showVerboseMessages: boolean;\r\n\r\n  /**\r\n   * See {@link IExtractorInvokeOptions.showDiagnostics}\r\n   */\r\n  public readonly showDiagnostics: boolean;\r\n\r\n  public constructor(options: IMessageRouterOptions) {\r\n    this._workingPackageFolder = options.workingPackageFolder;\r\n    this._messageCallback = options.messageCallback;\r\n\r\n    this._messages = [];\r\n    this._associatedMessagesForAstDeclaration = new Map<AstDeclaration, ExtractorMessage[]>();\r\n    this._sourceMapper = new SourceMapper();\r\n    this._tsdocConfiguration = options.tsdocConfiguration;\r\n\r\n    // showDiagnostics implies showVerboseMessages\r\n    this.showVerboseMessages = options.showVerboseMessages || options.showDiagnostics;\r\n    this.showDiagnostics = options.showDiagnostics;\r\n\r\n    this._applyMessagesConfig(options.messagesConfig);\r\n  }\r\n\r\n  /**\r\n   * Read the api-extractor.json configuration and build up the tables of routing rules.\r\n   */\r\n  private _applyMessagesConfig(messagesConfig: IExtractorMessagesConfig): void {\r\n    if (messagesConfig.compilerMessageReporting) {\r\n      for (const messageId of Object.getOwnPropertyNames(messagesConfig.compilerMessageReporting)) {\r\n        const reportingRule: IReportingRule = MessageRouter._getNormalizedRule(\r\n          messagesConfig.compilerMessageReporting[messageId]\r\n        );\r\n\r\n        if (messageId === 'default') {\r\n          this._compilerDefaultRule = reportingRule;\r\n        } else if (!/^TS[0-9]+$/.test(messageId)) {\r\n          throw new Error(\r\n            `Error in API Extractor config: The messages.compilerMessageReporting table contains` +\r\n              ` an invalid entry \"${messageId}\". The identifier format is \"TS\" followed by an integer.`\r\n          );\r\n        } else {\r\n          this._reportingRuleByMessageId.set(messageId, reportingRule);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (messagesConfig.extractorMessageReporting) {\r\n      for (const messageId of Object.getOwnPropertyNames(messagesConfig.extractorMessageReporting)) {\r\n        const reportingRule: IReportingRule = MessageRouter._getNormalizedRule(\r\n          messagesConfig.extractorMessageReporting[messageId]\r\n        );\r\n\r\n        if (messageId === 'default') {\r\n          this._extractorDefaultRule = reportingRule;\r\n        } else if (!/^ae-/.test(messageId)) {\r\n          throw new Error(\r\n            `Error in API Extractor config: The messages.extractorMessageReporting table contains` +\r\n              ` an invalid entry \"${messageId}\".  The name should begin with the \"ae-\" prefix.`\r\n          );\r\n        } else if (!allExtractorMessageIds.has(messageId)) {\r\n          throw new Error(\r\n            `Error in API Extractor config: The messages.extractorMessageReporting table contains` +\r\n              ` an unrecognized identifier \"${messageId}\".  Is it spelled correctly?`\r\n          );\r\n        } else {\r\n          this._reportingRuleByMessageId.set(messageId, reportingRule);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (messagesConfig.tsdocMessageReporting) {\r\n      for (const messageId of Object.getOwnPropertyNames(messagesConfig.tsdocMessageReporting)) {\r\n        const reportingRule: IReportingRule = MessageRouter._getNormalizedRule(\r\n          messagesConfig.tsdocMessageReporting[messageId]\r\n        );\r\n\r\n        if (messageId === 'default') {\r\n          this._tsdocDefaultRule = reportingRule;\r\n        } else if (!/^tsdoc-/.test(messageId)) {\r\n          throw new Error(\r\n            `Error in API Extractor config: The messages.tsdocMessageReporting table contains` +\r\n              ` an invalid entry \"${messageId}\".  The name should begin with the \"tsdoc-\" prefix.`\r\n          );\r\n        } else if (!this._tsdocConfiguration.isKnownMessageId(messageId)) {\r\n          throw new Error(\r\n            `Error in API Extractor config: The messages.tsdocMessageReporting table contains` +\r\n              ` an unrecognized identifier \"${messageId}\".  Is it spelled correctly?`\r\n          );\r\n        } else {\r\n          this._reportingRuleByMessageId.set(messageId, reportingRule);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static _getNormalizedRule(rule: IConfigMessageReportingRule): IReportingRule {\r\n    return {\r\n      logLevel: rule.logLevel || 'none',\r\n      addToApiReportFile: rule.addToApiReportFile || false\r\n    };\r\n  }\r\n\r\n  public get messages(): ReadonlyArray<ExtractorMessage> {\r\n    return this._messages;\r\n  }\r\n\r\n  /**\r\n   * Add a diagnostic message reported by the TypeScript compiler\r\n   */\r\n  public addCompilerDiagnostic(diagnostic: ts.Diagnostic): void {\r\n    switch (diagnostic.category) {\r\n      case ts.DiagnosticCategory.Suggestion:\r\n      case ts.DiagnosticCategory.Message:\r\n        return; // ignore noise\r\n    }\r\n\r\n    const messageText: string = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\r\n    const options: IExtractorMessageOptions = {\r\n      category: ExtractorMessageCategory.Compiler,\r\n      messageId: `TS${diagnostic.code}`,\r\n      text: messageText\r\n    };\r\n\r\n    if (diagnostic.file) {\r\n      const sourceFile: ts.SourceFile = diagnostic.file;\r\n      const lineAndCharacter: ts.LineAndCharacter = sourceFile.getLineAndCharacterOfPosition(\r\n        diagnostic.start || 0\r\n      );\r\n\r\n      options.sourceFilePath = sourceFile.fileName;\r\n      options.sourceFileLine = lineAndCharacter.line + 1;\r\n      options.sourceFileColumn = lineAndCharacter.character + 1;\r\n    }\r\n\r\n    // NOTE: Since compiler errors pertain to issues specific to the .d.ts files,\r\n    // we do not apply source mappings for them.\r\n    this._messages.push(new ExtractorMessage(options));\r\n  }\r\n\r\n  /**\r\n   * Add a message from the API Extractor analysis\r\n   */\r\n  public addAnalyzerIssue(\r\n    messageId: ExtractorMessageId,\r\n    messageText: string,\r\n    astDeclarationOrSymbol: AstDeclaration | AstSymbol,\r\n    properties?: IExtractorMessageProperties\r\n  ): void {\r\n    let astDeclaration: AstDeclaration;\r\n    if (astDeclarationOrSymbol instanceof AstDeclaration) {\r\n      astDeclaration = astDeclarationOrSymbol;\r\n    } else {\r\n      astDeclaration = astDeclarationOrSymbol.astDeclarations[0];\r\n    }\r\n\r\n    const extractorMessage: ExtractorMessage = this.addAnalyzerIssueForPosition(\r\n      messageId,\r\n      messageText,\r\n      astDeclaration.declaration.getSourceFile(),\r\n      astDeclaration.declaration.getStart(),\r\n      properties\r\n    );\r\n\r\n    this._associateMessageWithAstDeclaration(extractorMessage, astDeclaration);\r\n  }\r\n\r\n  /**\r\n   * Add all messages produced from an invocation of the TSDoc parser, assuming they refer to\r\n   * code in the specified source file.\r\n   */\r\n  public addTsdocMessages(\r\n    parserContext: tsdoc.ParserContext,\r\n    sourceFile: ts.SourceFile,\r\n    astDeclaration?: AstDeclaration\r\n  ): void {\r\n    for (const message of parserContext.log.messages) {\r\n      const lineAndCharacter: ts.LineAndCharacter = sourceFile.getLineAndCharacterOfPosition(\r\n        message.textRange.pos\r\n      );\r\n\r\n      const options: IExtractorMessageOptions = {\r\n        category: ExtractorMessageCategory.TSDoc,\r\n        messageId: message.messageId,\r\n        text: message.unformattedText,\r\n        sourceFilePath: sourceFile.fileName,\r\n        sourceFileLine: lineAndCharacter.line + 1,\r\n        sourceFileColumn: lineAndCharacter.character + 1\r\n      };\r\n\r\n      this._sourceMapper.updateExtractorMessageOptions(options);\r\n      const extractorMessage: ExtractorMessage = new ExtractorMessage(options);\r\n\r\n      if (astDeclaration) {\r\n        this._associateMessageWithAstDeclaration(extractorMessage, astDeclaration);\r\n      }\r\n\r\n      this._messages.push(extractorMessage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recursively collects the primitive members (numbers, strings, arrays, etc) into an object that\r\n   * is JSON serializable.  This is used by the \"--diagnostics\" feature to dump the state of configuration objects.\r\n   *\r\n   * @returns a JSON serializable object (possibly including `null` values)\r\n   *          or `undefined` if the input cannot be represented as JSON\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public static buildJsonDumpObject(input: any, options?: IBuildJsonDumpObjectOptions): any | undefined {\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    const keyNamesToOmit: Set<string> = new Set(options.keyNamesToOmit);\r\n\r\n    return MessageRouter._buildJsonDumpObject(input, keyNamesToOmit);\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  private static _buildJsonDumpObject(input: any, keyNamesToOmit: Set<string>): any | undefined {\r\n    if (input === null || input === undefined) {\r\n      return null; // JSON uses null instead of undefined\r\n    }\r\n\r\n    switch (typeof input) {\r\n      case 'boolean':\r\n      case 'number':\r\n      case 'string':\r\n        return input;\r\n      case 'object':\r\n        if (Array.isArray(input)) {\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const outputArray: any[] = [];\r\n          for (const element of input) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const serializedElement: any = MessageRouter._buildJsonDumpObject(element, keyNamesToOmit);\r\n            if (serializedElement !== undefined) {\r\n              outputArray.push(serializedElement);\r\n            }\r\n          }\r\n          return outputArray;\r\n        }\r\n\r\n        const outputObject: object = {};\r\n        for (const key of Object.getOwnPropertyNames(input)) {\r\n          if (keyNamesToOmit.has(key)) {\r\n            continue;\r\n          }\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const value: any = input[key];\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const serializedValue: any = MessageRouter._buildJsonDumpObject(value, keyNamesToOmit);\r\n\r\n          if (serializedValue !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            (outputObject as any)[key] = serializedValue;\r\n          }\r\n        }\r\n        return outputObject;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Record this message in  _associatedMessagesForAstDeclaration\r\n   */\r\n  private _associateMessageWithAstDeclaration(\r\n    extractorMessage: ExtractorMessage,\r\n    astDeclaration: AstDeclaration\r\n  ): void {\r\n    let associatedMessages: ExtractorMessage[] | undefined =\r\n      this._associatedMessagesForAstDeclaration.get(astDeclaration);\r\n\r\n    if (!associatedMessages) {\r\n      associatedMessages = [];\r\n      this._associatedMessagesForAstDeclaration.set(astDeclaration, associatedMessages);\r\n    }\r\n    associatedMessages.push(extractorMessage);\r\n  }\r\n\r\n  /**\r\n   * Add a message for a location in an arbitrary source file.\r\n   */\r\n  public addAnalyzerIssueForPosition(\r\n    messageId: ExtractorMessageId,\r\n    messageText: string,\r\n    sourceFile: ts.SourceFile,\r\n    pos: number,\r\n    properties?: IExtractorMessageProperties\r\n  ): ExtractorMessage {\r\n    const lineAndCharacter: ts.LineAndCharacter = sourceFile.getLineAndCharacterOfPosition(pos);\r\n\r\n    const options: IExtractorMessageOptions = {\r\n      category: ExtractorMessageCategory.Extractor,\r\n      messageId,\r\n      text: messageText,\r\n      sourceFilePath: sourceFile.fileName,\r\n      sourceFileLine: lineAndCharacter.line + 1,\r\n      sourceFileColumn: lineAndCharacter.character + 1,\r\n      properties\r\n    };\r\n\r\n    this._sourceMapper.updateExtractorMessageOptions(options);\r\n    const extractorMessage: ExtractorMessage = new ExtractorMessage(options);\r\n\r\n    this._messages.push(extractorMessage);\r\n    return extractorMessage;\r\n  }\r\n\r\n  /**\r\n   * This is used when writing the API report file.  It looks up any messages that were configured to get emitted\r\n   * in the API report file and returns them.  It also records that they were emitted, which suppresses them from\r\n   * being shown on the console.\r\n   */\r\n  public fetchAssociatedMessagesForReviewFile(astDeclaration: AstDeclaration): ExtractorMessage[] {\r\n    const messagesForApiReportFile: ExtractorMessage[] = [];\r\n\r\n    const associatedMessages: ExtractorMessage[] =\r\n      this._associatedMessagesForAstDeclaration.get(astDeclaration) || [];\r\n    for (const associatedMessage of associatedMessages) {\r\n      // Make sure we didn't already report this message for some reason\r\n      if (!associatedMessage.handled) {\r\n        // Is this message type configured to go in the API report file?\r\n        const reportingRule: IReportingRule = this._getRuleForMessage(associatedMessage);\r\n        if (reportingRule.addToApiReportFile) {\r\n          // Include it in the result, and record that it went to the API report file\r\n          messagesForApiReportFile.push(associatedMessage);\r\n          associatedMessage.handled = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    this._sortMessagesForOutput(messagesForApiReportFile);\r\n    return messagesForApiReportFile;\r\n  }\r\n\r\n  /**\r\n   * This returns all remaining messages that were flagged with `addToApiReportFile`, but which were not\r\n   * retreieved using `fetchAssociatedMessagesForReviewFile()`.\r\n   */\r\n  public fetchUnassociatedMessagesForReviewFile(): ExtractorMessage[] {\r\n    const messagesForApiReportFile: ExtractorMessage[] = [];\r\n\r\n    for (const unassociatedMessage of this.messages) {\r\n      // Make sure we didn't already report this message for some reason\r\n      if (!unassociatedMessage.handled) {\r\n        // Is this message type configured to go in the API report file?\r\n        const reportingRule: IReportingRule = this._getRuleForMessage(unassociatedMessage);\r\n        if (reportingRule.addToApiReportFile) {\r\n          // Include it in the result, and record that it went to the API report file\r\n          messagesForApiReportFile.push(unassociatedMessage);\r\n          unassociatedMessage.handled = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    this._sortMessagesForOutput(messagesForApiReportFile);\r\n    return messagesForApiReportFile;\r\n  }\r\n\r\n  /**\r\n   * This returns the list of remaining messages that were not already processed by\r\n   * `fetchAssociatedMessagesForReviewFile()` or `fetchUnassociatedMessagesForReviewFile()`.\r\n   * These messages will be shown on the console.\r\n   */\r\n  public handleRemainingNonConsoleMessages(): void {\r\n    const messagesForLogger: ExtractorMessage[] = [];\r\n\r\n    for (const message of this.messages) {\r\n      // Make sure we didn't already report this message\r\n      if (!message.handled) {\r\n        messagesForLogger.push(message);\r\n      }\r\n    }\r\n\r\n    this._sortMessagesForOutput(messagesForLogger);\r\n\r\n    for (const message of messagesForLogger) {\r\n      this._handleMessage(message);\r\n    }\r\n  }\r\n\r\n  public logError(\r\n    messageId: ConsoleMessageId,\r\n    message: string,\r\n    properties?: IExtractorMessageProperties\r\n  ): void {\r\n    this._handleMessage(\r\n      new ExtractorMessage({\r\n        category: ExtractorMessageCategory.Console,\r\n        messageId,\r\n        text: message,\r\n        properties,\r\n        logLevel: ExtractorLogLevel.Error\r\n      })\r\n    );\r\n  }\r\n\r\n  public logWarning(\r\n    messageId: ConsoleMessageId,\r\n    message: string,\r\n    properties?: IExtractorMessageProperties\r\n  ): void {\r\n    this._handleMessage(\r\n      new ExtractorMessage({\r\n        category: ExtractorMessageCategory.Console,\r\n        messageId,\r\n        text: message,\r\n        properties,\r\n        logLevel: ExtractorLogLevel.Warning\r\n      })\r\n    );\r\n  }\r\n\r\n  public logInfo(\r\n    messageId: ConsoleMessageId,\r\n    message: string,\r\n    properties?: IExtractorMessageProperties\r\n  ): void {\r\n    this._handleMessage(\r\n      new ExtractorMessage({\r\n        category: ExtractorMessageCategory.Console,\r\n        messageId,\r\n        text: message,\r\n        properties,\r\n        logLevel: ExtractorLogLevel.Info\r\n      })\r\n    );\r\n  }\r\n\r\n  public logVerbose(\r\n    messageId: ConsoleMessageId,\r\n    message: string,\r\n    properties?: IExtractorMessageProperties\r\n  ): void {\r\n    this._handleMessage(\r\n      new ExtractorMessage({\r\n        category: ExtractorMessageCategory.Console,\r\n        messageId,\r\n        text: message,\r\n        properties,\r\n        logLevel: ExtractorLogLevel.Verbose\r\n      })\r\n    );\r\n  }\r\n\r\n  public logDiagnosticHeader(title: string): void {\r\n    this.logDiagnostic(MessageRouter.DIAGNOSTICS_LINE);\r\n    this.logDiagnostic(`DIAGNOSTIC: ` + title);\r\n    this.logDiagnostic(MessageRouter.DIAGNOSTICS_LINE);\r\n  }\r\n\r\n  public logDiagnosticFooter(): void {\r\n    this.logDiagnostic(MessageRouter.DIAGNOSTICS_LINE + '\\n');\r\n  }\r\n\r\n  public logDiagnostic(message: string): void {\r\n    if (this.showDiagnostics) {\r\n      this.logVerbose(ConsoleMessageId.Diagnostics, message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Give the calling application a chance to handle the `ExtractorMessage`, and if not, display it on the console.\r\n   */\r\n  private _handleMessage(message: ExtractorMessage): void {\r\n    // Don't tally messages that were already \"handled\" by writing them into the API report\r\n    if (message.handled) {\r\n      return;\r\n    }\r\n\r\n    // Assign the ExtractorMessage.logLevel; the message callback may adjust it below\r\n    if (message.category === ExtractorMessageCategory.Console) {\r\n      // Console messages have their category log level assigned via logInfo(), logVerbose(), etc.\r\n    } else {\r\n      const reportingRule: IReportingRule = this._getRuleForMessage(message);\r\n      message.logLevel = reportingRule.logLevel;\r\n    }\r\n\r\n    // If there is a callback, allow it to modify and/or handle the message\r\n    if (this._messageCallback) {\r\n      this._messageCallback(message);\r\n    }\r\n\r\n    // Update the statistics\r\n    switch (message.logLevel) {\r\n      case ExtractorLogLevel.Error:\r\n        ++this.errorCount;\r\n        break;\r\n      case ExtractorLogLevel.Warning:\r\n        ++this.warningCount;\r\n        break;\r\n    }\r\n\r\n    if (message.handled) {\r\n      return;\r\n    }\r\n\r\n    // The messageCallback did not handle the message, so perform default handling\r\n    message.handled = true;\r\n\r\n    if (message.logLevel === ExtractorLogLevel.None) {\r\n      return;\r\n    }\r\n\r\n    let messageText: string;\r\n    if (message.category === ExtractorMessageCategory.Console) {\r\n      messageText = message.text;\r\n    } else {\r\n      messageText = message.formatMessageWithLocation(this._workingPackageFolder);\r\n    }\r\n\r\n    switch (message.logLevel) {\r\n      case ExtractorLogLevel.Error:\r\n        console.error(colors.red('Error: ' + messageText));\r\n        break;\r\n      case ExtractorLogLevel.Warning:\r\n        console.warn(colors.yellow('Warning: ' + messageText));\r\n        break;\r\n      case ExtractorLogLevel.Info:\r\n        console.log(messageText);\r\n        break;\r\n      case ExtractorLogLevel.Verbose:\r\n        if (this.showVerboseMessages) {\r\n          console.log(colors.cyan(messageText));\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid logLevel value: ${JSON.stringify(message.logLevel)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For a given message, determine the IReportingRule based on the rule tables.\r\n   */\r\n  private _getRuleForMessage(message: ExtractorMessage): IReportingRule {\r\n    const reportingRule: IReportingRule | undefined = this._reportingRuleByMessageId.get(message.messageId);\r\n    if (reportingRule) {\r\n      return reportingRule;\r\n    }\r\n    switch (message.category) {\r\n      case ExtractorMessageCategory.Compiler:\r\n        return this._compilerDefaultRule;\r\n      case ExtractorMessageCategory.Extractor:\r\n        return this._extractorDefaultRule;\r\n      case ExtractorMessageCategory.TSDoc:\r\n        return this._tsdocDefaultRule;\r\n      case ExtractorMessageCategory.Console:\r\n        throw new InternalError('ExtractorMessageCategory.Console is not supported with IReportingRule');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sorts an array of messages according to a reasonable ordering\r\n   */\r\n  private _sortMessagesForOutput(messages: ExtractorMessage[]): void {\r\n    LegacyAdapters.sortStable(messages, (a, b) => {\r\n      let diff: number;\r\n      // First sort by file name\r\n      diff = Sort.compareByValue(a.sourceFilePath, b.sourceFilePath);\r\n      if (diff !== 0) {\r\n        return diff;\r\n      }\r\n      // Then sort by line number\r\n      diff = Sort.compareByValue(a.sourceFileLine, b.sourceFileLine);\r\n      if (diff !== 0) {\r\n        return diff;\r\n      }\r\n      // Then sort by messageId\r\n      return Sort.compareByValue(a.messageId, b.messageId);\r\n    });\r\n  }\r\n}\r\n"]}