{"version":3,"file":"ApiItemMetadata.js","sourceRoot":"","sources":["../../src/collector/ApiItemMetadata.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D,iDAA8C;AAgB9C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAa,eAAe;IAqC1B,YAAmB,OAAgC;QALnD,iCAAiC;QAC1B,uBAAkB,GAAY,IAAI,CAAC;QAEnC,mCAA8B,GAAiB,2BAAY,CAAC,SAAS,CAAC;QAG3E,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QACrD,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAC;QACvD,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;QAC7D,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAC7C,CAAC;CACF;AA/CD,0CA+CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\nimport { ReleaseTag } from '@microsoft/api-extractor-model';\r\nimport { VisitorState } from './VisitorState';\r\n\r\n/**\r\n * Constructor parameters for `ApiItemMetadata`.\r\n */\r\nexport interface IApiItemMetadataOptions {\r\n  declaredReleaseTag: ReleaseTag;\r\n  effectiveReleaseTag: ReleaseTag;\r\n  releaseTagSameAsParent: boolean;\r\n  isEventProperty: boolean;\r\n  isOverride: boolean;\r\n  isSealed: boolean;\r\n  isVirtual: boolean;\r\n  isPreapproved: boolean;\r\n}\r\n\r\n/**\r\n * Stores the Collector's additional analysis for an `AstDeclaration`.  This object is assigned to\r\n * `AstDeclaration.apiItemMetadata` but consumers must always obtain it by calling `Collector.fetchApiItemMetadata()`.\r\n *\r\n * @remarks\r\n * Note that ancillary declarations share their `ApiItemMetadata` with the main declaration,\r\n * whereas a separate `DeclarationMetadata` object is created for each declaration.\r\n *\r\n * Consider this example:\r\n * ```ts\r\n * export declare class A {\r\n *   get b(): string;\r\n *   set b(value: string);\r\n * }\r\n * export declare namespace A { }\r\n * ```\r\n *\r\n * In this example, there are two \"symbols\": `A` and `b`\r\n *\r\n * There are four \"declarations\": `A` class, `A` namespace, `b` getter, `b` setter\r\n *\r\n * There are three \"API items\": `A` class, `A` namespace, `b` property.  The property getter is the main declaration\r\n * for `b`, and the setter is the \"ancillary\" declaration.\r\n */\r\nexport class ApiItemMetadata {\r\n  /**\r\n   * This is the release tag that was explicitly specified in the original doc comment, if any.\r\n   */\r\n  public readonly declaredReleaseTag: ReleaseTag;\r\n\r\n  /**\r\n   * The \"effective\" release tag is a normalized value that is based on `declaredReleaseTag`,\r\n   * but may be inherited from a parent, or corrected if the declared value was somehow invalid.\r\n   * When actually trimming .d.ts files or generating docs, API Extractor uses the \"effective\" value\r\n   * instead of the \"declared\" value.\r\n   */\r\n  public readonly effectiveReleaseTag: ReleaseTag;\r\n\r\n  // If true, then it would be redundant to show this release tag\r\n  public readonly releaseTagSameAsParent: boolean;\r\n\r\n  // NOTE: In the future, the Collector may infer or error-correct some of these states.\r\n  // Generators should rely on these instead of tsdocComment.modifierTagSet.\r\n  public readonly isEventProperty: boolean;\r\n  public readonly isOverride: boolean;\r\n  public readonly isSealed: boolean;\r\n  public readonly isVirtual: boolean;\r\n\r\n  public readonly isPreapproved: boolean;\r\n\r\n  /**\r\n   * This is the TSDoc comment for the declaration.  It may be modified (or constructed artificially) by\r\n   * the DocCommentEnhancer.\r\n   */\r\n  public tsdocComment: tsdoc.DocComment | undefined;\r\n\r\n  // Assigned by DocCommentEnhancer\r\n  public needsDocumentation: boolean = true;\r\n\r\n  public docCommentEnhancerVisitorState: VisitorState = VisitorState.Unvisited;\r\n\r\n  public constructor(options: IApiItemMetadataOptions) {\r\n    this.declaredReleaseTag = options.declaredReleaseTag;\r\n    this.effectiveReleaseTag = options.effectiveReleaseTag;\r\n    this.releaseTagSameAsParent = options.releaseTagSameAsParent;\r\n    this.isEventProperty = options.isEventProperty;\r\n    this.isOverride = options.isOverride;\r\n    this.isSealed = options.isSealed;\r\n    this.isVirtual = options.isVirtual;\r\n    this.isPreapproved = options.isPreapproved;\r\n  }\r\n}\r\n"]}