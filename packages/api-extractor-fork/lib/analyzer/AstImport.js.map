{"version":3,"file":"AstImport.js","sourceRoot":"","sources":["../../src/analyzer/AstImport.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,oEAA6D;AAE7D;;GAEG;AACH,IAAY,aAyBX;AAzBD,WAAY,aAAa;IACvB;;OAEG;IACH,mEAAa,CAAA;IAEb;;OAEG;IACH,+DAAW,CAAA;IAEX;;OAEG;IACH,6DAAU,CAAA;IAEV;;OAEG;IACH,iEAAY,CAAA;IAEZ;;OAEG;IACH,6DAAU,CAAA;AACZ,CAAC,EAzBW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAyBxB;AAkBD;;;GAGG;AACH,MAAa,SAAS;IA+DpB,YAAmB,OAA0B;QAC3C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QAErC,sGAAsG;QACtG,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,UAAU,CAAC;QAE/C,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED;;;OAGG;IACH,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,MAAM,CAAC,OAA0B;QAC7C,QAAQ,OAAO,CAAC,UAAU,EAAE;YAC1B,KAAK,aAAa,CAAC,aAAa;gBAC9B,OAAO,GAAG,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvD,KAAK,aAAa,CAAC,WAAW;gBAC5B,OAAO,GAAG,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvD,KAAK,aAAa,CAAC,UAAU;gBAC3B,OAAO,GAAG,OAAO,CAAC,UAAU,IAAI,CAAC;YACnC,KAAK,aAAa,CAAC,YAAY;gBAC7B,OAAO,GAAG,OAAO,CAAC,UAAU,IAAI,CAAC;YACnC,KAAK,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC7B,MAAM,MAAM,GAAW,CAAC,OAAO,CAAC,UAAU;oBACxC,CAAC,CAAC,GAAG,CAAC,2BAA2B;oBACjC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,+BAA+B;wBAClE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAClC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;gBACvB,OAAO,GAAG,OAAO,CAAC,UAAU,IAAI,MAAM,EAAE,CAAC;aAC1C;YACD;gBACE,MAAM,IAAI,iCAAa,CAAC,uBAAuB,CAAC,CAAC;SACpD;IACH,CAAC;CACF;AA3GD,8BA2GC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { AstSymbol } from './AstSymbol';\r\nimport { InternalError } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * Indicates the import kind for an `AstImport`.\r\n */\r\nexport enum AstImportKind {\r\n  /**\r\n   * An import statement such as `import X from \"y\";`.\r\n   */\r\n  DefaultImport,\r\n\r\n  /**\r\n   * An import statement such as `import { X } from \"y\";`.\r\n   */\r\n  NamedImport,\r\n\r\n  /**\r\n   * An import statement such as `import * as x from \"y\";`.\r\n   */\r\n  StarImport,\r\n\r\n  /**\r\n   * An import statement such as `import x = require(\"y\");`.\r\n   */\r\n  EqualsImport,\r\n\r\n  /**\r\n   * An import statement such as `interface foo { foo: import(\"bar\").a.b.c }`.\r\n   */\r\n  ImportType\r\n}\r\n\r\n/**\r\n * Constructor parameters for AstImport\r\n *\r\n * @privateRemarks\r\n * Our naming convention is to use I____Parameters for constructor options and\r\n * I____Options for general function options.  However the word \"parameters\" is\r\n * confusingly similar to the terminology for function parameters modeled by API Extractor,\r\n * so we use I____Options for both cases in this code base.\r\n */\r\nexport interface IAstImportOptions {\r\n  readonly importKind: AstImportKind;\r\n  readonly modulePath: string;\r\n  readonly exportName: string | undefined;\r\n  readonly isTypeOnly: boolean;\r\n}\r\n\r\n/**\r\n * For a symbol that was imported from an external package, this tracks the import\r\n * statement that was used to reach it.\r\n */\r\nexport class AstImport {\r\n  public readonly importKind: AstImportKind;\r\n\r\n  /**\r\n   * The name of the external package (and possibly module path) that this definition\r\n   * was imported from.\r\n   *\r\n   * Example: \"@rushstack/node-core-library/lib/FileSystem\"\r\n   */\r\n  public readonly modulePath: string;\r\n\r\n  /**\r\n   * The name of the symbol being imported.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The name depends on the type of import:\r\n   *\r\n   * ```ts\r\n   * // For AstImportKind.DefaultImport style, exportName would be \"X\" in this example:\r\n   * import X from \"y\";\r\n   *\r\n   * // For AstImportKind.NamedImport style, exportName would be \"X\" in this example:\r\n   * import { X } from \"y\";\r\n   *\r\n   * // For AstImportKind.StarImport style, exportName would be \"x\" in this example:\r\n   * import * as x from \"y\";\r\n   *\r\n   * // For AstImportKind.EqualsImport style, exportName would be \"x\" in this example:\r\n   * import x = require(\"y\");\r\n   *\r\n   * // For AstImportKind.ImportType style, exportName would be \"a.b.c\" in this example:\r\n   * interface foo { foo: import('bar').a.b.c };\r\n   * ```\r\n   */\r\n  public readonly exportName: string | undefined;\r\n\r\n  /**\r\n   * Whether it is a type-only import, for example:\r\n   *\r\n   * ```ts\r\n   * import type { X } from \"y\";\r\n   * ```\r\n   *\r\n   * This is set to true ONLY if the type-only form is used in *every* reference to this AstImport.\r\n   */\r\n  public isTypeOnlyEverywhere: boolean;\r\n\r\n  /**\r\n   * If this import statement refers to an API from an external package that is tracked by API Extractor\r\n   * (according to `PackageMetadataManager.isAedocSupportedFor()`), then this property will return the\r\n   * corresponding AstSymbol.  Otherwise, it is undefined.\r\n   */\r\n  public astSymbol: AstSymbol | undefined;\r\n\r\n  /**\r\n   * If modulePath and exportName are defined, then this is a dictionary key\r\n   * that combines them with a colon (\":\").\r\n   *\r\n   * Example: \"@rushstack/node-core-library/lib/FileSystem:FileSystem\"\r\n   */\r\n  public readonly key: string;\r\n\r\n  public constructor(options: IAstImportOptions) {\r\n    this.importKind = options.importKind;\r\n    this.modulePath = options.modulePath;\r\n    this.exportName = options.exportName;\r\n\r\n    // We start with this assumption, but it may get changed later if non-type-only import is encountered.\r\n    this.isTypeOnlyEverywhere = options.isTypeOnly;\r\n\r\n    this.key = AstImport.getKey(options);\r\n  }\r\n\r\n  /**\r\n   * Allows `AstEntity.localName` to be used as a convenient generalization of `AstSymbol.localName` and\r\n   * `AstImport.exportName`.\r\n   */\r\n  public get localName(): string | undefined {\r\n    return this.exportName;\r\n  }\r\n\r\n  /**\r\n   * Calculates the lookup key used with `AstImport.key`\r\n   */\r\n  public static getKey(options: IAstImportOptions): string {\r\n    switch (options.importKind) {\r\n      case AstImportKind.DefaultImport:\r\n        return `${options.modulePath}:${options.exportName}`;\r\n      case AstImportKind.NamedImport:\r\n        return `${options.modulePath}:${options.exportName}`;\r\n      case AstImportKind.StarImport:\r\n        return `${options.modulePath}:*`;\r\n      case AstImportKind.EqualsImport:\r\n        return `${options.modulePath}:=`;\r\n      case AstImportKind.ImportType: {\r\n        const subKey: string = !options.exportName\r\n          ? '*' // Equivalent to StarImport\r\n          : options.exportName.includes('.') // Equivalent to a named export\r\n          ? options.exportName.split('.')[0]\r\n          : options.exportName;\r\n        return `${options.modulePath}:${subKey}`;\r\n      }\r\n      default:\r\n        throw new InternalError('Unknown AstImportKind');\r\n    }\r\n  }\r\n}\r\n"]}