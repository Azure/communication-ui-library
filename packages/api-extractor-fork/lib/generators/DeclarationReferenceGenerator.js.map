{"version":3,"file":"DeclarationReferenceGenerator.js","sourceRoot":"","sources":["../../src/generators/DeclarationReferenceGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* eslint-disable no-bitwise */\r\nimport * as ts from 'typescript';\r\nimport {\r\n  DeclarationReference,\r\n  ModuleSource,\r\n  GlobalSource,\r\n  Navigation,\r\n  Meaning\r\n} from '@microsoft/tsdoc/lib-commonjs/beta/DeclarationReference';\r\nimport { PackageJsonLookup, INodePackageJson, InternalError } from '@rushstack/node-core-library';\r\nimport { TypeScriptHelpers } from '../analyzer/TypeScriptHelpers';\r\nimport { TypeScriptInternals } from '../analyzer/TypeScriptInternals';\r\n\r\nexport class DeclarationReferenceGenerator {\r\n  public static readonly unknownReference: string = '?';\r\n\r\n  private _packageJsonLookup: PackageJsonLookup;\r\n  private _workingPackageName: string;\r\n  private _program: ts.Program;\r\n  private _typeChecker: ts.TypeChecker;\r\n  private _bundledPackageNames: ReadonlySet<string>;\r\n\r\n  public constructor(\r\n    packageJsonLookup: PackageJsonLookup,\r\n    workingPackageName: string,\r\n    program: ts.Program,\r\n    typeChecker: ts.TypeChecker,\r\n    bundledPackageNames: ReadonlySet<string>\r\n  ) {\r\n    this._packageJsonLookup = packageJsonLookup;\r\n    this._workingPackageName = workingPackageName;\r\n    this._program = program;\r\n    this._typeChecker = typeChecker;\r\n    this._bundledPackageNames = bundledPackageNames;\r\n  }\r\n\r\n  /**\r\n   * Gets the UID for a TypeScript Identifier that references a type.\r\n   */\r\n  public getDeclarationReferenceForIdentifier(node: ts.Identifier): DeclarationReference | undefined {\r\n    const symbol: ts.Symbol | undefined = this._typeChecker.getSymbolAtLocation(node);\r\n    if (symbol !== undefined) {\r\n      const isExpression: boolean = DeclarationReferenceGenerator._isInExpressionContext(node);\r\n      return (\r\n        this.getDeclarationReferenceForSymbol(\r\n          symbol,\r\n          isExpression ? ts.SymbolFlags.Value : ts.SymbolFlags.Type\r\n        ) ||\r\n        this.getDeclarationReferenceForSymbol(\r\n          symbol,\r\n          isExpression ? ts.SymbolFlags.Type : ts.SymbolFlags.Value\r\n        ) ||\r\n        this.getDeclarationReferenceForSymbol(symbol, ts.SymbolFlags.Namespace)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the DeclarationReference for a TypeScript Symbol for a given meaning.\r\n   */\r\n  public getDeclarationReferenceForSymbol(\r\n    symbol: ts.Symbol,\r\n    meaning: ts.SymbolFlags\r\n  ): DeclarationReference | undefined {\r\n    return this._symbolToDeclarationReference(symbol, meaning, /*includeModuleSymbols*/ false);\r\n  }\r\n\r\n  private static _isInExpressionContext(node: ts.Node): boolean {\r\n    switch (node.parent.kind) {\r\n      case ts.SyntaxKind.TypeQuery:\r\n        return true;\r\n      case ts.SyntaxKind.QualifiedName:\r\n        return DeclarationReferenceGenerator._isInExpressionContext(node.parent);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  private static _isExternalModuleSymbol(symbol: ts.Symbol): boolean {\r\n    return (\r\n      !!(symbol.flags & ts.SymbolFlags.ValueModule) &&\r\n      symbol.valueDeclaration !== undefined &&\r\n      ts.isSourceFile(symbol.valueDeclaration)\r\n    );\r\n  }\r\n\r\n  private static _isSameSymbol(left: ts.Symbol | undefined, right: ts.Symbol): boolean {\r\n    return (\r\n      left === right ||\r\n      !!(\r\n        left &&\r\n        left.valueDeclaration &&\r\n        right.valueDeclaration &&\r\n        left.valueDeclaration === right.valueDeclaration\r\n      )\r\n    );\r\n  }\r\n\r\n  private static _getNavigationToSymbol(symbol: ts.Symbol): Navigation | 'global' {\r\n    const parent: ts.Symbol | undefined = TypeScriptInternals.getSymbolParent(symbol);\r\n    // First, try to determine navigation to symbol via its parent.\r\n    if (parent) {\r\n      if (\r\n        parent.exports &&\r\n        DeclarationReferenceGenerator._isSameSymbol(parent.exports.get(symbol.escapedName), symbol)\r\n      ) {\r\n        return Navigation.Exports;\r\n      }\r\n      if (\r\n        parent.members &&\r\n        DeclarationReferenceGenerator._isSameSymbol(parent.members.get(symbol.escapedName), symbol)\r\n      ) {\r\n        return Navigation.Members;\r\n      }\r\n      if (\r\n        parent.globalExports &&\r\n        DeclarationReferenceGenerator._isSameSymbol(parent.globalExports.get(symbol.escapedName), symbol)\r\n      ) {\r\n        return 'global';\r\n      }\r\n    }\r\n\r\n    // Next, try determining navigation to symbol by its node\r\n    if (symbol.valueDeclaration) {\r\n      const declaration: ts.Declaration = ts.isBindingElement(symbol.valueDeclaration)\r\n        ? ts.walkUpBindingElementsAndPatterns(symbol.valueDeclaration)\r\n        : symbol.valueDeclaration;\r\n      if (ts.isClassElement(declaration) && ts.isClassLike(declaration.parent)) {\r\n        // class members are an \"export\" if they have the static modifier.\r\n        return ts.getCombinedModifierFlags(declaration) & ts.ModifierFlags.Static\r\n          ? Navigation.Exports\r\n          : Navigation.Members;\r\n      }\r\n      if (ts.isTypeElement(declaration) || ts.isObjectLiteralElement(declaration)) {\r\n        // type and object literal element members are just members\r\n        return Navigation.Members;\r\n      }\r\n      if (ts.isEnumMember(declaration)) {\r\n        // enum members are exports\r\n        return Navigation.Exports;\r\n      }\r\n      if (\r\n        ts.isExportSpecifier(declaration) ||\r\n        ts.isExportAssignment(declaration) ||\r\n        ts.isExportSpecifier(declaration) ||\r\n        ts.isExportDeclaration(declaration) ||\r\n        ts.isNamedExports(declaration)\r\n      ) {\r\n        return Navigation.Exports;\r\n      }\r\n      // declarations are exports if they have an `export` modifier.\r\n      if (ts.getCombinedModifierFlags(declaration) & ts.ModifierFlags.Export) {\r\n        return Navigation.Exports;\r\n      }\r\n      if (ts.isSourceFile(declaration.parent) && !ts.isExternalModule(declaration.parent)) {\r\n        // declarations in a source file are global if the source file is not a module.\r\n        return 'global';\r\n      }\r\n    }\r\n    // all other declarations are locals\r\n    return Navigation.Locals;\r\n  }\r\n\r\n  private static _getMeaningOfSymbol(symbol: ts.Symbol, meaning: ts.SymbolFlags): Meaning | undefined {\r\n    if (symbol.flags & meaning & ts.SymbolFlags.Class) {\r\n      return Meaning.Class;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.Enum) {\r\n      return Meaning.Enum;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.Interface) {\r\n      return Meaning.Interface;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.TypeAlias) {\r\n      return Meaning.TypeAlias;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.Function) {\r\n      return Meaning.Function;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.Variable) {\r\n      return Meaning.Variable;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.Module) {\r\n      return Meaning.Namespace;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.ClassMember) {\r\n      return Meaning.Member;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.Constructor) {\r\n      return Meaning.Constructor;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.EnumMember) {\r\n      return Meaning.Member;\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.Signature) {\r\n      if (symbol.escapedName === ts.InternalSymbolName.Call) {\r\n        return Meaning.CallSignature;\r\n      }\r\n      if (symbol.escapedName === ts.InternalSymbolName.New) {\r\n        return Meaning.ConstructSignature;\r\n      }\r\n      if (symbol.escapedName === ts.InternalSymbolName.Index) {\r\n        return Meaning.IndexSignature;\r\n      }\r\n    }\r\n    if (symbol.flags & meaning & ts.SymbolFlags.TypeParameter) {\r\n      // This should have already been handled in `getDeclarationReferenceOfSymbol`.\r\n      throw new InternalError('Not supported.');\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private _symbolToDeclarationReference(\r\n    symbol: ts.Symbol,\r\n    meaning: ts.SymbolFlags,\r\n    includeModuleSymbols: boolean\r\n  ): DeclarationReference | undefined {\r\n    let followedSymbol: ts.Symbol = symbol;\r\n    if (followedSymbol.flags & ts.SymbolFlags.ExportValue) {\r\n      followedSymbol = this._typeChecker.getExportSymbolOfSymbol(followedSymbol);\r\n    }\r\n    if (followedSymbol.flags & ts.SymbolFlags.Alias) {\r\n      followedSymbol = this._typeChecker.getAliasedSymbol(followedSymbol);\r\n    }\r\n\r\n    if (DeclarationReferenceGenerator._isExternalModuleSymbol(followedSymbol)) {\r\n      if (!includeModuleSymbols) {\r\n        return undefined;\r\n      }\r\n      const sourceFile: ts.SourceFile | undefined =\r\n        followedSymbol.declarations &&\r\n        followedSymbol.declarations[0] &&\r\n        followedSymbol.declarations[0].getSourceFile();\r\n      return new DeclarationReference(this._sourceFileToModuleSource(sourceFile));\r\n    }\r\n\r\n    // Do not generate a declaration reference for a type parameter.\r\n    if (followedSymbol.flags & ts.SymbolFlags.TypeParameter) {\r\n      return undefined;\r\n    }\r\n\r\n    const parent: ts.Symbol | undefined = TypeScriptInternals.getSymbolParent(followedSymbol);\r\n    let parentRef: DeclarationReference | undefined;\r\n    if (parent) {\r\n      parentRef = this._symbolToDeclarationReference(\r\n        parent,\r\n        ts.SymbolFlags.Namespace,\r\n        /*includeModuleSymbols*/ true\r\n      );\r\n    } else {\r\n      // this may be a local symbol in a module...\r\n      const sourceFile: ts.SourceFile | undefined =\r\n        followedSymbol.declarations &&\r\n        followedSymbol.declarations[0] &&\r\n        followedSymbol.declarations[0].getSourceFile();\r\n      if (sourceFile && ts.isExternalModule(sourceFile)) {\r\n        parentRef = new DeclarationReference(this._sourceFileToModuleSource(sourceFile));\r\n      } else {\r\n        parentRef = new DeclarationReference(GlobalSource.instance);\r\n      }\r\n    }\r\n\r\n    if (parentRef === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    let localName: string = followedSymbol.name;\r\n    if (followedSymbol.escapedName === ts.InternalSymbolName.Constructor) {\r\n      localName = 'constructor';\r\n    } else {\r\n      const wellKnownName: string | undefined = TypeScriptHelpers.tryDecodeWellKnownSymbolName(\r\n        followedSymbol.escapedName\r\n      );\r\n      if (wellKnownName) {\r\n        // TypeScript binds well-known ECMAScript symbols like 'Symbol.iterator' as '__@iterator'.\r\n        // This converts a string like '__@iterator' into the property name '[Symbol.iterator]'.\r\n        localName = wellKnownName;\r\n      } else if (TypeScriptHelpers.isUniqueSymbolName(followedSymbol.escapedName)) {\r\n        for (const decl of followedSymbol.declarations || []) {\r\n          const declName: ts.DeclarationName | undefined = ts.getNameOfDeclaration(decl);\r\n          if (declName && ts.isComputedPropertyName(declName)) {\r\n            const lateName: string | undefined = TypeScriptHelpers.tryGetLateBoundName(declName);\r\n            if (lateName !== undefined) {\r\n              localName = lateName;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let navigation: Navigation | 'global' =\r\n      DeclarationReferenceGenerator._getNavigationToSymbol(followedSymbol);\r\n    if (navigation === 'global') {\r\n      if (parentRef.source !== GlobalSource.instance) {\r\n        parentRef = new DeclarationReference(GlobalSource.instance);\r\n      }\r\n      navigation = Navigation.Exports;\r\n    }\r\n\r\n    return parentRef\r\n      .addNavigationStep(navigation, localName)\r\n      .withMeaning(DeclarationReferenceGenerator._getMeaningOfSymbol(followedSymbol, meaning));\r\n  }\r\n\r\n  private _getPackageName(sourceFile: ts.SourceFile): string {\r\n    if (this._program.isSourceFileFromExternalLibrary(sourceFile)) {\r\n      const packageJson: INodePackageJson | undefined = this._packageJsonLookup.tryLoadNodePackageJsonFor(\r\n        sourceFile.fileName\r\n      );\r\n\r\n      if (packageJson && packageJson.name) {\r\n        return packageJson.name;\r\n      }\r\n      return DeclarationReferenceGenerator.unknownReference;\r\n    }\r\n    return this._workingPackageName;\r\n  }\r\n\r\n  private _sourceFileToModuleSource(sourceFile: ts.SourceFile | undefined): GlobalSource | ModuleSource {\r\n    if (sourceFile && ts.isExternalModule(sourceFile)) {\r\n      const packageName: string = this._getPackageName(sourceFile);\r\n\r\n      if (this._bundledPackageNames.has(packageName)) {\r\n        // The api-extractor.json config file has a \"bundledPackages\" setting, which causes imports from\r\n        // certain NPM packages to be treated as part of the working project.  In this case, we need to\r\n        // substitute the working package name.\r\n        return new ModuleSource(this._workingPackageName);\r\n      } else {\r\n        return new ModuleSource(packageName);\r\n      }\r\n    }\r\n    return GlobalSource.instance;\r\n  }\r\n}\r\n"]}