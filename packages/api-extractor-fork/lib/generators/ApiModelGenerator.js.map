{"version":3,"file":"ApiModelGenerator.js","sourceRoot":"","sources":["../../src/generators/ApiModelGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* eslint-disable no-bitwise */\r\n\r\nimport * as ts from 'typescript';\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\nimport {\r\n  ApiModel,\r\n  ApiClass,\r\n  ApiPackage,\r\n  ApiEntryPoint,\r\n  ApiMethod,\r\n  ApiNamespace,\r\n  ApiInterface,\r\n  ApiPropertySignature,\r\n  ApiItemContainerMixin,\r\n  ReleaseTag,\r\n  ApiProperty,\r\n  ApiMethodSignature,\r\n  IApiParameterOptions,\r\n  ApiEnum,\r\n  ApiEnumMember,\r\n  IExcerptTokenRange,\r\n  IExcerptToken,\r\n  ApiConstructor,\r\n  ApiConstructSignature,\r\n  ApiFunction,\r\n  ApiIndexSignature,\r\n  ApiVariable,\r\n  ApiTypeAlias,\r\n  ApiCallSignature,\r\n  IApiTypeParameterOptions\r\n} from '@microsoft/api-extractor-model';\r\n\r\nimport { Collector } from '../collector/Collector';\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\nimport { ExcerptBuilder, IExcerptBuilderNodeToCapture } from './ExcerptBuilder';\r\nimport { AstSymbol } from '../analyzer/AstSymbol';\r\nimport { DeclarationReferenceGenerator } from './DeclarationReferenceGenerator';\r\nimport { ApiItemMetadata } from '../collector/ApiItemMetadata';\r\nimport { DeclarationMetadata } from '../collector/DeclarationMetadata';\r\n\r\nexport class ApiModelGenerator {\r\n  private readonly _collector: Collector;\r\n  private readonly _apiModel: ApiModel;\r\n  private readonly _referenceGenerator: DeclarationReferenceGenerator;\r\n\r\n  public constructor(collector: Collector) {\r\n    this._collector = collector;\r\n    this._apiModel = new ApiModel();\r\n    this._referenceGenerator = new DeclarationReferenceGenerator(\r\n      collector.packageJsonLookup,\r\n      collector.workingPackage.name,\r\n      collector.program,\r\n      collector.typeChecker,\r\n      collector.bundledPackageNames\r\n    );\r\n  }\r\n\r\n  public get apiModel(): ApiModel {\r\n    return this._apiModel;\r\n  }\r\n\r\n  public buildApiPackage(): ApiPackage {\r\n    const packageDocComment: tsdoc.DocComment | undefined = this._collector.workingPackage.tsdocComment;\r\n\r\n    const apiPackage: ApiPackage = new ApiPackage({\r\n      name: this._collector.workingPackage.name,\r\n      docComment: packageDocComment,\r\n      tsdocConfiguration: this._collector.extractorConfig.tsdocConfiguration\r\n    });\r\n    this._apiModel.addMember(apiPackage);\r\n\r\n    const apiEntryPoint: ApiEntryPoint = new ApiEntryPoint({ name: '' });\r\n    apiPackage.addMember(apiEntryPoint);\r\n\r\n    // Create a CollectorEntity for each top-level export\r\n    for (const entity of this._collector.entities) {\r\n      if (entity.exported) {\r\n        if (entity.astEntity instanceof AstSymbol) {\r\n          // Skip ancillary declarations; we will process them with the main declaration\r\n          for (const astDeclaration of this._collector.getNonAncillaryDeclarations(entity.astEntity)) {\r\n            this._processDeclaration(astDeclaration, entity.nameForEmit, apiEntryPoint);\r\n          }\r\n        } else {\r\n          // TODO: Figure out how to represent reexported AstImport objects.  Basically we need to introduce a new\r\n          // ApiItem subclass for \"export alias\", similar to a type alias, but representing declarations of the\r\n          // form \"export { X } from 'external-package'\".  We can also use this to solve GitHub issue #950.\r\n        }\r\n      }\r\n    }\r\n\r\n    return apiPackage;\r\n  }\r\n\r\n  private _processDeclaration(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    if ((astDeclaration.modifierFlags & ts.ModifierFlags.Private) !== 0) {\r\n      return; // trim out private declarations\r\n    }\r\n\r\n    const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n    const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n    if (releaseTag === ReleaseTag.Internal || releaseTag === ReleaseTag.Alpha) {\r\n      return; // trim out items marked as \"@internal\" or \"@alpha\"\r\n    }\r\n\r\n    switch (astDeclaration.declaration.kind) {\r\n      case ts.SyntaxKind.CallSignature:\r\n        this._processApiCallSignature(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.Constructor:\r\n        this._processApiConstructor(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.ConstructSignature:\r\n        this._processApiConstructSignature(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.ClassDeclaration:\r\n        this._processApiClass(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.EnumDeclaration:\r\n        this._processApiEnum(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.EnumMember:\r\n        this._processApiEnumMember(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.FunctionDeclaration:\r\n        this._processApiFunction(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.GetAccessor:\r\n        this._processApiProperty(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.IndexSignature:\r\n        this._processApiIndexSignature(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.InterfaceDeclaration:\r\n        this._processApiInterface(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.MethodDeclaration:\r\n        this._processApiMethod(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.MethodSignature:\r\n        this._processApiMethodSignature(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.ModuleDeclaration:\r\n        this._processApiNamespace(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.PropertyDeclaration:\r\n        this._processApiProperty(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.PropertySignature:\r\n        this._processApiPropertySignature(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.TypeAliasDeclaration:\r\n        this._processApiTypeAlias(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      case ts.SyntaxKind.VariableDeclaration:\r\n        this._processApiVariable(astDeclaration, exportedName, parentApiItem);\r\n        break;\r\n\r\n      default:\r\n      // ignore unknown types\r\n    }\r\n  }\r\n\r\n  private _processChildDeclarations(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    for (const childDeclaration of astDeclaration.children) {\r\n      this._processDeclaration(childDeclaration, undefined, parentApiItem);\r\n    }\r\n  }\r\n\r\n  private _processApiCallSignature(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const overloadIndex: number = this._collector.getOverloadIndex(astDeclaration);\r\n    const containerKey: string = ApiCallSignature.getContainerKey(overloadIndex);\r\n\r\n    let apiCallSignature: ApiCallSignature | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiCallSignature;\r\n\r\n    if (apiCallSignature === undefined) {\r\n      const callSignature: ts.CallSignatureDeclaration =\r\n        astDeclaration.declaration as ts.CallSignatureDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const returnTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: callSignature.type, tokenRange: returnTypeTokenRange });\r\n\r\n      const typeParameters: IApiTypeParameterOptions[] = this._captureTypeParameters(\r\n        nodesToCapture,\r\n        callSignature.typeParameters\r\n      );\r\n\r\n      const parameters: IApiParameterOptions[] = this._captureParameters(\r\n        nodesToCapture,\r\n        callSignature.parameters\r\n      );\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiCallSignature = new ApiCallSignature({\r\n        docComment,\r\n        releaseTag,\r\n        typeParameters,\r\n        parameters,\r\n        overloadIndex,\r\n        excerptTokens,\r\n        returnTypeTokenRange\r\n      });\r\n\r\n      parentApiItem.addMember(apiCallSignature);\r\n    }\r\n  }\r\n\r\n  private _processApiConstructor(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const overloadIndex: number = this._collector.getOverloadIndex(astDeclaration);\r\n    const containerKey: string = ApiConstructor.getContainerKey(overloadIndex);\r\n\r\n    let apiConstructor: ApiConstructor | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiConstructor;\r\n\r\n    if (apiConstructor === undefined) {\r\n      const constructorDeclaration: ts.ConstructorDeclaration =\r\n        astDeclaration.declaration as ts.ConstructorDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const parameters: IApiParameterOptions[] = this._captureParameters(\r\n        nodesToCapture,\r\n        constructorDeclaration.parameters\r\n      );\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiConstructor = new ApiConstructor({\r\n        docComment,\r\n        releaseTag,\r\n        parameters,\r\n        overloadIndex,\r\n        excerptTokens\r\n      });\r\n\r\n      parentApiItem.addMember(apiConstructor);\r\n    }\r\n  }\r\n\r\n  private _processApiClass(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n    const containerKey: string = ApiClass.getContainerKey(name);\r\n\r\n    let apiClass: ApiClass | undefined = parentApiItem.tryGetMemberByKey(containerKey) as ApiClass;\r\n\r\n    if (apiClass === undefined) {\r\n      const classDeclaration: ts.ClassDeclaration = astDeclaration.declaration as ts.ClassDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const typeParameters: IApiTypeParameterOptions[] = this._captureTypeParameters(\r\n        nodesToCapture,\r\n        classDeclaration.typeParameters\r\n      );\r\n\r\n      let extendsTokenRange: IExcerptTokenRange | undefined = undefined;\r\n      const implementsTokenRanges: IExcerptTokenRange[] = [];\r\n\r\n      for (const heritageClause of classDeclaration.heritageClauses || []) {\r\n        if (heritageClause.token === ts.SyntaxKind.ExtendsKeyword) {\r\n          extendsTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n          if (heritageClause.types.length > 0) {\r\n            nodesToCapture.push({ node: heritageClause.types[0], tokenRange: extendsTokenRange });\r\n          }\r\n        } else if (heritageClause.token === ts.SyntaxKind.ImplementsKeyword) {\r\n          for (const heritageType of heritageClause.types) {\r\n            const implementsTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n            implementsTokenRanges.push(implementsTokenRange);\r\n            nodesToCapture.push({ node: heritageType, tokenRange: implementsTokenRange });\r\n          }\r\n        }\r\n      }\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiClass = new ApiClass({\r\n        name,\r\n        docComment,\r\n        releaseTag,\r\n        excerptTokens,\r\n        typeParameters,\r\n        extendsTokenRange,\r\n        implementsTokenRanges\r\n      });\r\n\r\n      parentApiItem.addMember(apiClass);\r\n    }\r\n\r\n    this._processChildDeclarations(astDeclaration, exportedName, apiClass);\r\n  }\r\n\r\n  private _processApiConstructSignature(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const overloadIndex: number = this._collector.getOverloadIndex(astDeclaration);\r\n    const containerKey: string = ApiConstructSignature.getContainerKey(overloadIndex);\r\n\r\n    let apiConstructSignature: ApiConstructSignature | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiConstructSignature;\r\n\r\n    if (apiConstructSignature === undefined) {\r\n      const constructSignature: ts.ConstructSignatureDeclaration =\r\n        astDeclaration.declaration as ts.ConstructSignatureDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const returnTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: constructSignature.type, tokenRange: returnTypeTokenRange });\r\n\r\n      const typeParameters: IApiTypeParameterOptions[] = this._captureTypeParameters(\r\n        nodesToCapture,\r\n        constructSignature.typeParameters\r\n      );\r\n\r\n      const parameters: IApiParameterOptions[] = this._captureParameters(\r\n        nodesToCapture,\r\n        constructSignature.parameters\r\n      );\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiConstructSignature = new ApiConstructSignature({\r\n        docComment,\r\n        releaseTag,\r\n        typeParameters,\r\n        parameters,\r\n        overloadIndex,\r\n        excerptTokens,\r\n        returnTypeTokenRange\r\n      });\r\n\r\n      parentApiItem.addMember(apiConstructSignature);\r\n    }\r\n  }\r\n\r\n  private _processApiEnum(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n    const containerKey: string = ApiEnum.getContainerKey(name);\r\n\r\n    let apiEnum: ApiEnum | undefined = parentApiItem.tryGetMemberByKey(containerKey) as ApiEnum;\r\n\r\n    if (apiEnum === undefined) {\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, []);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiEnum = new ApiEnum({ name, docComment, releaseTag, excerptTokens });\r\n      parentApiItem.addMember(apiEnum);\r\n    }\r\n\r\n    this._processChildDeclarations(astDeclaration, exportedName, apiEnum);\r\n  }\r\n\r\n  private _processApiEnumMember(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n    const containerKey: string = ApiEnumMember.getContainerKey(name);\r\n\r\n    let apiEnumMember: ApiEnumMember | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiEnumMember;\r\n\r\n    if (apiEnumMember === undefined) {\r\n      const enumMember: ts.EnumMember = astDeclaration.declaration as ts.EnumMember;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const initializerTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: enumMember.initializer, tokenRange: initializerTokenRange });\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiEnumMember = new ApiEnumMember({\r\n        name,\r\n        docComment,\r\n        releaseTag,\r\n        excerptTokens,\r\n        initializerTokenRange\r\n      });\r\n\r\n      parentApiItem.addMember(apiEnumMember);\r\n    }\r\n  }\r\n\r\n  private _processApiFunction(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n\r\n    const overloadIndex: number = this._collector.getOverloadIndex(astDeclaration);\r\n    const containerKey: string = ApiFunction.getContainerKey(name, overloadIndex);\r\n\r\n    let apiFunction: ApiFunction | undefined = parentApiItem.tryGetMemberByKey(containerKey) as ApiFunction;\r\n\r\n    if (apiFunction === undefined) {\r\n      const functionDeclaration: ts.FunctionDeclaration =\r\n        astDeclaration.declaration as ts.FunctionDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const returnTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: functionDeclaration.type, tokenRange: returnTypeTokenRange });\r\n\r\n      const typeParameters: IApiTypeParameterOptions[] = this._captureTypeParameters(\r\n        nodesToCapture,\r\n        functionDeclaration.typeParameters\r\n      );\r\n\r\n      const parameters: IApiParameterOptions[] = this._captureParameters(\r\n        nodesToCapture,\r\n        functionDeclaration.parameters\r\n      );\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n      if (releaseTag === ReleaseTag.Internal || releaseTag === ReleaseTag.Alpha) {\r\n        return; // trim out items marked as \"@internal\" or \"@alpha\"\r\n      }\r\n\r\n      apiFunction = new ApiFunction({\r\n        name,\r\n        docComment,\r\n        releaseTag,\r\n        typeParameters,\r\n        parameters,\r\n        overloadIndex,\r\n        excerptTokens,\r\n        returnTypeTokenRange\r\n      });\r\n\r\n      parentApiItem.addMember(apiFunction);\r\n    }\r\n  }\r\n\r\n  private _processApiIndexSignature(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const overloadIndex: number = this._collector.getOverloadIndex(astDeclaration);\r\n    const containerKey: string = ApiIndexSignature.getContainerKey(overloadIndex);\r\n\r\n    let apiIndexSignature: ApiIndexSignature | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiIndexSignature;\r\n\r\n    if (apiIndexSignature === undefined) {\r\n      const indexSignature: ts.IndexSignatureDeclaration =\r\n        astDeclaration.declaration as ts.IndexSignatureDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const returnTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: indexSignature.type, tokenRange: returnTypeTokenRange });\r\n\r\n      const parameters: IApiParameterOptions[] = this._captureParameters(\r\n        nodesToCapture,\r\n        indexSignature.parameters\r\n      );\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiIndexSignature = new ApiIndexSignature({\r\n        docComment,\r\n        releaseTag,\r\n        parameters,\r\n        overloadIndex,\r\n        excerptTokens,\r\n        returnTypeTokenRange\r\n      });\r\n\r\n      parentApiItem.addMember(apiIndexSignature);\r\n    }\r\n  }\r\n\r\n  private _processApiInterface(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n    const containerKey: string = ApiInterface.getContainerKey(name);\r\n\r\n    let apiInterface: ApiInterface | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiInterface;\r\n\r\n    if (apiInterface === undefined) {\r\n      const interfaceDeclaration: ts.InterfaceDeclaration =\r\n        astDeclaration.declaration as ts.InterfaceDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const typeParameters: IApiTypeParameterOptions[] = this._captureTypeParameters(\r\n        nodesToCapture,\r\n        interfaceDeclaration.typeParameters\r\n      );\r\n\r\n      const extendsTokenRanges: IExcerptTokenRange[] = [];\r\n\r\n      for (const heritageClause of interfaceDeclaration.heritageClauses || []) {\r\n        if (heritageClause.token === ts.SyntaxKind.ExtendsKeyword) {\r\n          for (const heritageType of heritageClause.types) {\r\n            const extendsTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n            extendsTokenRanges.push(extendsTokenRange);\r\n            nodesToCapture.push({ node: heritageType, tokenRange: extendsTokenRange });\r\n          }\r\n        }\r\n      }\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiInterface = new ApiInterface({\r\n        name,\r\n        docComment,\r\n        releaseTag,\r\n        excerptTokens,\r\n        typeParameters,\r\n        extendsTokenRanges\r\n      });\r\n\r\n      parentApiItem.addMember(apiInterface);\r\n    }\r\n\r\n    this._processChildDeclarations(astDeclaration, exportedName, apiInterface);\r\n  }\r\n\r\n  private _processApiMethod(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n\r\n    const isStatic: boolean = (astDeclaration.modifierFlags & ts.ModifierFlags.Static) !== 0;\r\n    const overloadIndex: number = this._collector.getOverloadIndex(astDeclaration);\r\n    const containerKey: string = ApiMethod.getContainerKey(name, isStatic, overloadIndex);\r\n\r\n    let apiMethod: ApiMethod | undefined = parentApiItem.tryGetMemberByKey(containerKey) as ApiMethod;\r\n\r\n    if (apiMethod === undefined) {\r\n      const methodDeclaration: ts.MethodDeclaration = astDeclaration.declaration as ts.MethodDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const returnTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: methodDeclaration.type, tokenRange: returnTypeTokenRange });\r\n\r\n      const typeParameters: IApiTypeParameterOptions[] = this._captureTypeParameters(\r\n        nodesToCapture,\r\n        methodDeclaration.typeParameters\r\n      );\r\n\r\n      const parameters: IApiParameterOptions[] = this._captureParameters(\r\n        nodesToCapture,\r\n        methodDeclaration.parameters\r\n      );\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n      if (releaseTag === ReleaseTag.Internal || releaseTag === ReleaseTag.Alpha) {\r\n        return; // trim out items marked as \"@internal\" or \"@alpha\"\r\n      }\r\n      const isOptional: boolean =\r\n        (astDeclaration.astSymbol.followedSymbol.flags & ts.SymbolFlags.Optional) !== 0;\r\n\r\n      apiMethod = new ApiMethod({\r\n        name,\r\n        docComment,\r\n        releaseTag,\r\n        isStatic,\r\n        isOptional,\r\n        typeParameters,\r\n        parameters,\r\n        overloadIndex,\r\n        excerptTokens,\r\n        returnTypeTokenRange\r\n      });\r\n\r\n      parentApiItem.addMember(apiMethod);\r\n    }\r\n  }\r\n\r\n  private _processApiMethodSignature(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n\r\n    const overloadIndex: number = this._collector.getOverloadIndex(astDeclaration);\r\n    const containerKey: string = ApiMethodSignature.getContainerKey(name, overloadIndex);\r\n\r\n    let apiMethodSignature: ApiMethodSignature | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiMethodSignature;\r\n\r\n    if (apiMethodSignature === undefined) {\r\n      const methodSignature: ts.MethodSignature = astDeclaration.declaration as ts.MethodSignature;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const returnTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: methodSignature.type, tokenRange: returnTypeTokenRange });\r\n\r\n      const typeParameters: IApiTypeParameterOptions[] = this._captureTypeParameters(\r\n        nodesToCapture,\r\n        methodSignature.typeParameters\r\n      );\r\n\r\n      const parameters: IApiParameterOptions[] = this._captureParameters(\r\n        nodesToCapture,\r\n        methodSignature.parameters\r\n      );\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n      const isOptional: boolean =\r\n        (astDeclaration.astSymbol.followedSymbol.flags & ts.SymbolFlags.Optional) !== 0;\r\n\r\n      apiMethodSignature = new ApiMethodSignature({\r\n        name,\r\n        docComment,\r\n        releaseTag,\r\n        isOptional,\r\n        typeParameters,\r\n        parameters,\r\n        overloadIndex,\r\n        excerptTokens,\r\n        returnTypeTokenRange\r\n      });\r\n\r\n      parentApiItem.addMember(apiMethodSignature);\r\n    }\r\n  }\r\n\r\n  private _processApiNamespace(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n    const containerKey: string = ApiNamespace.getContainerKey(name);\r\n\r\n    let apiNamespace: ApiNamespace | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiNamespace;\r\n\r\n    if (apiNamespace === undefined) {\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, []);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiNamespace = new ApiNamespace({ name, docComment, releaseTag, excerptTokens });\r\n      parentApiItem.addMember(apiNamespace);\r\n    }\r\n\r\n    this._processChildDeclarations(astDeclaration, exportedName, apiNamespace);\r\n  }\r\n\r\n  private _processApiProperty(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n\r\n    const isStatic: boolean = (astDeclaration.modifierFlags & ts.ModifierFlags.Static) !== 0;\r\n\r\n    const containerKey: string = ApiProperty.getContainerKey(name, isStatic);\r\n\r\n    let apiProperty: ApiProperty | undefined = parentApiItem.tryGetMemberByKey(containerKey) as ApiProperty;\r\n\r\n    if (apiProperty === undefined) {\r\n      const propertyDeclaration: ts.PropertyDeclaration =\r\n        astDeclaration.declaration as ts.PropertyDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const propertyTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: propertyDeclaration.type, tokenRange: propertyTypeTokenRange });\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n      const isOptional: boolean =\r\n        (astDeclaration.astSymbol.followedSymbol.flags & ts.SymbolFlags.Optional) !== 0;\r\n\r\n      apiProperty = new ApiProperty({\r\n        name,\r\n        docComment,\r\n        releaseTag,\r\n        isStatic,\r\n        isOptional,\r\n        excerptTokens,\r\n        propertyTypeTokenRange\r\n      });\r\n      parentApiItem.addMember(apiProperty);\r\n    } else {\r\n      // If the property was already declared before (via a merged interface declaration),\r\n      // we assume its signature is identical, because the language requires that.\r\n    }\r\n  }\r\n\r\n  private _processApiPropertySignature(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n    const containerKey: string = ApiPropertySignature.getContainerKey(name);\r\n\r\n    let apiPropertySignature: ApiPropertySignature | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiPropertySignature;\r\n\r\n    if (apiPropertySignature === undefined) {\r\n      const propertySignature: ts.PropertySignature = astDeclaration.declaration as ts.PropertySignature;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const propertyTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: propertySignature.type, tokenRange: propertyTypeTokenRange });\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n      const isOptional: boolean =\r\n        (astDeclaration.astSymbol.followedSymbol.flags & ts.SymbolFlags.Optional) !== 0;\r\n\r\n      apiPropertySignature = new ApiPropertySignature({\r\n        name,\r\n        docComment,\r\n        releaseTag,\r\n        isOptional,\r\n        excerptTokens,\r\n        propertyTypeTokenRange\r\n      });\r\n\r\n      parentApiItem.addMember(apiPropertySignature);\r\n    } else {\r\n      // If the property was already declared before (via a merged interface declaration),\r\n      // we assume its signature is identical, because the language requires that.\r\n    }\r\n  }\r\n\r\n  private _processApiTypeAlias(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n\r\n    const containerKey: string = ApiTypeAlias.getContainerKey(name);\r\n\r\n    let apiTypeAlias: ApiTypeAlias | undefined = parentApiItem.tryGetMemberByKey(\r\n      containerKey\r\n    ) as ApiTypeAlias;\r\n\r\n    if (apiTypeAlias === undefined) {\r\n      const typeAliasDeclaration: ts.TypeAliasDeclaration =\r\n        astDeclaration.declaration as ts.TypeAliasDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const typeParameters: IApiTypeParameterOptions[] = this._captureTypeParameters(\r\n        nodesToCapture,\r\n        typeAliasDeclaration.typeParameters\r\n      );\r\n\r\n      const typeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: typeAliasDeclaration.type, tokenRange: typeTokenRange });\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiTypeAlias = new ApiTypeAlias({\r\n        name,\r\n        docComment,\r\n        typeParameters,\r\n        releaseTag,\r\n        excerptTokens,\r\n        typeTokenRange\r\n      });\r\n\r\n      parentApiItem.addMember(apiTypeAlias);\r\n    }\r\n  }\r\n\r\n  private _processApiVariable(\r\n    astDeclaration: AstDeclaration,\r\n    exportedName: string | undefined,\r\n    parentApiItem: ApiItemContainerMixin\r\n  ): void {\r\n    const name: string = exportedName ? exportedName : astDeclaration.astSymbol.localName;\r\n\r\n    const containerKey: string = ApiVariable.getContainerKey(name);\r\n\r\n    let apiVariable: ApiVariable | undefined = parentApiItem.tryGetMemberByKey(containerKey) as ApiVariable;\r\n\r\n    if (apiVariable === undefined) {\r\n      const variableDeclaration: ts.VariableDeclaration =\r\n        astDeclaration.declaration as ts.VariableDeclaration;\r\n\r\n      const nodesToCapture: IExcerptBuilderNodeToCapture[] = [];\r\n\r\n      const variableTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: variableDeclaration.type, tokenRange: variableTypeTokenRange });\r\n\r\n      const excerptTokens: IExcerptToken[] = this._buildExcerptTokens(astDeclaration, nodesToCapture);\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      const docComment: tsdoc.DocComment | undefined = apiItemMetadata.tsdocComment;\r\n      const releaseTag: ReleaseTag = apiItemMetadata.effectiveReleaseTag;\r\n\r\n      apiVariable = new ApiVariable({ name, docComment, releaseTag, excerptTokens, variableTypeTokenRange });\r\n\r\n      parentApiItem.addMember(apiVariable);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param nodesToCapture - A list of child nodes whose token ranges we want to capture\r\n   */\r\n  private _buildExcerptTokens(\r\n    astDeclaration: AstDeclaration,\r\n    nodesToCapture: IExcerptBuilderNodeToCapture[]\r\n  ): IExcerptToken[] {\r\n    const excerptTokens: IExcerptToken[] = [];\r\n\r\n    // Build the main declaration\r\n    ExcerptBuilder.addDeclaration(excerptTokens, astDeclaration, nodesToCapture, this._referenceGenerator);\r\n\r\n    const declarationMetadata: DeclarationMetadata = this._collector.fetchDeclarationMetadata(astDeclaration);\r\n\r\n    // Add any ancillary declarations\r\n    for (const ancillaryDeclaration of declarationMetadata.ancillaryDeclarations) {\r\n      ExcerptBuilder.addBlankLine(excerptTokens);\r\n      ExcerptBuilder.addDeclaration(\r\n        excerptTokens,\r\n        ancillaryDeclaration,\r\n        nodesToCapture,\r\n        this._referenceGenerator\r\n      );\r\n    }\r\n\r\n    return excerptTokens;\r\n  }\r\n\r\n  private _captureTypeParameters(\r\n    nodesToCapture: IExcerptBuilderNodeToCapture[],\r\n    typeParameterNodes: ts.NodeArray<ts.TypeParameterDeclaration> | undefined\r\n  ): IApiTypeParameterOptions[] {\r\n    const typeParameters: IApiTypeParameterOptions[] = [];\r\n    if (typeParameterNodes) {\r\n      for (const typeParameter of typeParameterNodes) {\r\n        const constraintTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n        nodesToCapture.push({ node: typeParameter.constraint, tokenRange: constraintTokenRange });\r\n\r\n        const defaultTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n        nodesToCapture.push({ node: typeParameter.default, tokenRange: defaultTypeTokenRange });\r\n\r\n        typeParameters.push({\r\n          typeParameterName: typeParameter.name.getText().trim(),\r\n          constraintTokenRange,\r\n          defaultTypeTokenRange\r\n        });\r\n      }\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  private _captureParameters(\r\n    nodesToCapture: IExcerptBuilderNodeToCapture[],\r\n    parameterNodes: ts.NodeArray<ts.ParameterDeclaration>\r\n  ): IApiParameterOptions[] {\r\n    const parameters: IApiParameterOptions[] = [];\r\n    for (const parameter of parameterNodes) {\r\n      const parameterTypeTokenRange: IExcerptTokenRange = ExcerptBuilder.createEmptyTokenRange();\r\n      nodesToCapture.push({ node: parameter.type, tokenRange: parameterTypeTokenRange });\r\n      parameters.push({\r\n        parameterName: parameter.name.getText().trim(),\r\n        parameterTypeTokenRange\r\n      });\r\n    }\r\n    return parameters;\r\n  }\r\n}\r\n"]}