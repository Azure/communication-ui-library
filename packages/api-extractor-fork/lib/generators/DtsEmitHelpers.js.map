{"version":3,"file":"DtsEmitHelpers.js","sourceRoot":"","sources":["../../src/generators/DtsEmitHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nimport { InternalError } from '@rushstack/node-core-library';\r\nimport { CollectorEntity } from '../collector/CollectorEntity';\r\nimport { AstImport, AstImportKind } from '../analyzer/AstImport';\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\nimport { StringWriter } from './StringWriter';\r\nimport { Collector } from '../collector/Collector';\r\nimport { Span } from '../analyzer/Span';\r\n\r\n/**\r\n * Some common code shared between DtsRollupGenerator and ApiReportGenerator.\r\n */\r\nexport class DtsEmitHelpers {\r\n  public static emitImport(\r\n    stringWriter: StringWriter,\r\n    collectorEntity: CollectorEntity,\r\n    astImport: AstImport\r\n  ): void {\r\n    const importPrefix: string = astImport.isTypeOnlyEverywhere ? 'import type' : 'import';\r\n\r\n    switch (astImport.importKind) {\r\n      case AstImportKind.DefaultImport:\r\n        if (collectorEntity.nameForEmit !== astImport.exportName) {\r\n          stringWriter.write(`${importPrefix} { default as ${collectorEntity.nameForEmit} }`);\r\n        } else {\r\n          stringWriter.write(`${importPrefix} ${astImport.exportName}`);\r\n        }\r\n        stringWriter.writeLine(` from '${astImport.modulePath}';`);\r\n        break;\r\n      case AstImportKind.NamedImport:\r\n        if (collectorEntity.nameForEmit === astImport.exportName) {\r\n          stringWriter.write(`${importPrefix} { ${astImport.exportName} }`);\r\n        } else {\r\n          stringWriter.write(`${importPrefix} { ${astImport.exportName} as ${collectorEntity.nameForEmit} }`);\r\n        }\r\n        stringWriter.writeLine(` from '${astImport.modulePath}';`);\r\n        break;\r\n      case AstImportKind.StarImport:\r\n        stringWriter.writeLine(\r\n          `${importPrefix} * as ${collectorEntity.nameForEmit} from '${astImport.modulePath}';`\r\n        );\r\n        break;\r\n      case AstImportKind.EqualsImport:\r\n        stringWriter.writeLine(\r\n          `${importPrefix} ${collectorEntity.nameForEmit} = require('${astImport.modulePath}');`\r\n        );\r\n        break;\r\n      case AstImportKind.ImportType:\r\n        if (!astImport.exportName) {\r\n          stringWriter.writeLine(\r\n            `${importPrefix} * as ${collectorEntity.nameForEmit} from '${astImport.modulePath}';`\r\n          );\r\n        } else {\r\n          const topExportName: string = astImport.exportName.split('.')[0];\r\n          if (collectorEntity.nameForEmit === topExportName) {\r\n            stringWriter.write(`${importPrefix} { ${topExportName} }`);\r\n          } else {\r\n            stringWriter.write(`${importPrefix} { ${topExportName} as ${collectorEntity.nameForEmit} }`);\r\n          }\r\n          stringWriter.writeLine(` from '${astImport.modulePath}';`);\r\n        }\r\n        break;\r\n      default:\r\n        throw new InternalError('Unimplemented AstImportKind');\r\n    }\r\n  }\r\n\r\n  public static emitNamedExport(\r\n    stringWriter: StringWriter,\r\n    exportName: string,\r\n    collectorEntity: CollectorEntity\r\n  ): void {\r\n    if (exportName === ts.InternalSymbolName.Default) {\r\n      stringWriter.writeLine(`export default ${collectorEntity.nameForEmit};`);\r\n    } else if (collectorEntity.nameForEmit !== exportName) {\r\n      stringWriter.writeLine(`export { ${collectorEntity.nameForEmit} as ${exportName} }`);\r\n    } else {\r\n      stringWriter.writeLine(`export { ${exportName} }`);\r\n    }\r\n  }\r\n\r\n  public static emitStarExports(stringWriter: StringWriter, collector: Collector): void {\r\n    if (collector.starExportedExternalModulePaths.length > 0) {\r\n      stringWriter.writeLine();\r\n      for (const starExportedExternalModulePath of collector.starExportedExternalModulePaths) {\r\n        stringWriter.writeLine(`export * from \"${starExportedExternalModulePath}\";`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public static modifyImportTypeSpan(\r\n    collector: Collector,\r\n    span: Span,\r\n    astDeclaration: AstDeclaration,\r\n    modifyNestedSpan: (childSpan: Span, childAstDeclaration: AstDeclaration) => void\r\n  ): void {\r\n    const node: ts.ImportTypeNode = span.node as ts.ImportTypeNode;\r\n    const referencedEntity: CollectorEntity | undefined = collector.tryGetEntityForNode(node);\r\n\r\n    if (referencedEntity) {\r\n      if (!referencedEntity.nameForEmit) {\r\n        // This should never happen\r\n        throw new InternalError('referencedEntry.nameForEmit is undefined');\r\n      }\r\n\r\n      let typeArgumentsText: string = '';\r\n\r\n      if (node.typeArguments && node.typeArguments.length > 0) {\r\n        // Type arguments have to be processed and written to the document\r\n        const lessThanTokenPos: number = span.children.findIndex(\r\n          (childSpan) => childSpan.node.kind === ts.SyntaxKind.LessThanToken\r\n        );\r\n        const greaterThanTokenPos: number = span.children.findIndex(\r\n          (childSpan) => childSpan.node.kind === ts.SyntaxKind.GreaterThanToken\r\n        );\r\n\r\n        if (lessThanTokenPos < 0 || greaterThanTokenPos <= lessThanTokenPos) {\r\n          throw new InternalError('Invalid type arguments:\\n' + node.getText());\r\n        }\r\n\r\n        const typeArgumentsSpans: Span[] = span.children.slice(lessThanTokenPos + 1, greaterThanTokenPos);\r\n\r\n        // Apply modifications to Span elements of typeArguments\r\n        typeArgumentsSpans.forEach((childSpan) => {\r\n          const childAstDeclaration: AstDeclaration = AstDeclaration.isSupportedSyntaxKind(childSpan.kind)\r\n            ? collector.astSymbolTable.getChildAstDeclarationByNode(childSpan.node, astDeclaration)\r\n            : astDeclaration;\r\n\r\n          modifyNestedSpan(childSpan, childAstDeclaration);\r\n        });\r\n\r\n        const typeArgumentsStrings: string[] = typeArgumentsSpans.map((childSpan) =>\r\n          childSpan.getModifiedText()\r\n        );\r\n        typeArgumentsText = `<${typeArgumentsStrings.join(', ')}>`;\r\n      }\r\n\r\n      const separatorAfter: string = /(\\s*)$/.exec(span.getText())?.[1] ?? '';\r\n\r\n      if (\r\n        referencedEntity.astEntity instanceof AstImport &&\r\n        referencedEntity.astEntity.importKind === AstImportKind.ImportType &&\r\n        referencedEntity.astEntity.exportName\r\n      ) {\r\n        // For an ImportType with a namespace chain, only the top namespace is imported.\r\n        // Must add the original nested qualifiers to the rolled up import.\r\n        const qualifiersText: string = node.qualifier?.getText() ?? '';\r\n        const nestedQualifiersStart: number = qualifiersText.indexOf('.');\r\n        // Including the leading \".\"\r\n        const nestedQualifiersText: string =\r\n          nestedQualifiersStart >= 0 ? qualifiersText.substring(nestedQualifiersStart) : '';\r\n\r\n        const replacement: string = `${referencedEntity.nameForEmit}${nestedQualifiersText}${typeArgumentsText}${separatorAfter}`;\r\n\r\n        span.modification.skipAll();\r\n        span.modification.prefix = replacement;\r\n      } else {\r\n        // Replace with internal symbol or AstImport\r\n\r\n        span.modification.skipAll();\r\n        span.modification.prefix = `${referencedEntity.nameForEmit}${typeArgumentsText}${separatorAfter}`;\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}