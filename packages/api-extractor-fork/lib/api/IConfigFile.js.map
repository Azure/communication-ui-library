{"version":3,"file":"IConfigFile.js","sourceRoot":"","sources":["../../src/api/IConfigFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ExtractorLogLevel } from './ExtractorLogLevel';\r\n\r\n/**\r\n * Determines how the TypeScript compiler engine will be invoked by API Extractor.\r\n *\r\n * @remarks\r\n * This is part of the {@link IConfigFile} structure.\r\n *\r\n * @public\r\n */\r\nexport interface IConfigCompiler {\r\n  /**\r\n   * Specifies the path to the tsconfig.json file to be used by API Extractor when analyzing the project.\r\n   *\r\n   * @remarks\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as `<projectFolder>`.\r\n   *\r\n   * Note: This setting will be ignored if `overrideTsconfig` is used.\r\n   */\r\n  tsconfigFilePath?: string;\r\n\r\n  /**\r\n   * Provides a compiler configuration that will be used instead of reading the tsconfig.json file from disk.\r\n   *\r\n   * @remarks\r\n   * The value must conform to the TypeScript tsconfig schema:\r\n   *\r\n   * http://json.schemastore.org/tsconfig\r\n   *\r\n   * If omitted, then the tsconfig.json file will instead be read from the projectFolder.\r\n   */\r\n  overrideTsconfig?: {};\r\n\r\n  /**\r\n   * This option causes the compiler to be invoked with the `--skipLibCheck` option.\r\n   *\r\n   * @remarks\r\n   * This option is not recommended and may cause API Extractor to produce incomplete or incorrect declarations,\r\n   * but it may be required when dependencies contain declarations that are incompatible with the TypeScript engine\r\n   * that API Extractor uses for its analysis.  Where possible, the underlying issue should be fixed rather than\r\n   * relying on skipLibCheck.\r\n   */\r\n  skipLibCheck?: boolean;\r\n}\r\n\r\n/**\r\n * Configures how the API report files (*.api.md) will be generated.\r\n *\r\n * @remarks\r\n * This is part of the {@link IConfigFile} structure.\r\n *\r\n * @public\r\n */\r\nexport interface IConfigApiReport {\r\n  /**\r\n   * Whether to generate an API report.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * The filename for the API report files.  It will be combined with `reportFolder` or `reportTempFolder` to produce\r\n   * a full output filename.\r\n   *\r\n   * @remarks\r\n   * The file extension should be \".api.md\", and the string should not contain a path separator such as `\\` or `/`.\r\n   */\r\n  reportFileName?: string;\r\n\r\n  /**\r\n   * Specifies the folder where the API report file is written.  The file name portion is determined by\r\n   * the `reportFileName` setting.\r\n   *\r\n   * @remarks\r\n   * The API report file is normally tracked by Git.  Changes to it can be used to trigger a branch policy,\r\n   * e.g. for an API review.\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as `<projectFolder>`.\r\n   */\r\n  reportFolder?: string;\r\n\r\n  /**\r\n   * Specifies the folder where the temporary report file is written.  The file name portion is determined by\r\n   * the `reportFileName` setting.\r\n   *\r\n   * @remarks\r\n   * After the temporary file is written to disk, it is compared with the file in the `reportFolder`.\r\n   * If they are different, a production build will fail.\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as `<projectFolder>`.\r\n   */\r\n  reportTempFolder?: string;\r\n}\r\n\r\n/**\r\n * Configures how the doc model file (*.api.json) will be generated.\r\n *\r\n * @remarks\r\n * This is part of the {@link IConfigFile} structure.\r\n *\r\n * @public\r\n */\r\nexport interface IConfigDocModel {\r\n  /**\r\n   * Whether to generate a doc model file.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * The output path for the doc model file.  The file extension should be \".api.json\".\r\n   *\r\n   * @remarks\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as `<projectFolder>`.\r\n   */\r\n  apiJsonFilePath?: string;\r\n}\r\n\r\n/**\r\n * Configures how the .d.ts rollup file will be generated.\r\n *\r\n * @remarks\r\n * This is part of the {@link IConfigFile} structure.\r\n *\r\n * @public\r\n */\r\nexport interface IConfigDtsRollup {\r\n  /**\r\n   * Whether to generate the .d.ts rollup file.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * Specifies the output path for a .d.ts rollup file to be generated without any trimming.\r\n   *\r\n   * @remarks\r\n   * This file will include all declarations that are exported by the main entry point.\r\n   *\r\n   * If the path is an empty string, then this file will not be written.\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as `<projectFolder>`.\r\n   */\r\n  untrimmedFilePath?: string;\r\n\r\n  /**\r\n   * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"beta\" release.\r\n   *\r\n   * @remarks\r\n   * This file will include only declarations that are marked as `@public` or `@beta`.\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as `<projectFolder>`.\r\n   */\r\n  betaTrimmedFilePath?: string;\r\n\r\n  /**\r\n   * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"public\" release.\r\n   *\r\n   * @remarks\r\n   * This file will include only declarations that are marked as `@public`.\r\n   *\r\n   * If the path is an empty string, then this file will not be written.\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as `<projectFolder>`.\r\n   */\r\n  publicTrimmedFilePath?: string;\r\n\r\n  /**\r\n   * When a declaration is trimmed, by default it will be replaced by a code comment such as\r\n   * \"Excluded from this release type: exampleMember\".  Set \"omitTrimmingComments\" to true to remove the\r\n   * declaration completely.\r\n   */\r\n  omitTrimmingComments?: boolean;\r\n}\r\n\r\n/**\r\n * Configures how the tsdoc-metadata.json file will be generated.\r\n *\r\n * @remarks\r\n * This is part of the {@link IConfigFile} structure.\r\n *\r\n * @public\r\n */\r\nexport interface IConfigTsdocMetadata {\r\n  /**\r\n   * Whether to generate the tsdoc-metadata.json file.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * Specifies where the TSDoc metadata file should be written.\r\n   *\r\n   * @remarks\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as `<projectFolder>`.\r\n   *\r\n   * The default value is `<lookup>`, which causes the path to be automatically inferred from the `tsdocMetadata`,\r\n   * `typings` or `main` fields of the project's package.json.  If none of these fields are set, the lookup\r\n   * falls back to `tsdoc-metadata.json` in the package folder.\r\n   */\r\n  tsdocMetadataFilePath?: string;\r\n}\r\n\r\n/**\r\n * Configures reporting for a given message identifier.\r\n *\r\n * @remarks\r\n * This is part of the {@link IConfigFile} structure.\r\n *\r\n * @public\r\n */\r\nexport interface IConfigMessageReportingRule {\r\n  /**\r\n   * Specifies whether the message should be written to the the tool's output log.\r\n   *\r\n   * @remarks\r\n   * Note that the `addToApiReportFile` property may supersede this option.\r\n   */\r\n  logLevel: ExtractorLogLevel;\r\n\r\n  /**\r\n   * When `addToApiReportFile` is true:  If API Extractor is configured to write an API report file (.api.md),\r\n   * then the message will be written inside that file; otherwise, the message is instead logged according to\r\n   * the `logLevel` option.\r\n   */\r\n  addToApiReportFile?: boolean;\r\n}\r\n\r\n/**\r\n * Specifies a table of reporting rules for different message identifiers, and also the default rule used for\r\n * identifiers that do not appear in the table.\r\n *\r\n * @remarks\r\n * This is part of the {@link IConfigFile} structure.\r\n *\r\n * @public\r\n */\r\nexport interface IConfigMessageReportingTable {\r\n  /**\r\n   * The key is a message identifier for the associated type of message, or \"default\" to specify the default policy.\r\n   * For example, the key might be `TS2551` (a compiler message), `tsdoc-link-tag-unescaped-text` (a TSDOc message),\r\n   * or `ae-extra-release-tag` (a message related to the API Extractor analysis).\r\n   */\r\n  [messageId: string]: IConfigMessageReportingRule;\r\n}\r\n\r\n/**\r\n * Configures how API Extractor reports error and warning messages produced during analysis.\r\n *\r\n * @remarks\r\n * This is part of the {@link IConfigFile} structure.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorMessagesConfig {\r\n  /**\r\n   * Configures handling of diagnostic messages generating the TypeScript compiler while analyzing the\r\n   * input .d.ts files.\r\n   */\r\n  compilerMessageReporting?: IConfigMessageReportingTable;\r\n\r\n  /**\r\n   * Configures handling of messages reported by API Extractor during its analysis.\r\n   */\r\n  extractorMessageReporting?: IConfigMessageReportingTable;\r\n\r\n  /**\r\n   * Configures handling of messages reported by the TSDoc parser when analyzing code comments.\r\n   */\r\n  tsdocMessageReporting?: IConfigMessageReportingTable;\r\n}\r\n\r\n/**\r\n * Configuration options for the API Extractor tool.  These options can be constructed programmatically\r\n * or loaded from the api-extractor.json config file using the {@link ExtractorConfig} class.\r\n *\r\n * @public\r\n */\r\nexport interface IConfigFile {\r\n  /**\r\n   * Optionally specifies another JSON config file that this file extends from.  This provides a way for\r\n   * standard settings to be shared across multiple projects.\r\n   *\r\n   * @remarks\r\n   * If the path starts with `./` or `../`, the path is resolved relative to the folder of the file that contains\r\n   * the `extends` field.  Otherwise, the first path segment is interpreted as an NPM package name, and will be\r\n   * resolved using NodeJS `require()`.\r\n   */\r\n  extends?: string;\r\n\r\n  /**\r\n   * Determines the `<projectFolder>` token that can be used with other config file settings.  The project folder\r\n   * typically contains the tsconfig.json and package.json config files, but the path is user-defined.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting.\r\n   *\r\n   * The default value for `projectFolder` is the token `<lookup>`, which means the folder is determined using\r\n   * the following heuristics:\r\n   *\r\n   * If the config/rig.json system is used (as defined by {@link https://www.npmjs.com/package/@rushstack/rig-package\r\n   * | @rushstack/rig-package}), then the `<lookup>` value will be the package folder that referenced the rig.\r\n   *\r\n   * Otherwise, the `<lookup>` value is determined by traversing parent folders, starting from the folder containing\r\n   * api-extractor.json, and stopping at the first folder that contains a tsconfig.json file.  If a tsconfig.json file\r\n   * cannot be found in this way, then an error will be reported.\r\n   */\r\n  projectFolder?: string;\r\n\r\n  /**\r\n   * Specifies the .d.ts file to be used as the starting point for analysis.  API Extractor\r\n   * analyzes the symbols exported by this module.\r\n   *\r\n   * @remarks\r\n   *\r\n   * The file extension must be \".d.ts\" and not \".ts\".\r\n   * The path is resolved relative to the \"projectFolder\" location.\r\n   */\r\n  mainEntryPointFilePath: string;\r\n\r\n  /**\r\n   * A list of NPM package names whose exports should be treated as part of this package.\r\n   *\r\n   * @remarks\r\n   *\r\n   * For example, suppose that Webpack is used to generate a distributed bundle for the project `library1`,\r\n   * and another NPM package `library2` is embedded in this bundle.  Some types from `library2` may become part\r\n   * of the exported API for `library1`, but by default API Extractor would generate a .d.ts rollup that explicitly\r\n   * imports `library2`.  To avoid this, we can specify:\r\n   *\r\n   * ```js\r\n   *   \"bundledPackages\": [ \"library2\" ],\r\n   * ```\r\n   *\r\n   * This would direct API Extractor to embed those types directly in the .d.ts rollup, as if they had been\r\n   * local files for `library1`.\r\n   */\r\n  bundledPackages?: string[];\r\n\r\n  /**\r\n   * {@inheritDoc IConfigCompiler}\r\n   */\r\n  compiler?: IConfigCompiler;\r\n\r\n  /**\r\n   * {@inheritDoc IConfigApiReport}\r\n   */\r\n  apiReport?: IConfigApiReport;\r\n\r\n  /**\r\n   * {@inheritDoc IConfigDocModel}\r\n   */\r\n  docModel?: IConfigDocModel;\r\n\r\n  /**\r\n   * {@inheritDoc IConfigDtsRollup}\r\n   * @beta\r\n   */\r\n  dtsRollup?: IConfigDtsRollup;\r\n\r\n  /**\r\n   * {@inheritDoc IConfigTsdocMetadata}\r\n   * @beta\r\n   */\r\n  tsdocMetadata?: IConfigTsdocMetadata;\r\n\r\n  /**\r\n   * Specifies what type of newlines API Extractor should use when writing output files.\r\n   *\r\n   * @remarks\r\n   * By default, the output files will be written with Windows-style newlines.\r\n   * To use POSIX-style newlines, specify \"lf\" instead.\r\n   * To use the OS's default newline kind, specify \"os\".\r\n   */\r\n  newlineKind?: 'crlf' | 'lf' | 'os';\r\n\r\n  /**\r\n   * {@inheritDoc IExtractorMessagesConfig}\r\n   */\r\n  messages?: IExtractorMessagesConfig;\r\n\r\n  /**\r\n   * Set to true when invoking API Extractor's test harness.\r\n   * @remarks\r\n   * When `testMode` is true, the `toolVersion` field in the .api.json file is assigned an empty string\r\n   * to prevent spurious diffs in output files tracked for tests.\r\n   */\r\n  testMode?: boolean;\r\n}\r\n"]}