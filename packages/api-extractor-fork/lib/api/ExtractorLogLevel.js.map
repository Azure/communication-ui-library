{"version":3,"file":"ExtractorLogLevel.js","sourceRoot":"","sources":["../../src/api/ExtractorLogLevel.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Used with {@link IConfigMessageReportingRule.logLevel} and {@link IExtractorInvokeOptions.messageCallback}.\r\n *\r\n * @remarks\r\n * This is part of the {@link IConfigFile} structure.\r\n *\r\n * @public\r\n */\r\nexport const enum ExtractorLogLevel {\r\n  /**\r\n   * The message will be displayed as an error.\r\n   *\r\n   * @remarks\r\n   * Errors typically cause the build to fail and return a nonzero exit code.\r\n   */\r\n  Error = 'error',\r\n\r\n  /**\r\n   * The message will be displayed as an warning.\r\n   *\r\n   * @remarks\r\n   * Warnings typically cause a production build fail and return a nonzero exit code.  For a non-production build\r\n   * (e.g. using the `--local` option with `api-extractor run`), the warning is displayed but the build will not fail.\r\n   */\r\n  Warning = 'warning',\r\n\r\n  /**\r\n   * The message will be displayed as an informational message.\r\n   *\r\n   * @remarks\r\n   * Informational messages may contain newlines to ensure nice formatting of the output,\r\n   * however word-wrapping is the responsibility of the message handler.\r\n   */\r\n  Info = 'info',\r\n\r\n  /**\r\n   * The message will be displayed only when \"verbose\" output is requested, e.g. using the `--verbose`\r\n   * command line option.\r\n   */\r\n  Verbose = 'verbose',\r\n\r\n  /**\r\n   * The message will be discarded entirely.\r\n   */\r\n  None = 'none'\r\n}\r\n"]}