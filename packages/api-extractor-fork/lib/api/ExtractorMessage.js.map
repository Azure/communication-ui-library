{"version":3,"file":"ExtractorMessage.js","sourceRoot":"","sources":["../../src/api/ExtractorMessage.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAM3D,yFAAsF;AA4EtF;;;;GAIG;AACH,MAAa,gBAAgB;IA2C3B,gBAAgB;IAChB,YAAmB,OAAiC;QAClD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAE3C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,qBAA0B,CAAC;IAC9D,CAAC;IAED;;;;;;;;;;;OAWG;IACH,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,IAAW,OAAO,CAAC,KAAc;QAC/B,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE;YAC3B,MAAM,IAAI,KAAK,CACb,yFAAyF,CAC1F,CAAC;SACH;QACD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAW,QAAQ,CAAC,KAAwB;QAC1C,QAAQ,KAAK,EAAE;YACb,yBAA6B;YAC7B,uBAA4B;YAC5B,uBAA4B;YAC5B,6BAA+B;YAC/B;gBACE,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACxC;QACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACzB,CAAC;IAED;;;;;;;OAOG;IACI,yBAAyB,CAAC,wBAA4C;QAC3E,IAAI,MAAM,GAAW,EAAE,CAAC;QAExB,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,MAAM,IAAI,yDAA2B,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE;gBACpE,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;gBACvC,wBAAwB;aACzB,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrB,MAAM,IAAI,KAAK,CAAC;aACjB;SACF;QAED,MAAM,IAAI,IAAI,CAAC,4BAA4B,EAAE,CAAC;QAE9C,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,4BAA4B;QACjC,OAAO,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC;IAC5C,CAAC;CACF;AAhJD,4CAgJC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\nimport { ExtractorMessageId } from './ExtractorMessageId';\r\nimport { ExtractorLogLevel } from './ExtractorLogLevel';\r\nimport { ConsoleMessageId } from './ConsoleMessageId';\r\nimport { SourceFileLocationFormatter } from '../analyzer/SourceFileLocationFormatter';\r\n\r\n/**\r\n * Used by {@link ExtractorMessage.properties}.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorMessageProperties {\r\n  /**\r\n   * A declaration can have multiple names if it is exported more than once.\r\n   * If an `ExtractorMessage` applies to a specific export name, this property can indicate that.\r\n   *\r\n   * @remarks\r\n   *\r\n   * Used by {@link ExtractorMessageId.InternalMissingUnderscore}.\r\n   */\r\n  readonly exportName?: string;\r\n}\r\n\r\n/**\r\n * Specifies a category of messages for use with {@link ExtractorMessage}.\r\n * @public\r\n */\r\nexport const enum ExtractorMessageCategory {\r\n  /**\r\n   * Messages originating from the TypeScript compiler.\r\n   *\r\n   * @remarks\r\n   * These strings begin with the prefix \"TS\" and have a numeric error code.\r\n   * Example: `TS2551`\r\n   */\r\n  Compiler = 'Compiler',\r\n\r\n  /**\r\n   * Messages related to parsing of TSDoc comments.\r\n   *\r\n   * @remarks\r\n   * These strings begin with the prefix \"tsdoc-\".\r\n   * Example: `tsdoc-link-tag-unescaped-text`\r\n   */\r\n  TSDoc = 'TSDoc',\r\n\r\n  /**\r\n   * Messages related to API Extractor's analysis.\r\n   *\r\n   * @remarks\r\n   * These strings begin with the prefix \"ae-\".\r\n   * Example: `ae-extra-release-tag`\r\n   */\r\n  Extractor = 'Extractor',\r\n\r\n  /**\r\n   * Console messages communicate the progress of the overall operation.  They may include newlines to ensure\r\n   * nice formatting.  They are output in real time, and cannot be routed to the API Report file.\r\n   *\r\n   * @remarks\r\n   * These strings begin with the prefix \"console-\".\r\n   * Example: `console-writing-typings-file`\r\n   */\r\n  Console = 'console'\r\n}\r\n\r\n/**\r\n * Constructor options for `ExtractorMessage`.\r\n */\r\nexport interface IExtractorMessageOptions {\r\n  category: ExtractorMessageCategory;\r\n  messageId: tsdoc.TSDocMessageId | ExtractorMessageId | ConsoleMessageId | string;\r\n  text: string;\r\n  sourceFilePath?: string;\r\n  sourceFileLine?: number;\r\n  sourceFileColumn?: number;\r\n  properties?: IExtractorMessageProperties;\r\n  logLevel?: ExtractorLogLevel;\r\n}\r\n\r\n/**\r\n * This object is used to report an error or warning that occurred during API Extractor's analysis.\r\n *\r\n * @public\r\n */\r\nexport class ExtractorMessage {\r\n  private _handled: boolean;\r\n  private _logLevel: ExtractorLogLevel;\r\n\r\n  /**\r\n   * The category of issue.\r\n   */\r\n  public readonly category: ExtractorMessageCategory;\r\n\r\n  /**\r\n   * A text string that uniquely identifies the issue type.  This identifier can be used to suppress\r\n   * or configure the reporting of issues, and also to search for help about an issue.\r\n   */\r\n  public readonly messageId: tsdoc.TSDocMessageId | ExtractorMessageId | ConsoleMessageId | string;\r\n\r\n  /**\r\n   * The text description of this issue.\r\n   */\r\n  public readonly text: string;\r\n\r\n  /**\r\n   * The absolute path to the affected input source file, if there is one.\r\n   */\r\n  public readonly sourceFilePath: string | undefined;\r\n\r\n  /**\r\n   * The line number where the issue occurred in the input source file.  This is not used if `sourceFilePath`\r\n   * is undefined.  The first line number is 1.\r\n   */\r\n  public readonly sourceFileLine: number | undefined;\r\n\r\n  /**\r\n   * The column number where the issue occurred in the input source file.  This is not used if `sourceFilePath`\r\n   * is undefined.  The first column number is 1.\r\n   */\r\n  public readonly sourceFileColumn: number | undefined;\r\n\r\n  /**\r\n   * Additional contextual information about the message that may be useful when reporting errors.\r\n   * All properties are optional.\r\n   */\r\n  public readonly properties: IExtractorMessageProperties;\r\n\r\n  /** @internal */\r\n  public constructor(options: IExtractorMessageOptions) {\r\n    this.category = options.category;\r\n    this.messageId = options.messageId;\r\n    this.text = options.text;\r\n    this.sourceFilePath = options.sourceFilePath;\r\n    this.sourceFileLine = options.sourceFileLine;\r\n    this.sourceFileColumn = options.sourceFileColumn;\r\n    this.properties = options.properties || {};\r\n\r\n    this._handled = false;\r\n    this._logLevel = options.logLevel || ExtractorLogLevel.None;\r\n  }\r\n\r\n  /**\r\n   * If the {@link IExtractorInvokeOptions.messageCallback} sets this property to true, it will prevent the message\r\n   * from being displayed by API Extractor.\r\n   *\r\n   * @remarks\r\n   * If the `messageCallback` routes the message to a custom handler (e.g. a toolchain logger), it should\r\n   * assign `handled = true` to prevent API Extractor from displaying it.  Assigning `handled = true` for all messages\r\n   * would effectively disable all console output from the `Extractor` API.\r\n   *\r\n   * If `handled` is set to true, the message will still be included in the count of errors/warnings;\r\n   * to discard a message entirely, instead assign `logLevel = none`.\r\n   */\r\n  public get handled(): boolean {\r\n    return this._handled;\r\n  }\r\n\r\n  public set handled(value: boolean) {\r\n    if (this._handled && !value) {\r\n      throw new Error(\r\n        'One a message has been marked as handled, the \"handled\" property cannot be set to false'\r\n      );\r\n    }\r\n    this._handled = value;\r\n  }\r\n\r\n  /**\r\n   * Specifies how the message should be reported.\r\n   *\r\n   * @remarks\r\n   * If the {@link IExtractorInvokeOptions.messageCallback} handles the message (i.e. sets `handled = true`),\r\n   * it can use the `logLevel` to determine how to display the message.\r\n   *\r\n   * Alternatively, if API Extractor is handling the message, the `messageCallback` could assign `logLevel` to change\r\n   * how it will be processed.  However, in general the recommended practice is to configure message routing\r\n   * using the `messages` section in api-extractor.json.\r\n   *\r\n   * To discard a message entirely, assign `logLevel = none`.\r\n   */\r\n  public get logLevel(): ExtractorLogLevel {\r\n    return this._logLevel;\r\n  }\r\n\r\n  public set logLevel(value: ExtractorLogLevel) {\r\n    switch (value) {\r\n      case ExtractorLogLevel.Error:\r\n      case ExtractorLogLevel.Info:\r\n      case ExtractorLogLevel.None:\r\n      case ExtractorLogLevel.Verbose:\r\n      case ExtractorLogLevel.Warning:\r\n        break;\r\n      default:\r\n        throw new Error('Invalid log level');\r\n    }\r\n    this._logLevel = value;\r\n  }\r\n\r\n  /**\r\n   * Returns the message formatted with its identifier and file position.\r\n   * @remarks\r\n   * Example:\r\n   * ```\r\n   * src/folder/File.ts:123:4 - (ae-extra-release-tag) The doc comment should not contain more than one release tag.\r\n   * ```\r\n   */\r\n  public formatMessageWithLocation(workingPackageFolderPath: string | undefined): string {\r\n    let result: string = '';\r\n\r\n    if (this.sourceFilePath) {\r\n      result += SourceFileLocationFormatter.formatPath(this.sourceFilePath, {\r\n        sourceFileLine: this.sourceFileLine,\r\n        sourceFileColumn: this.sourceFileColumn,\r\n        workingPackageFolderPath\r\n      });\r\n\r\n      if (result.length > 0) {\r\n        result += ' - ';\r\n      }\r\n    }\r\n\r\n    result += this.formatMessageWithoutLocation();\r\n\r\n    return result;\r\n  }\r\n\r\n  public formatMessageWithoutLocation(): string {\r\n    return `(${this.messageId}) ${this.text}`;\r\n  }\r\n}\r\n"]}