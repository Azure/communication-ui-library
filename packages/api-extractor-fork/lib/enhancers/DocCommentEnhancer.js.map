{"version":3,"file":"DocCommentEnhancer.js","sourceRoot":"","sources":["../../src/enhancers/DocCommentEnhancer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\n\r\nimport { Collector } from '../collector/Collector';\r\nimport { AstSymbol } from '../analyzer/AstSymbol';\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\nimport { ApiItemMetadata } from '../collector/ApiItemMetadata';\r\nimport { ReleaseTag } from '@microsoft/api-extractor-model';\r\nimport { ExtractorMessageId } from '../api/ExtractorMessageId';\r\nimport { VisitorState } from '../collector/VisitorState';\r\nimport { ResolverFailure } from '../analyzer/AstReferenceResolver';\r\n\r\nexport class DocCommentEnhancer {\r\n  private readonly _collector: Collector;\r\n\r\n  public constructor(collector: Collector) {\r\n    this._collector = collector;\r\n  }\r\n\r\n  public static analyze(collector: Collector): void {\r\n    const docCommentEnhancer: DocCommentEnhancer = new DocCommentEnhancer(collector);\r\n    docCommentEnhancer.analyze();\r\n  }\r\n\r\n  public analyze(): void {\r\n    for (const entity of this._collector.entities) {\r\n      if (entity.astEntity instanceof AstSymbol) {\r\n        if (entity.exported) {\r\n          entity.astEntity.forEachDeclarationRecursive((astDeclaration: AstDeclaration) => {\r\n            this._analyzeApiItem(astDeclaration);\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _analyzeApiItem(astDeclaration: AstDeclaration): void {\r\n    const metadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n    if (metadata.docCommentEnhancerVisitorState === VisitorState.Visited) {\r\n      return;\r\n    }\r\n\r\n    if (metadata.docCommentEnhancerVisitorState === VisitorState.Visiting) {\r\n      this._collector.messageRouter.addAnalyzerIssue(\r\n        ExtractorMessageId.CyclicInheritDoc,\r\n        `The @inheritDoc tag for \"${astDeclaration.astSymbol.localName}\" refers to its own declaration`,\r\n        astDeclaration\r\n      );\r\n      return;\r\n    }\r\n    metadata.docCommentEnhancerVisitorState = VisitorState.Visiting;\r\n\r\n    if (metadata.tsdocComment && metadata.tsdocComment.inheritDocTag) {\r\n      this._applyInheritDoc(astDeclaration, metadata.tsdocComment, metadata.tsdocComment.inheritDocTag);\r\n    }\r\n\r\n    this._analyzeNeedsDocumentation(astDeclaration, metadata);\r\n\r\n    this._checkForBrokenLinks(astDeclaration, metadata);\r\n\r\n    metadata.docCommentEnhancerVisitorState = VisitorState.Visited;\r\n  }\r\n\r\n  private _analyzeNeedsDocumentation(astDeclaration: AstDeclaration, metadata: ApiItemMetadata): void {\r\n    if (astDeclaration.declaration.kind === ts.SyntaxKind.Constructor) {\r\n      // Constructors always do pretty much the same thing, so it's annoying to require people to write\r\n      // descriptions for them.  Instead, if the constructor lacks a TSDoc summary, then API Extractor\r\n      // will auto-generate one.\r\n      metadata.needsDocumentation = false;\r\n\r\n      // The class that contains this constructor\r\n      const classDeclaration: AstDeclaration = astDeclaration.parent!;\r\n\r\n      const configuration: tsdoc.TSDocConfiguration = this._collector.extractorConfig.tsdocConfiguration;\r\n\r\n      if (!metadata.tsdocComment) {\r\n        metadata.tsdocComment = new tsdoc.DocComment({ configuration });\r\n      }\r\n\r\n      if (!tsdoc.PlainTextEmitter.hasAnyTextContent(metadata.tsdocComment.summarySection)) {\r\n        metadata.tsdocComment.summarySection.appendNodesInParagraph([\r\n          new tsdoc.DocPlainText({ configuration, text: 'Constructs a new instance of the ' }),\r\n          new tsdoc.DocCodeSpan({\r\n            configuration,\r\n            code: classDeclaration.astSymbol.localName\r\n          }),\r\n          new tsdoc.DocPlainText({ configuration, text: ' class' })\r\n        ]);\r\n      }\r\n\r\n      const apiItemMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(astDeclaration);\r\n      if (apiItemMetadata.effectiveReleaseTag === ReleaseTag.Internal) {\r\n        // If the constructor is marked as internal, then add a boilerplate notice for the containing class\r\n        const classMetadata: ApiItemMetadata = this._collector.fetchApiItemMetadata(classDeclaration);\r\n\r\n        if (!classMetadata.tsdocComment) {\r\n          classMetadata.tsdocComment = new tsdoc.DocComment({ configuration });\r\n        }\r\n\r\n        if (classMetadata.tsdocComment.remarksBlock === undefined) {\r\n          classMetadata.tsdocComment.remarksBlock = new tsdoc.DocBlock({\r\n            configuration,\r\n            blockTag: new tsdoc.DocBlockTag({\r\n              configuration,\r\n              tagName: tsdoc.StandardTags.remarks.tagName\r\n            })\r\n          });\r\n        }\r\n\r\n        classMetadata.tsdocComment.remarksBlock.content.appendNode(\r\n          new tsdoc.DocParagraph({ configuration }, [\r\n            new tsdoc.DocPlainText({\r\n              configuration,\r\n              text:\r\n                `The constructor for this class is marked as internal. Third-party code should not` +\r\n                ` call the constructor directly or create subclasses that extend the `\r\n            }),\r\n            new tsdoc.DocCodeSpan({\r\n              configuration,\r\n              code: classDeclaration.astSymbol.localName\r\n            }),\r\n            new tsdoc.DocPlainText({ configuration, text: ' class.' })\r\n          ])\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (metadata.tsdocComment) {\r\n      // Require the summary to contain at least 10 non-spacing characters\r\n      metadata.needsDocumentation = !tsdoc.PlainTextEmitter.hasAnyTextContent(\r\n        metadata.tsdocComment.summarySection,\r\n        10\r\n      );\r\n    } else {\r\n      metadata.needsDocumentation = true;\r\n    }\r\n  }\r\n\r\n  private _checkForBrokenLinks(astDeclaration: AstDeclaration, metadata: ApiItemMetadata): void {\r\n    if (!metadata.tsdocComment) {\r\n      return;\r\n    }\r\n    this._checkForBrokenLinksRecursive(astDeclaration, metadata.tsdocComment);\r\n  }\r\n\r\n  private _checkForBrokenLinksRecursive(astDeclaration: AstDeclaration, node: tsdoc.DocNode): void {\r\n    if (node instanceof tsdoc.DocLinkTag) {\r\n      if (node.codeDestination) {\r\n        // Is it referring to the working package?  If not, we don't do any link validation, because\r\n        // AstReferenceResolver doesn't support it yet (but ModelReferenceResolver does of course).\r\n        // Tracked by:  https://github.com/microsoft/rushstack/issues/1195\r\n        if (\r\n          node.codeDestination.packageName === undefined ||\r\n          node.codeDestination.packageName === this._collector.workingPackage.name\r\n        ) {\r\n          const referencedAstDeclaration: AstDeclaration | ResolverFailure =\r\n            this._collector.astReferenceResolver.resolve(node.codeDestination);\r\n\r\n          if (referencedAstDeclaration instanceof ResolverFailure) {\r\n            this._collector.messageRouter.addAnalyzerIssue(\r\n              ExtractorMessageId.UnresolvedLink,\r\n              'The @link reference could not be resolved: ' + referencedAstDeclaration.reason,\r\n              astDeclaration\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (const childNode of node.getChildNodes()) {\r\n      this._checkForBrokenLinksRecursive(astDeclaration, childNode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Follow an `{@inheritDoc ___}` reference and copy the content that we find in the referenced comment.\r\n   */\r\n  private _applyInheritDoc(\r\n    astDeclaration: AstDeclaration,\r\n    docComment: tsdoc.DocComment,\r\n    inheritDocTag: tsdoc.DocInheritDocTag\r\n  ): void {\r\n    if (!inheritDocTag.declarationReference) {\r\n      this._collector.messageRouter.addAnalyzerIssue(\r\n        ExtractorMessageId.UnresolvedInheritDocBase,\r\n        'The @inheritDoc tag needs a TSDoc declaration reference; signature matching is not supported yet',\r\n        astDeclaration\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Is it referring to the working package?\r\n    if (\r\n      !(\r\n        inheritDocTag.declarationReference.packageName === undefined ||\r\n        inheritDocTag.declarationReference.packageName === this._collector.workingPackage.name\r\n      )\r\n    ) {\r\n      // It's referencing an external package, so skip this inheritDoc tag, since AstReferenceResolver doesn't\r\n      // support it yet.  As a workaround, this tag will get handled later by api-documenter.\r\n      // Tracked by:  https://github.com/microsoft/rushstack/issues/1195\r\n      return;\r\n    }\r\n\r\n    const referencedAstDeclaration: AstDeclaration | ResolverFailure =\r\n      this._collector.astReferenceResolver.resolve(inheritDocTag.declarationReference);\r\n\r\n    if (referencedAstDeclaration instanceof ResolverFailure) {\r\n      this._collector.messageRouter.addAnalyzerIssue(\r\n        ExtractorMessageId.UnresolvedInheritDocReference,\r\n        'The @inheritDoc reference could not be resolved: ' + referencedAstDeclaration.reason,\r\n        astDeclaration\r\n      );\r\n      return;\r\n    }\r\n\r\n    this._analyzeApiItem(referencedAstDeclaration);\r\n\r\n    const referencedMetadata: ApiItemMetadata =\r\n      this._collector.fetchApiItemMetadata(referencedAstDeclaration);\r\n\r\n    if (referencedMetadata.tsdocComment) {\r\n      this._copyInheritedDocs(docComment, referencedMetadata.tsdocComment);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copy the content from `sourceDocComment` to `targetDocComment`.\r\n   */\r\n  private _copyInheritedDocs(targetDocComment: tsdoc.DocComment, sourceDocComment: tsdoc.DocComment): void {\r\n    targetDocComment.summarySection = sourceDocComment.summarySection;\r\n    targetDocComment.remarksBlock = sourceDocComment.remarksBlock;\r\n\r\n    targetDocComment.params.clear();\r\n    for (const param of sourceDocComment.params) {\r\n      targetDocComment.params.add(param);\r\n    }\r\n    for (const typeParam of sourceDocComment.typeParams) {\r\n      targetDocComment.typeParams.add(typeParam);\r\n    }\r\n    targetDocComment.returnsBlock = sourceDocComment.returnsBlock;\r\n\r\n    targetDocComment.inheritDocTag = undefined;\r\n  }\r\n}\r\n"]}