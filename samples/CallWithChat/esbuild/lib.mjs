import { NodeModulesPolyfillPlugin as esbuildPluginNodeModulePolyfills } from '@esbuild-plugins/node-modules-polyfill';
import NodeGlobalsPolyfillPluginPkg from '@esbuild-plugins/node-globals-polyfill';
import svg from 'esbuild-plugin-svg';
import { htmlPlugin } from '@craftamap/esbuild-plugin-html';
import { build, serve } from 'esbuild';
import { readFileSync, writeFileSync } from 'fs';
import http from 'http';

const { NodeGlobalsPolyfillPlugin } = NodeGlobalsPolyfillPluginPkg;

const pkgJSON = JSON.parse(readFileSync('../package.json'));

const esbuildOptions = {
  bundle: true,
  entryPoints: ['../src/index.tsx'],
  logLevel: 'error',
  metafile: true, // Needed by `htmlPlugin`.
  outdir: '../dist/esbuild/', // Needed by `htmlPlugin`.
  plugins: [
    NodeGlobalsPolyfillPlugin(),
    esbuildPluginNodeModulePolyfills(),
    htmlPlugin({
      files: [
        {
          define: {
            __CALLINGVERSION__: pkgJSON.dependencies['@azure/communication-calling'],
            __CHATVERSION__: pkgJSON.dependencies['@azure/communication-chat'],
            __COMMUNICATIONREACTVERSION__: pkgJSON.dependencies['@azure/communication-react'],
            __BUILDTIME__: new Date().toLocaleString()
          },
          entryPoints: ['../src/index.tsx'],
          filename: 'index.html',
          htmlTemplate: `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="description" content="Azure Communication Services - UI Library: Call With Chat Sample app" />
  <title>UI Library Call With Chat Sample</title>
</head>

<body>
  <main id="root" class="Root"></main>
  <script type="text/javascript">
    window.FabricConfig = {};
    window.__CALLINGVERSION__ = '<%- define.__CALLINGVERSION__ %>';
    window.__CHATVERSION__ = '<%- define.__CHATVERSION__ %>';
    window.__COMMUNICATIONREACTVERSION__ = '<%- define.__COMMUNICATIONREACTVERSION__ %>';
    window.__BUILDTIME__ = '<%- define.__BUILDTIME__ %>';
  </script>
</body>
</html>
      `
        }
      ]
    }),
    svg()
  ],
  sourcemap: true
};

const API_HOST = 'localhost';
const API_PORT = '8080';
const API_PATHS = [
  '/token',
  '/refreshToken',
  '/isValidThread',
  '/createThread',
  '/userConfig',
  '/getEndpointUrl',
  '/addUser'
];

export async function serveIt() {
  const { host: esbuildHost, port: esbuildPort } = await serve(
    {
      servedir: '../dist/esbuild/' // index.html generated by `htmlPlugin`.
    },
    esbuildOptions
  );
  console.log(`esbuild started at ${esbuildHost}:${esbuildPort}`);

  // Then start a proxy server on port 3000
  http
    .createServer((req, res) => {
      // Forward each incoming request.
      const proxyReq = http.request(
        {
          hostname: isApiCall(req.url) ? API_HOST : esbuildHost,
          port: isApiCall(req.url) ? API_PORT : esbuildPort,
          path: req.url,
          method: req.method,
          headers: req.headers
        },
        (proxyRes) => {
          res.writeHead(proxyRes.statusCode, proxyRes.headers);
          proxyRes.pipe(res, { end: true });
        }
      );
      // Forward the body of the request.
      req.pipe(proxyReq, { end: true });
    })
    .listen(3000);
}

function isApiCall(url) {
  return API_PATHS.some((p) => url.startsWith(p));
}

export async function buildIt() {
  const result = await build(esbuildOptions);
  writeFileSync('../dist/esbuild/meta.json', JSON.stringify(result.metafile, null, 2));
}
